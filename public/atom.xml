<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Bloggin on Responsible AI</title>
    <description>Bloggin on Responsible AI</description>
    <link>http://localhost:1313/</link>
    
    <language>en</language>
    <copyright>Copyright 2025, Calvin Tran</copyright>
    <lastBuildDate>Mon, 10 Feb 2025 18:25:03 +0100</lastBuildDate>
    <generator>Hugo - gohugo.io</generator>
    <docs>http://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link href="http://localhost:1313//atom.xml" rel="self" type="application/atom+xml"/>
    
    
    <item>
      <title>MaNo: A Smarter Way to Estimate Model Accuracy to Face Distribution Shifts Biais</title>
      <link>http://localhost:1313/posts/mano-mania/</link>
      <description>&lt;!-- Custom CSS for MathJax and Tables --&gt;
&lt;style type=&#34;text/css&#34;&gt;
code.has-jax { 
    font: inherit;
    font-size: 100%; 
    background: inherit; 
    border: inherit;
}

table {
    border-collapse: collapse;
    width: 100%;
}
th, td {
    padding: 8px;
    text-align: center;
    border-bottom: 1px solid #ddd;
}
th {
    background-color: #f2f2f2;
}
tr:hover {
    background-color: #f5f5f5;
}
&lt;/style&gt;
&lt;!-- MathJax Configuration --&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // Removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;!-- Load MathJax --&gt;
&lt;script type=&#34;text/javascript&#34; 
    src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;
&lt;/script&gt;
&lt;h1 style=&#34;font-size: 28px; text-align: center;&#34;&gt; MaNo: A Smarter Way to Estimate Model Accuracy to Face Distribution Shifts Biais &lt;/h1&gt;
&lt;style&gt;
.hr-line {
    border: none;
    height: 2px;
    background-color: black;
    margin: 10px 0;
}
&lt;/style&gt;
&lt;hr class=&#34;hr-line&#34;&gt;
&lt;p&gt;&lt;strong&gt;Authors:&lt;/strong&gt; Alice Devilder, Sibylle Degos | &lt;strong&gt;Affiliations:&lt;/strong&gt; IP Paris, Responsible AI | &lt;strong&gt;Published:&lt;/strong&gt; 2025-02-10&lt;/p&gt;
&lt;hr class=&#34;hr-line&#34;&gt;
&lt;h2 id=&#34;table-of-contents&#34;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0.0&#34;&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0.1&#34;&gt;Why Do Logits Matter For Generalization Performance?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-0.2&#34;&gt;Why Does softmax normalisation fail to alleviate the overconfidence issues of logits-based methods?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Introducing MANO: A Two-Step Approach&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.1&#34;&gt;Normalization with Softrun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.2&#34;&gt;Aggregation Using Matrix Norms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Empirical Success: MANO vs. Baselines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Applications and Future Directions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a blog post about the paper &lt;em&gt;&lt;strong&gt;MaNo: Exploiting Matrix Norm for Unsupervised Accuracy Estimation Under Distribution Shifts&lt;/strong&gt;&lt;/em&gt;, published by &lt;em&gt;Renchunzi Xie&lt;/em&gt;, &lt;em&gt;Ambroise Odonnat&lt;/em&gt;, &lt;em&gt;Vasilii Feofanov&lt;/em&gt;, &lt;em&gt;Weijian Deng&lt;/em&gt;, &lt;em&gt;Jianfeng Zhang&lt;/em&gt; and &lt;em&gt;Bo An&lt;/em&gt; in November 2024 and avalaible on &lt;a href=&#34;https://arxiv.org/abs/2405.18979&#34;&gt;arXiv&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Usually, in machine learning, data is divided into train/test sets. But you already know that! The problem is that there is often a shift in the way data is distributed or collected between train and test set. This shift distribution can disrupt predictive models, and can be a risk for AI safety.
To illustrate, imagine a pedestrian image recognition model used for autonomous cars. Trained on images of pedestrians during the day, fails to detect pedestrians at night due to a shift in data distribution, leading to accidents.
Traditional approaches to evaluate models rely on costly, computationally expensive ground-truth labels, making the evaluation difficult. Thanks to the solution in the paper “&lt;em&gt;&lt;strong&gt;MANO: Exploiting Matrix Norm for Unsupervised Accuracy Estimation Under Distribution Shifts&lt;/strong&gt;&lt;/em&gt;”, we can estimate model accuracy without labeled test data. MANO (Matrix Norm-based Accuracy Estimation) is presented as a novel solution, leveraging logits (the raw outputs of a model) to infer confidence and predict accuracy in an unsupervised manner. It is splitted in two steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Softrun&lt;/strong&gt; normalization to calibrate logits&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lp norm&lt;/strong&gt; to quantify decision boundary distances.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s deep into MANO ! You will understand the theoretical foundations and empirical success that make this method very interesting to estimate the accuracy in an unsupervised environment.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;section-0.0&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A common method for estimating accuracy without labels is analyzing a model’s &lt;strong&gt;logits&lt;/strong&gt;, the raw outputs before softmax. However, existing methods suffer from overconfidence issues and biased predictions under distribution shifts.&lt;/p&gt;
&lt;h3 id=&#34;section-0.1&#34;&gt;&lt;strong&gt;Let’s understand why Logits Matter For Generalization Performance !&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Logits&lt;/strong&gt; represent the raw values generated by a model before they are passed through a normalization function, such as softmax. In simple terms, in classification tasks, logits are the &lt;strong&gt;raw scores&lt;/strong&gt; associated with each class that help evaluate the model&amp;rsquo;s performance. These scores are particularly important for measuring a model&amp;rsquo;s generalization ability, i.e., its capacity to make accurate predictions on new, unseen data.&lt;/p&gt;
&lt;p&gt;Mathematically, for a given input $x$, the model computes logits as:&lt;/p&gt;
&lt;p&gt;$$ q = f(x) = (\omega_k^T z)_k \in \mathbb{R}^K $$&lt;/p&gt;
&lt;p&gt;where $z$ is the learned feature representation, $\omega_k$ is the classifier’s weight vector, and $K$ is the number of classes. The magnitude of logits correlates with the distance to decision boundaries, making them valuable for accuracy estimation.&lt;/p&gt;
&lt;p&gt;The concept of logits is based on the &lt;strong&gt;low-density separation&lt;/strong&gt; assumption. According to this assumption, data points located near the decision boundaries of the model (i.e., where the model is uncertain) are more likely to be misclassified. This means that a model may struggle to make reliable predictions for these ambiguous examples. By analyzing logits, we can gain insights into the model&amp;rsquo;s confidence levels and its ability to generalize to unseen data.&lt;/p&gt;
&lt;p&gt;Now you understand that logits are very important for generalisation performance, but one question remains&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;section-0.2&#34;&gt;&lt;strong&gt;Why Does softmax normalisation fail to alleviate the overconfidence issues of logits-based methods?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Softmax normalization&lt;/strong&gt; is commonly used to transform these logits into &lt;strong&gt;class probabilities&lt;/strong&gt;, which makes the predictions interpretable. By applying softmax, logits are converted into values between 0 and 1, representing the probability that each class is correct.&lt;/p&gt;
&lt;p style=&#34;display: inline-block; vertical-align: middle;&#34;&gt;
    Mathematically, softmax is defined as:
&lt;/p&gt;
&lt;figure id=&#34;my-fig&#34; class=&#34;numbered&#34; style=&#34;display: inline-block; vertical-align: middle; margin-left: 10px;&#34;&gt;
    &lt;img src=&#34;./images/Mano/softmax_img.png&#34; class=&#34;align-center&#34; style=&#34;width: 250px; height: auto;&#34;&gt;
&lt;/figure&gt;
&lt;p&gt;However, this approach has a major issue: it is &lt;strong&gt;sensitive to prediction bias&lt;/strong&gt; and can lead to &lt;strong&gt;overconfidence&lt;/strong&gt;. In other words, if a model generates very high logits for a class (indicating strong confidence in its prediction), but that prediction is incorrect, it can skew the results. This phenomenon is largely due to the &lt;strong&gt;exponential function&lt;/strong&gt; in the softmax formula, which amplifies the differences between logits. This can lead to significant errors, especially when the model is overly confident without being accurate.&lt;/p&gt;
&lt;p&gt;This overconfidence bias is a critical issue when evaluating a model’s performance.
To address this challenge, the paper introduces &lt;strong&gt;MANO&lt;/strong&gt;, a novel method that leverages logits to estimate model accuracy without labeled data.&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;strong&gt;Introducing MANO: A Two-Step Approach&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;MANO addresses these challenges through a two-step process: &lt;strong&gt;Normalization with Softrun&lt;/strong&gt; and &lt;strong&gt;Aggregation using Matrix Norms&lt;/strong&gt;. Here is a scheme so you can visualize the process :&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Mano/Mano_schema.png&#34;
  alt=&#34;Mano schema&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h3 id=&#34;section-1.1&#34;&gt;&lt;strong&gt;1. Normalization with Softrun&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;As explained before, Softmax is a very common activation function to transform logits into probabilities. But its exponential nature exaggerates differences between logits, making the model appear more confident than it actually is.&lt;/p&gt;
&lt;p&gt;First, let’s calculate $\Phi(\mathcal{D}_{test})$, a function that measures the amount of complete information on the logits.&lt;/p&gt;
&lt;p&gt;$\Phi(\mathcal{D}_{test}) =$&lt;/p&gt;
&lt;p&gt;$$ -\frac{1}{NK} \sum_{j=1}^{N} \sum_{k=1}^{K} \log \left(\frac{\exp(q_{j,k})}{\sum_{j=1}^{K} \exp(\mathbf{q}_{i,j})} \right) $$&lt;/p&gt;
&lt;p&gt;The general formula has the same structure of the softmax but with a dynamic $v(\mathbf{q}_i)$:&lt;/p&gt;
&lt;p&gt;$$ \sigma(q_i) = \frac{v(q_i)}{\sum_{k=1}^{K} v(q_i)_k} \in \Delta_K$$&lt;/p&gt;
&lt;p&gt;Thanks to $\Phi(\mathcal{D}_{test})$, it will determine whether to apply a Taylor or softmax normalization term. The function $v(q)$ is defined as:&lt;/p&gt;
&lt;figure id=&#34;my-fig_eq_v&#34; class=&#34;numbered&#34; &gt;
    &lt;img src=&#34;./images/Mano/equation_v.png&#34; class=&#34;align-center&#34;&gt;
    &lt;p style=&#34;text-align: center;&#34;&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;When the model’s predictions are unreliable, Softrun applies a Taylor approximation rather than the softmax. The Taylor approximation smooths out the effect of large logits, preventing the model from being overly confident in any particular prediction. By contrast, when the dataset is well-calibrated, the function behaves like softmax, preserving probability distributions where confidence is warranted.&lt;/p&gt;
&lt;figure id=&#34;my-fig&#34; class=&#34;numbered&#34; style=&#34;float: left; margin-left: 10px; width: 50%;&#34;&gt;
    &lt;img src=&#34;./images/Mano/Lp_norm_schema.png&#34; class=&#34;align-center&#34; style=&#34;width: 100%; height: auto;&#34;&gt;
    &lt;p style=&#34;text-align: center;&#34;&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;To recapitulate, there are 3 studied cases :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 1 - High Confidence, Low Bias&lt;/strong&gt; When the model is both confident and has a low bias, its logits are highly reliable. This is an ideal case where we can safely apply softmax normalization without worrying about introducing additional bias. The softmax probabilities will be well-calibrated, and no extra correction is needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 2 - Low Confidence, High Bias&lt;/strong&gt; If the model is not confident in its predictions and shows high bias, it means that its predictions are skewed but also uncertain. In this situation, we use the Taylor normalization. The smooth properties of Taylor normalization help mitigate bias while maintaining better uncertainty estimation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 3 - Grey zone&lt;/strong&gt; Sometimes, the model&amp;rsquo;s behavior doesn’t fit neatly into one category. In this scenario, different examples fall into different cases, making it difficult to determine the best normalization method. In these cases, it is safer to use Taylor normalization because it avoids exacerbating bias in the same way softmax does.&lt;/p&gt;
&lt;p&gt;Besides, the output of this first step is scaled logits: $Q_i = \sigma(q_i) \in \Delta_K$.&lt;/p&gt;
&lt;h3 id=&#34;section-1.2&#34;&gt;&lt;strong&gt;2. Aggregation Using Matrix Norms&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;After normalization, MANO &lt;strong&gt;aggregates&lt;/strong&gt; the logits using the &lt;strong&gt;Lp norm&lt;/strong&gt; of the matrix $Q$, defined as:&lt;/p&gt;
&lt;figure id=&#34;my-fig&#34; class=&#34;numbered&#34; &gt;
    &lt;img src=&#34;./images/Mano/equation_s.png&#34; class=&#34;align-center&#34;&gt;
    &lt;p style=&#34;text-align: center;&#34;&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Q$ represents the matrix of softmax probabilities,&lt;/li&gt;
&lt;li&gt;$N$ is the number of test samples,&lt;/li&gt;
&lt;li&gt;$K$ is the number of classes,&lt;/li&gt;
&lt;li&gt;$σ(q_i)_k$ is the result of the step of normalisation seen before,&lt;/li&gt;
&lt;li&gt;$p$ is a hyperparameter controlling the sensitivity of the aggregation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The normalization factor $\frac{1}{^p\sqrt{NK}}$​ ensures that $S(f,D_{test})$ is independent of dataset size and number of classes, providing a standardized metric across different test distributions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Using the Lp​ Norm&lt;/strong&gt;
One of the main advantages of the Lp​ norm over the Nuclear Norm is its &lt;strong&gt;computational efficiency&lt;/strong&gt;. The Lp​ norm is straightforward to compute, requiring only element-wise operations and summations. In contrast, nuclear norm-based methods involve Singular Value Decomposition (SVD), which is computationally expensive and less scalable for large datasets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Effect of p on Aggregation Sensitivity&lt;/strong&gt;&lt;/p&gt;
&lt;figure id=&#34;my-fig&#34; class=&#34;numbered&#34; style=&#34;float: right; margin-right: 10px; width: 45%;&#34;&gt;
    &lt;img src=&#34;./images/Mano/impact_Lp_norm.png&#34; class=&#34;align-center&#34; style=&#34;width: 100%; height: auto;&#34;&gt;
    &lt;p style=&#34;text-align: center;&#34;&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;In the formula, the parameter p controls the sensitivity of the metric to high-confidence predictions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;small p&lt;/strong&gt;, all predictions contribute relatively equally to the final score.&lt;/li&gt;
&lt;li&gt;As &lt;strong&gt;p increases&lt;/strong&gt;, the aggregation puts more emphasis on confident predictions (i.e., softrun values close to 1).&lt;/li&gt;
&lt;li&gt;In the case &lt;strong&gt;p→∞&lt;/strong&gt;, the norm becomes equivalent to the maximum prediction confidence.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, the authors of the paper conducted a sensitivity analysis on 5 datasets using ResNet-18 and found that $p=4$ provides the best balance between capturing model confidence and maintaining robustness. This is illustrated in the experimental results on the right.&lt;/p&gt;
&lt;p&gt;Now, let’s dive into the empirical results of MaNo across various datasets.&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;strong&gt;Empirical Success: MANO vs. Baselines&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;MANO has been evaluated against &lt;strong&gt;11 baseline methods&lt;/strong&gt;, including Rotation Prediction (Rotation) (Dengetal.,2021), Averaged Confidence (ConfS core) (HendrycksandGimpel,2016) and Entropy (Guilloryetal.,2021) amongst others. To show the versatility of Mano across different architectures, it has been evaluated across 3 different neural network architectures: ResNet18, ResNet50 (Heetal.,2016), and WRN-50-2. The experiments were conducted on a range of classification tasks, including image recognition benchmarks such as CIFAR-10, CIFAR-100, TinyImageNet, and ImageNet, as well as domain adaptation datasets like PACS and Office-Home.&lt;/p&gt;
&lt;p&gt;In this comprehensive evaluation, the authors have considered 3 types of distribution shifts: &lt;strong&gt;synthetic shifts&lt;/strong&gt;, where models were tested against artificially corrupted images; &lt;strong&gt;natural shifts&lt;/strong&gt;, which involved datasets collected from different distributions than the training data; and &lt;strong&gt;subpopulation shifts&lt;/strong&gt;, where certain classes or groups were underrepresented in the training data. To evaluate Mano under synthetic shifts, the authors have used CIFAR-10C, CIFAR-100C, ImageNet-C, and TinyImageNet-C, covering various corruption types and severity levels. For natural shifts, they tested on OOD datasets from PACS, Office-Home, DomainNet, and RR1 WILDS. To assess subpopulation shifts, they used the BREEDS benchmark, including Living-17, Nonliving-26, Entity-13, and Entity-30 from ImageNet-C.&lt;/p&gt;
&lt;figure id=&#34;my-fig&#34; class=&#34;numbered&#34; style=&#34;float: left; margin-left: 10px; width: 45%;&#34;&gt;
    &lt;img src=&#34;./images/Mano/R2_scores.png&#34; class=&#34;align-center&#34; style=&#34;width: 100%; height: auto;&#34;&gt;
    &lt;!-- &lt;p style=&#34;text-align: center;&#34;&gt;$R^2$ distribution ResNet18 on all distribution shifts &lt;/p&gt; --&gt;
&lt;/figure&gt;
&lt;p&gt;On the left, we can see a box plot of $R^2$ distribution showing the estimation robustness across different shifts on all datasets except ImageNet, using ResNet18. We observe that MANO consistently outperformed existing methods in all three scenarios (achieving the highest median estimation performance), demonstrating its robustness to varying degrees of domain shifts. For more details, you can find numerical results for the different shifts in the paper. For instance, MANO achieves $R^2 &amp;gt; 0.960$ and $ρ &amp;gt; 0.990$ under subpopulation shift, where as the performance of other baselines does not reach such consistently high levels.&lt;/p&gt;
&lt;p&gt;Additionally, in the figure below, we can see a scatter plot illustrating the outperforming results of Mano on natural shift compared to Dispersion Score and ProjNorm on Entity-18 using ResNet-18.&lt;/p&gt;
&lt;figure id=&#34;my-fig&#34; class=&#34;numbered&#34;&gt;
    &lt;img src=&#34;./images/Mano/results_plot.png&#34; class=&#34;align-center&#34; style=&#34;width: 100%; height: auto;&#34;&gt;
    &lt;p style=&#34;text-align: center;&#34;&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;We can observe that MANO scores demonstrate a robust linear relationship with ground-truth OOD errors, whereas other state-of-the-art baselines tend to produce biased estimations, particularly for high test errors. Therefore, MANO significantly boosts performance under the natural shift.&lt;/p&gt;
&lt;p&gt;Unlike traditional approaches that either rely on softmax probabilities or require retraining on new distributions, MANO provides a label-free and computation-efficient accuracy estimation method that scales well across different domains. By using &lt;strong&gt;Softrun normalization and matrix norm aggregation&lt;/strong&gt;, MANO achieves a stronger correlation with actual accuracy, ensuring that model performance estimates remain reliable even when faced with extreme distribution shifts.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;strong&gt;Applications and Future Directions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s discuss now how MANO can be applied in practice, the benefit of combining Softrun with other estimation baselines, and the limitations of this approach.&lt;/p&gt;
&lt;p&gt;One crucial application in the real world is &lt;strong&gt;deployment risk estimation&lt;/strong&gt;, where real-time insights into model reliability can be obtained without costly manual labeling. This is particularly useful for models deployed in dynamic environments, such as healthcare and autonomous systems, where distribution shifts are frequent and unpredictable.&lt;/p&gt;
&lt;p&gt;Now, what is the impact of Softrun on other estimation baselines? The authors have conducted an ablation study to assess how Softrun enhances the performance of Nuclear (Deng et al., 2023), ConfScore (Hendrycks and Gimpel, 2016), and MANO. As shown in the paper, Softrun significantly improves Nuclear’s $R^2$ score, particularly in datasets like Office-Home, where its performance increases from $0.692$ to $0.826$. These findings suggest that integrating Softrun into existing methods can improve their estimation reliability, making them more robust to poorly calibrated datasets.&lt;/p&gt;
&lt;p&gt;Despite its strong theoretical foundation and empirical performance, MANO has certain limitations. One challenge is its reliance on the selection criterion parameter $η$ in Equation section 1.1. \ref{my-fig_eq_v}, which requires careful tuning. The authors acknowledge this issue and discuss it further in Appendix E.3. To overcome this dependency, future research will focus on developing an automated approach to selecting the optimal normalization function without manual hyperparameter adjustments. Additionally, if multiple validation sets are available, as suggested in previous works (Deng et al., 2021; Deng and Zheng, 2021), the selection of $η$ could be refined based on these datasets, further improving MANO’s adaptability and robustness across different tasks.&lt;/p&gt;
&lt;h2 id=&#34;section-4&#34;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;MANO represents a &lt;strong&gt;significant breakthrough&lt;/strong&gt; in unsupervised accuracy estimation. By addressing &lt;strong&gt;logit overconfidence&lt;/strong&gt; and introducing &lt;strong&gt;Softrun normalization&lt;/strong&gt;, MANO provides a &lt;strong&gt;scalable, robust, and theoretically grounded&lt;/strong&gt; approach for evaluating model accuracy under distribution shifts.&lt;/p&gt;
&lt;p&gt;🔗 &lt;strong&gt;Code available at:&lt;/strong&gt; &lt;a href=&#34;https://github.com/Renchunzi-Xie/MaNo&#34;&gt;MANO GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MANO isn’t just a step forward—it’s a leap toward &lt;strong&gt;trustworthy AI deployment in the wild&lt;/strong&gt;!&lt;/p&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/mano-mania/</guid>
      <pubDate>Mon, 10 Feb 2025 18:25:03 +0100</pubDate>
    </item>
    
    <item>
      <title>Axiomatic Explanations for Visual Search, Retrieval and Similarity Learning</title>
      <link>http://localhost:1313/posts/axiomatic_explanations/</link>
      <description>&lt;style
TYPE=&#34;text/css&#34;&gt;

code.has-jax {font:
inherit;
font-size:
100%; 
background: 
inherit; 
border: 
inherit;}

&lt;/style&gt;
&lt;script
type=&#34;text/x-mathjax-config&#34;&gt;

MathJax.Hub.Config({

    tex2jax: {

        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],

        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry

    }

});

MathJax.Hub.Queue(function() {

    var all = MathJax.Hub.getAllJax(), i;

    for(i = 0; i &lt; all.length; i += 1) {

        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;

    }

});

&lt;/script&gt;
&lt;script
type=&#34;text/javascript&#34;
src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
&lt;meta charset=&#34;UTF-8&#34;&gt;
&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
&lt;title&gt;Styled Table&lt;/title&gt;
&lt;style&gt;
    table {
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        padding: 8px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }
    th {
        background-color: #f2f2f2;
    }
    tr:hover {
        background-color: #f5f5f5;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;/html&gt;
&lt;h1 style=&#34;font-size: 24px;&#34;&gt;AXIOMATIC EXPlanATIONS FOR VISUAL SEARCh, RETRIEVAL, AND SIMILARITY LEARNING &lt;/h1&gt;
&lt;h1 style=&#34;font-size: 13px;&#34;&gt;Authors:Mark Hamilton ${ }^{1,2}$, Scott Lundberg ${ }^{2}$, Stephanie Fu ${ }^{1}$, Lei Zhang ${ }^{2}$, William T. Freeman ${ }^{1,3}$&lt;br&gt;${ }^{1}$ MIT, ${ }^{2}$ Microsoft, ${ }^{3}$ Google&lt;br&gt;markth@mit.edu
&lt;br/&gt;
**Authors of the blogpost**: Yassine Beniguemim and Noureddine BOULLAM.
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0.0&#34;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-0.1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Exploring Visual Search Algorithm Explanations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.1&#34;&gt;First-Order Explanations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.2&#34;&gt;Unifying First-Order Search Interpretation Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.3&#34;&gt;Second-Order Explanations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.4&#34;&gt;A Fast Shapley-Taylor Approximation Kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.5&#34;&gt;Second-Order Search Activation Maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Implementing Second-Order Explanations in Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-0.0&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Visual search, recommendation, and contrastive similarity learning are pivotal technologies shaping user experiences in the digital age. However, the complexity of modern model architectures often obscures their inner workings, making them challenging to interpret. In our blog, we delve into a groundbreaking paper titled &amp;ldquo;AXIOMATIC EXPLANATIONS FOR VISUAL SEARCH, RETRIEVAL, AND SIMILARITY LEARNING&amp;rdquo; authored by Mark Hamilton et al. This paper introduces a novel framework grounded in the theory of fair credit assignment, providing axiomatic solutions that generalize existing explanation techniques and address fairness concerns in recommendation systems. Through our exploration, we aim to demystify the complexities of visual search algorithms, offering readers insights into their operation and implications for various domains.&lt;/p&gt;
&lt;div style=&#34;display: inline-block; width:&#34;&gt;
  &lt;img src=&#34;https://cdn.mathpix.com/cropped/2024_03_29_e6cbedd60806617ef5aeg-02.jpg?height=600&amp;width=1354&amp;top_left_y=282&amp;top_left_x=382&#34; alt=&#34;Figure 5&#34; width=&#34;100%&#34;&gt;
  &lt;p style=&#34;text-align: center; font-size: 10px;&#34;&gt;Figure 1: Architectures for search engine interpretability. Like classifier explanations, First-order search explanations yield heatmaps of important pixels for similarity (bottom row third column). Second order search interpretation methods yield a dense correspondence between image locations (last two columns). CAM (second column) is a particular case of Shapley value approximation, and we generalize it to yield dense correspondences (last column).&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;section-0.1&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Welcome to our blog, where we embark on a journey to demystify the intricate world of visual search technology. In today&amp;rsquo;s digital age, recommendation systems play a pivotal role in guiding users through a vast sea of information, aiding in everything from online shopping to content discovery.&lt;/p&gt;
&lt;p&gt;Yet, behind the scenes, these recommendation engines operate using sophisticated algorithms that can seem like a black box to many users. How do they decide which products to suggest, or which images are most similar to a given query? These questions lie at the heart of our exploration.&lt;/p&gt;
&lt;p&gt;Inspired by the groundbreaking paper &amp;ldquo;AXIOMATIC EXPLANATIONS FOR VISUAL SEARCH, RETRIEVAL, AND SIMILARITY LEARNING&amp;rdquo; authored by Mark Hamilton et al., we embark on a quest to unravel the inner workings of these recommendation systems. By delving into the concepts of fair credit assignment, Shapley values, and Harsanyi Dividends, we aim to shed light on the underlying principles that govern visual search algorithms.&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;1. Exploring Visual Search Algorithm Explanations&lt;/h2&gt;
&lt;p&gt;In our exploration of visual search algorithm explanations, we delve into the fundamental concepts introduced in the paper by Mark Hamilton et al. Our journey begins with an examination of the two distinct classes of explanation methods: &amp;ldquo;first order&amp;rdquo; and &amp;ldquo;second order.&amp;rdquo; First-order approaches focus on highlighting important pixels contributing to object similarity, while second-order explanations provide a comprehensive correspondence between query and retrieved images.&lt;/p&gt;
&lt;h3 id=&#34;section-1.1&#34;&gt;1.1 First-Order Explanations&lt;/h3&gt;
&lt;p&gt;First-order interpretations are rooted in classifier explainability theory, offering insights into the importance of individual pixels or features in determining object similarity. We explore the theoretical underpinnings of these explanations, drawing parallels to existing techniques such as Class Activation Maps (CAM), GradCAM, and LIME.&lt;/p&gt;
&lt;h4 id=&#34;formalizing-first-order-interpretations&#34;&gt;Formalizing First-Order Interpretations&lt;/h4&gt;
&lt;p&gt;The core of first-order explanations lies in the formalization of the value function, typically represented as $v_1(S)$, where $S$ represents subsets of features or pixels. This function allows us to quantify the contribution of each subset to the overall similarity score between query and retrieved images.&lt;/p&gt;
&lt;p&gt;$$
v_1(S): 2^N \rightarrow \mathbb{R} := d(x, \text{mask}(y, S))
$$&lt;/p&gt;
&lt;h3 id=&#34;section-1.2&#34;&gt;1.2 Unifying First-Order Search Interpretation Techniques&lt;/h3&gt;
&lt;p&gt;Building upon existing classifier explainability methods, we introduce an approach to transform opaque and grey-box classification explainers into search engine explainers. By formalizing the value function and leveraging concepts like Shapley values, we extend existing approaches such as LIME and SHAP to the realm of visual search.&lt;/p&gt;
&lt;h4 id=&#34;leveraging-shapley-values&#34;&gt;Leveraging Shapley Values&lt;/h4&gt;
&lt;p&gt;Shapley values provide a principled way to assign credit to individual features or pixels based on their contribution to the similarity function. By applying Shapley values to the search engine context, we can identify the most influential elements in both query and retrieved images.&lt;/p&gt;
&lt;p&gt;$$
\phi_{v_1}(S) = \sum_{T: S \subset T} \frac{d_v(T)}{\binom{|T|}{|S|}}
$$&lt;/p&gt;
&lt;h3 id=&#34;section-1.3&#34;&gt;1.3 Second-Order Explanations&lt;/h3&gt;
&lt;p&gt;Moving beyond pixel-level interpretations, we delve into second-order explanations that capture the interactions between areas of query and retrieved images. Drawing inspiration from Harsanyi Dividends and Shapley-Taylor indices, we explore how these concepts generalize to provide richer insights into image similarity.&lt;/p&gt;
&lt;h4 id=&#34;understanding-second-order-interpretations&#34;&gt;Understanding Second-Order Interpretations&lt;/h4&gt;
&lt;p&gt;Second-order explanations go beyond individual features to capture the interaction strength between different parts of query and retrieved images. We introduce the concept of Harsanyi Dividends, which provide a detailed view of the function&amp;rsquo;s behavior at every coalition of features.&lt;/p&gt;
&lt;p&gt;$$
d_v(S) = \begin{cases} v(S) &amp;amp; \text{if } |S|=1 \
v(S) - \sum_{T \subsetneq S} d_v(T) &amp;amp; \text{if } |S| &amp;gt; 1 \end{cases}
$$&lt;/p&gt;
&lt;h3 id=&#34;section-1.4&#34;&gt;1.4 A Fast Shapley-Taylor Approximation Kernel&lt;/h3&gt;
&lt;p&gt;While Harsanyi Dividends and Shapley-Taylor indices offer robust credit assignment mechanisms, their computation can be challenging. We introduce a novel weighting kernel for second-order Shapley-Taylor indices, significantly reducing computational complexity while maintaining accuracy.&lt;/p&gt;
&lt;div style=&#34;display: inline-block; width: 45%;&#34;&gt;
  &lt;img src=&#34;https://cdn.mathpix.com/cropped/2024_03_29_e6cbedd60806617ef5aeg-07.jpg?height=455&amp;width=610&amp;top_left_y=282&amp;top_left_x=405&#34; alt=&#34;Figure 5&#34; width=&#34;100%&#34;&gt;
  &lt;p style=&#34;text-align: center; font-size: 10px;&#34;&gt;Figure 5: Convergence of Shapley-Taylor estimation schemes with respect to the Mean Squared Error (MSE) on randomly initialized deep networks with 15 dimensional input. Our strategies (Kernel) converge with significantly fewer function evaluations.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&#34;display: inline-block; width: 45%;&#34;&gt;
  &lt;img src=&#34;https://cdn.mathpix.com/cropped/2024_03_29_e6cbedd60806617ef5aeg-07.jpg?height=455&amp;width=656&amp;top_left_y=282&amp;top_left_x=1079&#34; alt=&#34;Figure 6&#34; width=&#34;100%&#34;&gt;
  &lt;p style=&#34;text-align: center; font-size: 10px;&#34;&gt;Figure 6: Our Second-order explanation evaluation strategy. A good method should project query objects (top left and middle) to corresponding objects in the retrieved image (bottom left and middle). When censoring all but these shared objects (right column) the search engine should view these images as similar.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;efficient-computation-with-kernel-approximation&#34;&gt;Efficient Computation with Kernel Approximation&lt;/h4&gt;
&lt;p&gt;The proposed weighting kernel allows for efficient approximation of Shapley-Taylor indices, enabling faster computation without sacrificing accuracy. By sampling random coalitions and aggregating information into a weighted quadratic model, we achieve a significant reduction in computational overhead.&lt;/p&gt;
&lt;h3 id=&#34;section-1.5&#34;&gt;1.5 Second-Order Search Activation Maps&lt;/h3&gt;
&lt;p&gt;Applying the Shapley-Taylor framework, we derive second-order search activation maps, offering dense correspondences between query and retrieved image locations. These maps provide a deeper understanding of image similarity, facilitating more nuanced interpretations of visual search results.&lt;/p&gt;
&lt;h4 id=&#34;visualizing-second-order-explanations&#34;&gt;Visualizing Second-Order Explanations&lt;/h4&gt;
&lt;p&gt;Using the derived Shapley-Taylor indices, we construct matrices representing the interaction strength between query and retrieved image locations. These matrices allow us to visualize how different parts of the query image correspond to parts of the retrieved image, providing intuitive insights into the similarity judgments made by the search algorithm.&lt;/p&gt;
&lt;div style=&#34;display: inline-block; width:&#34;&gt;
  &lt;img src=&#34;https://cdn.mathpix.com/cropped/2024_03_29_e6cbedd60806617ef5aeg-08.jpg?height=1003&amp;width=1312&amp;top_left_y=377&amp;top_left_x=404&#34; alt=&#34;Figure 5&#34; width=&#34;100%&#34;&gt;
  &lt;p style=&#34;text-align: center; font-size: 10px;&#34;&gt;Table 1: Comparison of performance of first- and second-order search explanation methods.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;section-2&#34;&gt;2. Implementing Second-Order Explanations in Practice&lt;/h2&gt;
&lt;p&gt;With a solid theoretical foundation in place, we now turn our attention to practical implementation steps for incorporating second-order explanations into existing visual search systems.&lt;/p&gt;
&lt;h3 id=&#34;section-2.1&#34;&gt;2.1 Data Preparation and Preprocessing&lt;/h3&gt;
&lt;p&gt;Before integrating second-order explanations, it&amp;rsquo;s crucial to preprocess and structure the data appropriately. This involves organizing the dataset into query-image pairs, ensuring consistency in image format, resolution, and preprocessing steps such as normalization and resizing.&lt;/p&gt;
&lt;h4 id=&#34;data-pipeline-overview&#34;&gt;Data Pipeline Overview&lt;/h4&gt;
&lt;p&gt;We design a robust data pipeline encompassing data loading, preprocessing, and augmentation stages. Leveraging popular libraries like TensorFlow and PyTorch, we streamline the process of preparing the dataset for training and evaluation.&lt;/p&gt;
&lt;h3 id=&#34;section-2.2&#34;&gt;2.2 Model Modification and Integration&lt;/h3&gt;
&lt;p&gt;To enable the computation of second-order explanations, we modify the existing visual search model architecture. This adaptation involves incorporating additional layers or modules to capture the interactions between query and retrieved images.&lt;/p&gt;
&lt;h4 id=&#34;architectural-adjustments&#34;&gt;Architectural Adjustments&lt;/h4&gt;
&lt;p&gt;We introduce novel components such as interaction modules or attention mechanisms to facilitate the computation of second-order explanations. These architectural adjustments enable the model to learn and represent the complex relationships between different regions of query and retrieved images.&lt;/p&gt;
&lt;h3 id=&#34;section-2.3&#34;&gt;2.3 Training and Evaluation Procedures&lt;/h3&gt;
&lt;p&gt;Training a visual search model with second-order explanations requires careful consideration of training objectives, loss functions, and evaluation metrics. We devise training procedures that optimize both the primary search task and the secondary objective of generating accurate explanations.&lt;/p&gt;
&lt;h4 id=&#34;objective-function-formulation&#34;&gt;Objective Function Formulation&lt;/h4&gt;
&lt;p&gt;We define a composite objective function that combines the primary search task loss with a regularization term for encouraging meaningful second-order explanations. This formulation ensures that the model learns to balance between search accuracy and explanation fidelity during training.&lt;/p&gt;
&lt;h3 id=&#34;section-2.4&#34;&gt;2.4 Validation and Interpretation&lt;/h3&gt;
&lt;p&gt;Once trained, we validate the effectiveness of the model&amp;rsquo;s second-order explanations through comprehensive evaluation procedures. This involves qualitative analysis of explanation maps, quantitative assessment of explanation quality, and user studies to gauge the interpretability of the generated explanations.&lt;/p&gt;
&lt;h4 id=&#34;evaluation-metrics&#34;&gt;Evaluation Metrics&lt;/h4&gt;
&lt;p&gt;We define metrics such as explanation fidelity, coherence, and relevance to quantitatively evaluate the quality of second-order explanations. By comparing against baseline methods and human annotations, we assess the model&amp;rsquo;s ability to capture meaningful interactions between query and retrieved images.&lt;/p&gt;
&lt;h3 id=&#34;section-2.5&#34;&gt;2.5 Deployment Considerations&lt;/h3&gt;
&lt;p&gt;Deploying a visual search system with second-order explanations requires careful planning and integration into existing infrastructure. We address scalability, latency, and user experience considerations to ensure seamless deployment in real-world applications.&lt;/p&gt;
&lt;h4 id=&#34;scalable-inference-architecture&#34;&gt;Scalable Inference Architecture&lt;/h4&gt;
&lt;p&gt;We design an inference pipeline optimized for efficient computation of second-order explanations in production environments. This involves leveraging distributed computing frameworks and model optimization techniques to minimize latency and maximize throughput.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;3. Conclusion&lt;/h2&gt;
&lt;p&gt;By following these implementation steps, we bridge the gap between theoretical insights and practical deployment of second-order explanations in visual search systems. Our approach empowers users to gain deeper insights into the underlying mechanisms driving search results, paving the way for more transparent and interpretable AI systems.&lt;/p&gt;
&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Video Description&lt;/strong&gt;: Dive deeper into the concepts with a detailed video overview available &lt;a href=&#34;https://aka.ms/axiomatic-video&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Repository&lt;/strong&gt;: Access the training and evaluation code to explore the implementation details &lt;a href=&#34;https://aka.ms/axiomatic-code&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a comprehensive exploration of the technical details and experimental results, refer to the &lt;a href=&#34;https://arxiv.org/pdf/2103.00370.pdf&#34;&gt;full paper&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;REFERENCES&lt;/h2&gt;
&lt;p&gt;Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk. Slic superpixels. Technical report, 2010.&lt;/p&gt;
&lt;p&gt;Jiwoon Ahn, Sunghyun Cho, and Suha Kwak. Weakly supervised learning of instance segmentation with inter-pixel relations. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 2209-2218, 2019.&lt;/p&gt;
&lt;p&gt;Marco Ancona, Cengiz Oztireli, and Markus Gross. Explaining deep neural networks with a polynomial time algorithm for shapley value approximation. In International Conference on Machine Learning, pp. 272-281. PMLR, 2019.&lt;/p&gt;
&lt;p&gt;Robert J Aumann and Lloyd S Shapley. Values of non-atomic games. Princeton University Press, 2015.&lt;/p&gt;
&lt;p&gt;Sebastian Bach, Alexander Binder, Grégoire Montavon, Frederick Klauschen, Klaus-Robert Müller, and Wojciech Samek. On pixel-wise explanations for non-linear classifier decisions by layer-wise relevance propagation. PloS one, 10(7):e0130140, 2015.&lt;/p&gt;
&lt;p&gt;Yoshua Bengio, Aaron Courville, and Pascal Vincent. Representation learning: A review and new perspectives. IEEE transactions on pattern analysis and machine intelligence, 35(8):1798-1828, 2013.&lt;/p&gt;
&lt;p&gt;Bing. Beyond text queries: Searching with bing visual search, Jun 2017. URL https://aka. ms/AAas 7 jg.&lt;/p&gt;
&lt;p&gt;Holger Caesar, Jasper Uijlings, and Vittorio Ferrari. Coco-stuff: Thing and stuff classes in context. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 12091218, 2018.&lt;/p&gt;
&lt;p&gt;Mathilde Caron, Ishan Misra, Julien Mairal, Priya Goyal, Piotr Bojanowski, and Armand Joulin. Unsupervised learning of visual features by contrasting cluster assignments. arXiv preprint arXiv:2006.09882, 2020.&lt;/p&gt;
&lt;p&gt;Hila Chefer, Shir Gur, and Lior Wolf. Transformer interpretability beyond attention visualization. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 782-791, 2021.&lt;/p&gt;
&lt;p&gt;Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey Hinton. A simple framework for contrastive learning of visual representations. arXiv preprint arXiv:2002.05709, 2020a.&lt;/p&gt;
&lt;p&gt;Xinlei Chen, Haoqi Fan, Ross Girshick, and Kaiming He. Improved baselines with momentum contrastive learning. arXiv preprint arXiv:2003.04297, 2020 b.&lt;/p&gt;
&lt;p&gt;Yun-Chun Chen, Yen-Yu Lin, Ming-Hsuan Yang, and Jia-Bin Huang. Show, match and segment: Joint weakly supervised learning of semantic matching and object co-segmentation. IEEE Transactions on Pattern Analysis and Machine Intelligence (PAMI), 2020c.&lt;/p&gt;
&lt;hr&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/axiomatic_explanations/</guid>
      <pubDate>Thu, 28 Mar 2024 05:58:39 +0100</pubDate>
    </item>
    
    <item>
      <title>Privacy Amplification by Decentralization</title>
      <link>http://localhost:1313/posts/privacy-amplification/</link>
      <description>&lt;h1 style=&#34;font-size: 36px;&#34;&gt;Privacy Amplification by Decentralization&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 24px;&#34;&gt;Author: Sarah ABBANA BENNANI &lt;/h1&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Introduction - the challenge of data privacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Theoretical Aspects on Differential Privacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;First Case: walk on a ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Generalisation: walk on a complete graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;Perspectives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;p&gt;This is a blogpost about the paper  Privacy Amplification by Decentralization, published by E. Cyffers et al. in 2022 and available &lt;a href=&#34;https://proceedings.mlr.press/v151/cyffers22a/cyffers22a.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;h1 style=&#34;font-size: 20px;&#34;&gt;Introduction - the challenge of data privacy&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;In recent years, the concept of privacy has gained significant attention due to the proliferation of data collection practices and the need to safeguard individuals&amp;rsquo; personal information. &lt;br&gt;
There has been a notable shift towards implementing regulations to govern the gathering of data from individuals, underscoring the pressing demand for privacy measures that are not only effective and robust against potential attacks but also transparent and firmly grounded in logic and mathematics.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A current way to define privacy in the context of data sharing is the promess of the dataholder (the person or entity managing the data) towards the users, that there will be no consequences (positive or negative) induced by their consent to sharing their data.&lt;/strong&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;em&gt;Let us take a small example to illustrate and to understand the underlying complexity of this notion: we consider an entity that desires to conduct a study on the correlation between smoking and cancer risks. &lt;br&gt;
Should a smoker participate, and the study concludes that smoking indeed increases the likelihood of cancer, the repercussions for the smoker could vary.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Some negative impacts: insurance premiums could increase&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Some positive impacts: motivation to quit smoking&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;We could therefore think that privacy in this case is broken for the participant, however there is a subtility which is one of the keys to capture the nuance between the privacy of an individiual and that of a group. In this case, crucially, we cannot say privacy is breached, as the participation of the smoker should not alter the study&amp;rsquo;s outcome, i.e. from a probabilistic standpoint, whether or not the individual participates in the study will not significantly change the likelihood of the conclusion of the study. &lt;br&gt;
Formally, and to introduce some probabilities, which we will delve into further later on:&lt;/em&gt;&lt;/p&gt;
&lt;h1 style=&#34;font-size: 13px;&#34;&gt;$\mathbb{P}(result=smoking\ bad | individual\ participates) \approx \mathbb{P}(result=smoking\ bad | individual\ does\ not\ participate) $&lt;/h1&gt;
&lt;br /&gt; 
&lt;p&gt;Privacy has become a real challenge for all parties, as &lt;strong&gt;it is necesssary to find a balance between the utility of the data and the privacy guarantees of the users&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For the dataholder, the aim is to retain the wealth of data to derive useful insights. They must be able to analyse enough of the data to learn about the population without revealing any individual-specific information.&lt;/li&gt;
&lt;li&gt;For the users, they must believe that their data will be protected and that they will not be hurt by giving them. This trust in the dataholder is important to incite the users to give their data.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt; 
&lt;p&gt;In this paper, the aim of the authors, E. Cyffers and A. Bellet, was to show some algorithms and methods that allow to improve the privacy-utility trade-offs and therefore reinforce privacy around the data, while keeping scalability.&lt;/p&gt;
&lt;p&gt;The proposed algorithms are based on &lt;strong&gt;full decentralization&lt;/strong&gt;, and &lt;strong&gt;newtork differential privacy (DP)&lt;/strong&gt;, two notions that we will explain right below.&lt;/p&gt;
&lt;br /&gt;
&lt;h1 id=&#34;section-2&#34;&gt;&lt;h1 style=&#34;font-size: 20px;&#34;&gt;Theoretical Aspects on Differential Privacy&lt;/h1&gt;&lt;/h1&gt;
&lt;h2 id=&#34;h1-stylefont-size-18pxmathematical-contexth1&#34;&gt;&lt;h1 style=&#34;font-size: 18px;&#34;&gt;Mathematical context&lt;/h1&gt;&lt;/h2&gt;
&lt;p&gt;We must introduce some key mathematical definitions to understand the problem we want to tackle.&lt;/p&gt;
&lt;h2 id=&#34;users-space&#34;&gt;Users space&lt;/h2&gt;
&lt;p&gt;We consider a set of $n$ users (e.g. a population responding to a survey), each holding a private dataset that we note $D_u$ (e.g. their answer to the questions of the survey).&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/users-space.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h2 id=&#34;neighboring-relation&#34;&gt;Neighboring relation&lt;/h2&gt;
&lt;p&gt;We write $D=D_1 \cup \cdots \cup D_n$ the union of all users datasets.&lt;/p&gt;
&lt;p&gt;We can define a &lt;strong&gt;neighboring relation&lt;/strong&gt; over these datasets, that we call user-level Differential Privacy: &lt;br&gt;
For two datasets $D$ and $D&amp;rsquo;$ of the same size, we denote by $D \sim_u D^{\prime}$ the fact that $D$ and $D&amp;rsquo;$ are neighbors, in the sense that they only differ on user $u$&amp;rsquo;s data.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For example, $D$ and $D&amp;rsquo;$ could be two datasets corresponding to the answers of a survey from 10 users. For nine of these users the answers are the same for the two datasets. But for one user $u$, the answers are different (e.g. in $D$ user $u$ smokes, in $D&amp;rsquo;$ he doesn&amp;rsquo;t smoke).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The inuition between this definition relatively to privacy is that compared to traditional differential privacy, which considers changes in individual data points, user-level DP provides stronger privacy guarantees. By hiding the influence of an entire user&amp;rsquo;s dataset, rather than just a single data point, it ensures that individual user contributions are not discernible, thus enhancing overall privacy protection.&lt;/p&gt;
&lt;h2 id=&#34;decentralization&#34;&gt;Decentralization&lt;/h2&gt;
&lt;p&gt;We will set ourselves in a fully decentralized system. In this configuration, each user only communicates with a small number of other users at each step, and there is no central coordinator processing all the data. The aim of this setting is to limit the concentration of sensitive information in one place, reducing the risk of data breaches and unauthorized access.&lt;/p&gt;
&lt;p&gt;The users and their communications are represented by a network (directed or undirected) graph $G = (V, E)$, where $V$ is the users ensemble defined above, and $E$ is the set of edges: $(u, v) \in E$ indicates that user $u$ can send messages to user $v$.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;In this case, a randomised decentralized algorithm is defined as a mapping that from a dataset, returns that transcript of all messages exchanges between the users over the network. In formal terms, $A: D \longmapsto {(u, m, v): u \text{ sent message with content } m \text{ to } v }$.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;The aim of decentralization in this representation, is to give users the fewer information possible, i.e. only the messages they are involved in, and not the full transcript $A(D)$.&lt;/p&gt;
&lt;p&gt;We introduce this view of a user $u$: $\mathcal{O}_u(\mathcal{A}(D))=\left(\left(v, m, v^{\prime}\right) \in \mathcal{A}(D): v=u \text { or } v^{\prime}=u\right)$&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;h1-stylefont-size-18pxdifferential-privacyh1&#34;&gt;&lt;h1 style=&#34;font-size: 18px;&#34;&gt;Differential Privacy&lt;/h1&gt;&lt;/h2&gt;
&lt;p&gt;We will take a step back on this representation to introduce in a more global way the mathematical notion of Differential Privacy (DP).&lt;/p&gt;
&lt;p&gt;Let us consider a randomised algorithm $M$. $M$ is said to be &amp;ldquo;$\alpha$-differentially private&amp;rdquo; if, for any event $A$:&lt;/p&gt;
&lt;p&gt;$$\mathbb{P}[M(D)\in A]\leq e^{\alpha} \cdot \mathbb{P}[M(D&amp;rsquo;)\in A]$$&lt;/p&gt;
&lt;p&gt;where $D$ and $D&amp;rsquo;$ are two datasets differing on a single element.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;To make this more intuitive, a randomized algorithm is an algorithm that employs a degree of randomness as part of its logic. The algorithm must treat the data so that the output is not overly depend on the data of any one individual.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider the event &amp;ldquo;Smoking is correlated to cancer&amp;rdquo;, and $D$ and $D&amp;rsquo;$ differing on the user $u$&amp;rsquo;s data, whether or not that individual that has cancer smokes or not.&lt;/p&gt;
&lt;p&gt;We can rewrite the definition as: $\frac{\mathbb{P}\left[M\left(D\right) \in A\right]}{\mathbb{P}\left[M\left(D&amp;rsquo;\right) \in A\right]} \leq e^{\alpha}$&lt;/p&gt;
&lt;p&gt;We can see that $\alpha$, the privacy factor, represents the lost of privacy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When $\alpha \rightarrow 0$: the two probabilities are equal, meaning that whether user $u$ participates or not to the survey, the result is the same, i.e. privacy is at its maximum, but the statistical utility is null.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When $\alpha \rightarrow+\infty$: there are no constraints on the probabilities and therefore no constraints on privacy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus it is the intermediate case for $\alpha$ that is the most interesting and that can allow a good trade-off between privacy and utility.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;network-differential-privacy&#34;&gt;Network Differential Privacy&lt;/h2&gt;
&lt;p&gt;In this paper, the definition used for Differential Privacy is a bit different, actually relaxed as the algorithm is decentralized.&lt;/p&gt;
&lt;p&gt;An algorithm $A$ is said to be $(\varepsilon, \delta)$-network Differentially Private if for all pairs of distinct user $u, v \in V$ and all pairs of neighboring datasets $D \sim_u D^{\prime}$, we have:&lt;/p&gt;
&lt;p&gt;$$ \mathbb{P}\left(\mathcal{O}_v(\mathcal{A}(D))\right) \leq e^{\varepsilon} \mathbb{P}\left(\mathcal{O}_v\left(\mathcal{A}\left(D^{\prime}\right)\right)\right)+\delta $$&lt;/p&gt;
&lt;p&gt;We can interpret this as the need that the information gathered by $v$ during the execution of $A$ must not depend too much on $u$&amp;rsquo;s data.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;Furthermore, the definition can be extended in the case of collusion between the users, i.e. if multiple individuals collaborate or conspire to exploit or manipulate a system or process for their collective benefit.&lt;/p&gt;
&lt;p&gt;An algorithm $A$ is $(c, \varepsilon, \delta)$-network DP if for each user $u$, all subsets $W \subset V$ such that $\left|W\right| \leq c$, and all pairs of neighboring datasets $D \sim_u D^{\prime}$, we have:&lt;/p&gt;
&lt;p&gt;$$ \mathbb{P}\left(\mathcal{O}_W(\mathcal{A}(D))\right) \leq e^{\varepsilon} \mathbb{P}\left(\mathcal{O}_W\left(\mathcal{A}\left(D^{\prime}\right)\right)\right)+\delta $$&lt;/p&gt;
&lt;p&gt;Here $\mathcal{O}_W$ represents the aggregated information of the collusion: $\mathcal{O}_W = \cup _{w \in W} \mathcal{O}_w$.&lt;/p&gt;
 &lt;br /&gt;
&lt;h2 id=&#34;decentralized-computation-model&#34;&gt;Decentralized computation model&lt;/h2&gt;
&lt;p&gt;The algorithms studied in this paper are meant to perform computations by using a token that will walk through the nodes of the network graph. The purpose of the token is to facilitate sequential updates across the nodes in the network. As it traverses through the nodes following the edges of the graph, it carries information and updates its states based on local computations performed at each node from the values obtainable from the corresponding user.&lt;/p&gt;
&lt;p&gt;If the token $\tau$ resides at some node $u$, it will be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Updated by: $\tau \leftarrow \tau+x_u^k, \quad$ with $x_u^k=g^k\left(\tau ; D_u\right)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sent to another user $v$ with $(u, v) \in E$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here, $x_u^k$ denotes the contribution of user $u$ to the computation. It depends both on the current value of $\tau$ and on the number of times $k$ that the token visited $u$ so far.&lt;/p&gt;
&lt;p&gt;This model of computation allows to optimize the combination of local costs within the network, which is useful for tasks like training machine learning models. The token holds the model&amp;rsquo;s parameters and is updated based on the local information at each point it visits. This decentralized approach can also be used to calculate summaries of data contributed by users, such as finding totals or averages.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;em&gt;The idea of the following parts is to study different graph achitectures and computation protocols, based on the formalization explained above, to achieve good utility-privacy trade-offs&lt;/em&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;h1 id=&#34;section-3&#34;&gt;&lt;h1 style=&#34;font-size: 20px;&#34;&gt;First case: walk on a ring&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;We consider here a graph architecture of a directed ring, i.e. $E = {(u, u+1)}_{u=1}^{n-1} \cup{(n, 1)}$, meaning that the token, starting from the first user, will travel around the ring multiple times, and more precisely go through every user $K$ times.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/walk-on-ring.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;This is a simple case that is meant to show how we can achieve suitable results without relying on a centralised agregator.&lt;/p&gt;
&lt;p&gt;We are going to explain how this architecture can perform for privacy guarantees on the task of &lt;em&gt;Real Summation&lt;/em&gt;, and then on &lt;em&gt;Discrete Histogram Computation&lt;/em&gt;.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;real-summation&#34;&gt;Real Summation&lt;/h2&gt;
&lt;p&gt;Each user will contribute a value during each round of the token&amp;rsquo;s journey. The task of &lt;em&gt;real summation&lt;/em&gt; aims to estimate the sum of all contributions made by users.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For example, we can imagine a scenario where users of a health monitoring app report their daily step counts. The app&amp;rsquo;s goal is to calculate the total number of steps taken by all users, without revealing individual step counts. Each user&amp;rsquo;s daily step count is considered a contribution, and the app needs to aggregate these contributions while preserving user privacy.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Indeed to preserve privacy in this case, a common method is to add random noise, an abstract perturbation mechanism, which usually consist in a standard Gaussian or Laplace deviation to the contribution. We won&amp;rsquo;t go into further details on the perturbation, but we assume that it satisfies traditional local differntial privacy (LDP).&lt;/p&gt;
&lt;p&gt;Furthermore, here the decentralized protocol proposes to add this noise only once every few hops of the token, and in fact every $n-1$ hops of the token as shown in the algorithm below:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/algo1.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;They prove the following theorem:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem:&lt;/strong&gt; Let $\varepsilon, \delta&amp;gt;0$. Algorithm 1 outputs an unbiased estimate of $\bar{x}$ with standard deviation $\sqrt{\left\lfloor \frac{Kn}{n - 1} \right\rfloor} \sigma_{\text{loc}}$, and is $\sqrt{2K \ln\left(\frac{1}{\delta&amp;rsquo;}\right)\varepsilon}$ $+ K\epsilon(e^\varepsilon - 1), K\delta + \delta&amp;rsquo;$-network DP for any $\delta&amp;rsquo; &amp;gt; 0$&lt;/p&gt;
&lt;p&gt;The Algorithm 1 proposed actually provides a gain on the error of $O\left(\frac{1}{\sqrt{n}}\right)$ compared to a LDP achieving the same privacy guarantees. This means it achieves a similar balance between privacy and utility as a centralized aggregator would, if they itratively aggregated user contributions then perturb the results before sending it to the users, buy here without the need for this centralized party.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;discrete-histogram-computation&#34;&gt;Discrete Histogram Computation&lt;/h2&gt;
&lt;p&gt;Here we focus on another task that is computing histograms over a discrete domain.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With the same example as above, it could be such as counting the frequency of steps in different ranges for a health monitoring app.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Traditional local differential privacy (LDP) methods use L-ary randomized response, where each user submits their true value with probability $1-\gamma$ and a random value with probability $\gamma$. However, in the decentralized approach with a ring network, they propose Algorithm 2. This algorithm randomizes each user&amp;rsquo;s contribution using L-ary randomized response before adding it to the token, which maintains a partial histogram representing the shuffled contributions, thus enhancing privacy through shuffling, as demonstrated in previous studies.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/algo2.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;As for the case of real summation, a theorem proves that to achieve the same privacy in LDP, it would need $\sqrt n$ times more random responses, and when achieving the same utility (meaning to fix $\gamma$), Algorithm 2 provides a gain of privacy of $O\left(\frac{1}{\sqrt{n}}\right)$.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;We see that decentralized computation over a ring enables comparable utility to a trusted aggregator by sequentially hiding previous users&amp;rsquo; contributions, without relying on a central server or requiring costly multi-party computation protocols.&lt;/p&gt;
&lt;p&gt;However this simple topology presents limitations including vulnerability to collusions, which compromises differential privacy guarantees, and inadequacy for extensions to gradient descent due to the lack of privacy amplification between users with fixed positions in the ring.&lt;/p&gt;
&lt;p&gt;This is why we shall now consider random walks over a complete graph.&lt;/p&gt;
&lt;br/&gt;
&lt;h1 id=&#34;section-4&#34;&gt;&lt;h1 style=&#34;font-size: 20px;&#34;&gt;Generalisation: walk on a complete graph&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;Random walk on a complete graph assumes the token is randommly sent to a user at each step. The walk consists of fixed-length random walks, ensuring that each user&amp;rsquo;s contributions are random, and their path is concealed, allowing only the messages sent and received to be known by a user.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;real-summation-1&#34;&gt;Real Summation&lt;/h2&gt;
&lt;p&gt;Algorithm 3 shows the protocol, naturally extended from the ring topology, where each user updates the token with its contribution and a perturbation. The secrecy of the path taken by the token and the aggregations of the contributions between two visits of the token guarantee the network DP property.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/algo3.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;Again, a theorem proves that asymptotically, network DP offers a privacy amplification of $O\left(\frac{1}{\sqrt{n}}\right)$ over LDP for the same conditions, which aligns with the privacy-utility trade-off of a trusted aggregtor.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;The same analysis can be done for the discrete histogram computation case.&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;stochastic-gradient-descent&#34;&gt;Stochastic Gradient Descent&lt;/h2&gt;
&lt;p&gt;In this section, we address the challenge of private convex optimization using stochastic gradient descent (SGD). We consider a convex set $(W \subseteq \mathbb{R}^d)$ and a collection of convex functions $(f(\cdot; D_1), \ldots, f(\cdot; D_n))$, each associated with a user, being L-Lipschitz and $(\beta)$-smooth over $(W)$. Our goal is to privately solve the optimization problem to find $(w^*)$ minimizing the average of these functions over $(W)$:&lt;/p&gt;
&lt;p&gt;$$w^* \in \arg \min_{w \in \mathcal{W}} \left( F(w):=\frac{1}{n} \sum_{u=1}^n f\left(w ; D_u\right) \right)$$&lt;/p&gt;
&lt;p&gt;This equation encapsulates various machine learning tasks, such as ridge and logistic regression, and others. This is significant because it addresses the need for private optimization in machine learning, ensuring that sensitive data remains protected while training models on distributed datasets.&lt;/p&gt;
&lt;p&gt;The algorithm below proposes a method to privately approximate $w^*$, where the token represents the current iterate. At each step, the user $u$ holding the token performs a projected noisy gradient step and sends the updated token to a random user. The variance in the Gaussian mechanism of line 4 is deduced from the Lipschitz property of the functions.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/algo4.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;A theorem based on the evolution of the privacy loss proves the differential privacy guarantees, and again the results are satisfactory. Compared to traditional local differential privacy methods, we obtain a privacy amplification of $O\left(\frac{\ln n}{\sqrt{n}}\right)$ for a specific number of iterations, with the same level of privacy-utility trade-off.&lt;/p&gt;
&lt;p&gt;With a fixed privacy budget and a large number of iteration, the expected error of this algorithm is smaller with this network DP than with LDP.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;Compared to the ring case, this random walk approach has better robustness to collusion, as colluding users can be treated as a single node with adjusted transition probabilities, leading to equivalent privacy guarantees as for non-colluding users.&lt;/p&gt;
&lt;br/&gt;
&lt;h1 id=&#34;section-5&#34;&gt;&lt;h1 style=&#34;font-size: 20px;&#34;&gt;Experiments&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;To show the efficiency of the privacy amplification methods explained in this article, some experiments have been made on the complete graph, first for the Real Summation task, and then for Machine Learning with Stochastic Gradient Descent (SGD).&lt;/p&gt;
&lt;p&gt;The code is available here: &lt;a href=&#34;https://github.com/totilas/privacy-amplification-by-decentralization/tree/main&#34;&gt;Github Link&lt;/a&gt;&lt;/h1&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;h2 id=&#34;real-summation-2&#34;&gt;Real Summation&lt;/h2&gt;
&lt;p&gt;We reproduced the first experiment from the paper, comparing th analytical bounds of LDP and NDP on the real summation task.&lt;/p&gt;
&lt;p&gt;To do so, we only need to run the &lt;em&gt;main_a.py&lt;/em&gt; and &lt;em&gt;main_b.py&lt;/em&gt; files with python from the &lt;em&gt;fig1&lt;/em&gt; folder to display the corresponding figures (a) and (b). It works, for instance, with Python version 3.8, with the prerequisite of having installed the packages &lt;em&gt;numpy&lt;/em&gt; and &lt;em&gt;matplotlib&lt;/em&gt;, only taking a few seconds to execute.&lt;/p&gt;
&lt;p&gt;It gives the following results:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/results1.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;As we may see from the theoretical bounds, privacy is amplified with network differential privacy over LDP when the numer of users $n$ is greater or equal to 20, with increaingly substancial improvements as $n$ grows.&lt;/p&gt;
&lt;p&gt;In practice by making some simulations, the gains are even more significant and even for a smaller number of users, as we see in figure (b).&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;machine-learning-with-sgd&#34;&gt;Machine Learning with SGD&lt;/h2&gt;
&lt;p&gt;For this second experiment, the task is to train a logistic regression model in this decentralized context.&lt;/p&gt;
&lt;p&gt;The setting of the experiment is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UCI Housing dataset (binarized version)&lt;/li&gt;
&lt;li&gt;Standardized features and normalized data point (to have unit L2 norm and Lipschitz property of the logistic loss)&lt;/li&gt;
&lt;li&gt;Train/test split of 80% uniformly at random&lt;/li&gt;
&lt;li&gt;Training set split between $n = 2000$ users (each user has a local dataset of size $8$)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The experiment compares three settings for Stochastic Gradient Descent with perturbation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Centralized DP-SGD, requiring a trusted curator&lt;/li&gt;
&lt;li&gt;Local DP-SGD, corresponding to Algorithm 4 with LDP method&lt;/li&gt;
&lt;li&gt;Network DP-SGD, corresponding to Algorithm 4 with Network DP method, the one of interest&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;p&gt;We must run the &lt;em&gt;main.py&lt;/em&gt; file of folder &lt;em&gt;fig2&lt;/em&gt; with Python to display the results.&lt;/p&gt;
&lt;p&gt;It is possible to use the command &lt;em&gt;python main.py &amp;ndash;help&lt;/em&gt; to show the list of parameters that can be tuned to modify the context of the experiment (the default ones are for $\varepsilon = 10$ and $\varepsilon = 1$):&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/options.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;I had some issues to run this program with my settings (same as for the first experiment).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;em&gt;typer&lt;/em&gt; module was missing therefore I had to install it : &lt;em&gt;pip install typer&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;_intercept_dot&lt;/em&gt; function from &lt;em&gt;sklearn.linear_model._logistic&lt;/em&gt; couldn&amp;rsquo;t be found either. By checking the &lt;em&gt;sklearn.linear_model.LogisticRegression&lt;/em&gt; (which is the public class corresponding to the import here), this function doesn&amp;rsquo;t appear. I wanted to change it with the &lt;em&gt;intercept_&lt;/em&gt; attribute but it didn&amp;rsquo;t fit either. Then by checking the usage of this function in the case, it seemed that it computes a dot product between the model parameters and the input data, taking into account whether an intercept term is included. Therefore I tried to manually code this functionality but unfortunately it didn&amp;rsquo;t give coherent results compared to the paper.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the original results from the paper:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Sarah_Abbana/results2.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;Here, although the number of contributions per user doesn&amp;rsquo;t align with the optimal regime for network DP, the observed privacy amplification surpasses theoretical expectations. By numerically determining the minimum noise level required for theoretical proofs, they demonstrated that Network DP-SGD achieves a privacy-utility trade-off comparable to Centralized DP-SGD across various privacy levels, showcasing significant privacy amplification benefits over Local DP-SGD, especially in scenarios with fewer iterations than typically recommended.&lt;/p&gt;
&lt;br/&gt;
&lt;h1 id=&#34;section-6&#34;&gt;&lt;h1 style=&#34;font-size: 20px;&#34;&gt;Perspectives&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;The work presented suggests numerous avenues for exploration. Generalizations to diverse graph structures, incorporating dynamic topologies to reinforce resilience against collusion, and investigating decentralized models beyond our current scope are key directions. Exploring the potential of multiple tokens traversing the graph simultaneously and delving into randomized gossip algorithms offer promising avenues for advancing privacy-preserving techniques. Finally, probing the theoretical limits of network DP and exploring scenarios where users trust nearby peers more could provide insights into refining privacy mechanisms.&lt;/p&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/privacy-amplification/</guid>
      <pubDate>Wed, 27 Mar 2024 12:05:50 +0100</pubDate>
    </item>
    
    <item>
      <title>Robust or Fair</title>
      <link>http://localhost:1313/posts/robust-or-fair/</link>
      <description>&lt;h1 style=&#34;font-size: 36px;&#34;&gt;To be Robust or to be Fair: Towards Fairness in Adversarial Training&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 24px;&#34;&gt;Authors: Maryem Hajji &amp; Cément Teulier&lt;/h1&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0&#34;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Initial Analysis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-2.1&#34;&gt;Previous Studies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2.2&#34;&gt;Theoretical Demonstration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Model&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-3.1&#34;&gt;Fairness Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3.2&#34;&gt;Practical Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Experimentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-0&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This blog post retraces the study conducted in the &lt;a href=&#34;http://proceedings.mlr.press/v139/xu21b.html&#34;&gt;paper&lt;/a&gt; &amp;ldquo;To be Robust or to be Fair: Towards Fairness in Adversarial Training&amp;rdquo; and written by Han Xu, Xiaorui Liu, Yaxin Li, Yaxin Li, Anil K. Jain and Jiliang Tang.&lt;/p&gt;
&lt;p&gt;Their study is based on a simple observation: while adversarial training has been shown to improve model&amp;rsquo;s robustness, it also introduces several performances disparities among different data groups.&lt;/p&gt;
&lt;p&gt;To address this issue, the authors present the Fair-Robust-Learning (FRL) framework that aims to reduce such unfairness.&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Nowadays, Machine Learning algorithms and Artificial Intelligence are becoming more and more omnipresent in all kinds of jobs. If many of these models are developed to replace human tasks, it is of key importance that they do not reproduce the same mistakes. In fact, human decision making can sometimes be considered &amp;ldquo;unfair&amp;rdquo;, a trait that must not be present in Machine Learning. But as we push our models to be as precise as possible, one question stands out: can we find the good balance between accuracy and equity ?&lt;/p&gt;
&lt;p&gt;Diving into this topic, we focus our study on adversarial training algorithms.
Indeed, it has been shown that there is a significant issue in adversarial training for deep neural networks: while such training boosts the model&amp;rsquo;s defenses against adversarial attacks, it unfortunately leads to significant differences in how well the model performs across various types of data.
For instance, detailed observations on CIFAR-10 dataset show a non-negligeable difference in the model&amp;rsquo;s performance between &amp;ldquo;car&amp;rdquo; and &amp;ldquo;cat&amp;rdquo; classes (details of this example in our section 1.1).&lt;/p&gt;
&lt;p&gt;This phenomenon raises concern on concrete topics like the safety of autonomous driving vehicules or facial recognition while also creating ethical problems by discriminating certain classes.
To put a word on it, the authors have identified this issue as the &lt;strong&gt;robust-fairness&lt;/strong&gt; problem of adversarial training.&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;1. Initial Analysis&lt;/h2&gt;
&lt;p&gt;We recall here the previous studies conducted by the authors that allowed them to identify the existence of the robust-fairness problem.&lt;/p&gt;
&lt;h2 id=&#34;section-2.1&#34;&gt;1.1 Previous Studies&lt;/h2&gt;
&lt;p&gt;For their first analysis, the authors have decided to study algorithms like the PGD ( Projected Gradient Descent) adversarial training and TRADES ( Theoretically Principled Trade-off between Robustness and Accuracy for Deep Learning ) on the CIFAR-10 dataset.
The investigation is made using a PreAct-ResNet18 model structure under specific adversarial attack constraints.
The results they obtained are as follows:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Hajji_Teulier/cat_car.png&#34;
  alt=&#34;Paper Initial Results&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;As we can see, natural training maintains a consistent standard error across classes and a consistent robust error rate when faced with 8/255 PGD attacks. However, in the case of adversarial training, some huge disparities appear. Going back to our introduction&amp;rsquo;s example with &amp;ldquo;cats&amp;rdquo; and &amp;ldquo;cars&amp;rdquo;, we observe that the standard and robust errors for &amp;ldquo;car&amp;rdquo; class ( respectively 6% and 34% ) are significantly lower than those of the &amp;ldquo;cat&amp;rdquo; class ( respectively 33% and 82% ). The results on the TRADES, altough not depicted here, also show some great disparities between certain classes.&lt;/p&gt;
&lt;p&gt;To support this graphical study, the authors also present statistical evidence of this phenomenom throughout metrics like the Standard Deviation (SD) or the Normalized SD (NSD) of class-wide error. Once again, these metrics reveal that adversarial training indeed results in greater disparities across classes in both standard and robust performance compared to natural training.&lt;/p&gt;
&lt;h3 id=&#34;potential-causes&#34;&gt;Potential Causes&lt;/h3&gt;
&lt;p&gt;While the authors succeeded in identifying the problem of fairness, they also aimed to understand where it was coming from. From what they observed, it seems that the fairness issue particularly disadvantages classes that are inherently more challenging to classify. Adversarial training in fact tends to increase the standard errors for &amp;ldquo;harder&amp;rdquo; classes (like &amp;ldquo;cat&amp;rdquo;) significantly more than for &amp;ldquo;easier&amp;rdquo; classes (such as &amp;ldquo;car&amp;rdquo;).&lt;/p&gt;
&lt;h2 id=&#34;section-2.2&#34;&gt;1.2 Theoretical Demonstration&lt;/h2&gt;
&lt;p&gt;From the experiments on the potential causes of the fairness issue, the authors made the following hypotetis: Adversarial training makes hard classes even harder to classify or classify robustly.
In this section, we review the theoretical proof of this hypothesis.&lt;/p&gt;
&lt;p&gt;For this analysis, we place ourselves in the case of a binary classification task, using a mixed Gaussian distribution to create two classes with distinct levels of classification difficulty. Thus, adversarial training does not notably lower the average standard error but it shifts the decision boundary in a way that favours the &amp;rsquo;easier&amp;rsquo; class at the expense of the &amp;lsquo;harder&amp;rsquo; class.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;classification model&lt;/strong&gt;, denoted $f$, is a mapping  $f : \mathcal{X} \rightarrow \mathcal{Y}$ from input data space $\mathcal{X}$ and output labels $\mathcal{Y}$ defined as $f(x) = \text{sign}(\mathbf{w} \cdot \mathbf{x} + b)$ with parameters $\mathbf{w}$ and $b$&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;standard error&lt;/strong&gt; for a classifier $f$ generally is: $R_{\text{nat}}(f) = \Pr(f(\mathbf{x}) \neq y)$&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;robust error&lt;/strong&gt; for a classifier $f$ generally is: $R_{\text{rob}}(f) = \Pr(\exists \delta, |\delta| \leq \epsilon, \text{s.t. } f(\mathbf{x} + \delta) \neq y)$ (the probability of a perturbation existing that would cause the model to produce an incorrect prediction)&lt;/li&gt;
&lt;li&gt;The standard error &lt;strong&gt;conditional&lt;/strong&gt; on a specific class $\{Y = y\}$ is represented by $R_{\text{nat}}(f; y)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;theoretical-experiment&#34;&gt;Theoretical Experiment&lt;/h3&gt;
&lt;p&gt;We generate a simple example of the binary classification task that we presented at the beginning of section 1.2.
The data therefore comes from two classes $\mathcal{Y} = { \{-1, +1\}}$, with each class&amp;rsquo; data following a Gaussian distribution $\mathcal{D}$ centered on $-\theta$ and $\theta$ respectively.
It is important to specify that there is a $K$-factor difference between the variance of the two classes defined as follows: $\sigma_{+1} : \sigma_{-1} = K : 1$ and $K &amp;gt; 1$.&lt;/p&gt;
&lt;p&gt;The authors then use the theorem stating that:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem:&lt;/strong&gt; In the case of a data distribution $D$ like the one above, the optimal linear classifier $f_{\text{nat}}$ which minimizes the average standard classification error is:
$$ f_{\text{nat}} = \arg\min_f \Pr(f(\mathbf{x}) \neq y) $$.&lt;/p&gt;
&lt;p&gt;With that theorem and after computations, the authors prove that the class &amp;ldquo;$+1$&amp;rdquo; as a larger standard error than the class &amp;ldquo;$-1$&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Overall, this result shows well that the class &amp;ldquo;$+1$&amp;rdquo;, characterized by a larger variance, tends to be more challenging to classify than the class&amp;quot;$-1$&amp;quot;; a result confirming the hypothesis initially made.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;2. Model&lt;/h2&gt;
&lt;p&gt;In this section, we present the Fair Robust Learning model (FRL).&lt;/p&gt;
&lt;h2 id=&#34;section-3.1&#34;&gt;2.1 Fairness Requirements&lt;/h2&gt;
&lt;p&gt;The authors introduced the concepts of Equalized Accuracy and Equalized Robustness, emphasizing the importance of providing equal prediction quality and resilience against adversarial attacks across different groups.
To achieve this balance, the authors propose a Fair Robust Learning (FRL) strategy.
This framework addresses fairness issues in adversarial training by aiming to minimize overall robust error while ensuring fairness constraints are met. They separate robust error into standard error and boundary error, allowing independent  solving of the unfairness of both errors. [ref 7]&lt;/p&gt;
&lt;p&gt;The training objective thus becomes minimizing the sum of standard error and boundary error while adhering to fairness constraints that ensure no significant disparities in error rates among classes. Techniques from prior research are leveraged to optimize boundary errors during training.&lt;/p&gt;
&lt;h2 id=&#34;section-3.2&#34;&gt;2.2 Practical Algorithms&lt;/h2&gt;
&lt;p&gt;This section explores effective methods to implement and address the challenges outlined in the training objective, such as the Reweight strategy.
In order to implement it, Lagrange multipliers are introduced, denoted as $φ = (φ_{nat}^{\text{i}}, φ_{bndy}^{\text{i}})$ where each multiplier corresponds to a fairness constraint. These multipliers are non-negative and play a crucial role in the optimization process.&lt;/p&gt;
&lt;p&gt;The approach involves forming a Lagrangian, represented by the function $L(f, φ)$, which combines the standard error ($R_{\text{nat}}(f)$) and boundary error ($R_{\text{bndy}}(f)$) terms along with the fairness constraints. The Lagrangian acts as a guide for the optimization process, helping to balance the trade-off between minimizing errors and satisfying fairness requirements.&lt;/p&gt;
&lt;p&gt;$$
\scriptsize{
L(f, \phi) = R_{\text{nat}}(f) + R_{\text{bndy}}(f) + \sum_{i=1}^{Y} \phi_{\text{nat}}^i \left( R_{\text{nat}}(f, i) - R_{\text{nat}}(f) - \tau_1 \right)^+ + \sum_{i=1}^{Y} \phi_{\text{bndy}}^i \left( R_{\text{bndy}}(f, i) - R_{\text{bndy}}(f) - \tau_2 \right)^+
}
$$&lt;/p&gt;
&lt;p&gt;The optimization problem is then framed as a max-min game between the classifier $f$ and the Lagrange multipliers $φ$. The objective is to maximize the fairness constraints while minimizing the Lagrangian function, which encapsulates both standard and boundary errors.&lt;/p&gt;
&lt;p&gt;On the other hand, the Reweight strategy presents a limitation particularly in mitigating boundary errors for specific classes. While upweighting the cost for standard errors ($R_{\text{nat}}(f, i)$) can penalize large errors and improve performance for disadvantaged groups, solely upweighting the boundary error ($R_{\text{bndy}}(f, i)$) for a class doesn&amp;rsquo;t effectively reduce its boundary error.&lt;/p&gt;
&lt;p&gt;To overcome this challenge, the Remargin strategy introduces an alternative approach by enlarging the perturbation margin ($\epsilon$) during adversarial training. This strategy is inspired by previous research showing that increasing the margin during adversarial training can enhance a model&amp;rsquo;s robustness against attacks under the current intensity.[ref 8]&lt;/p&gt;
&lt;p&gt;Specifically, the Remargin strategy involves adjusting the adversarial margin for generating adversarial examples during training, focusing on specific classes where boundary errors are significant. This adjustment aims to improve the robustness of these classes and reduce their large boundary errors ($R_{\text{bndy}}(f, i)$).&lt;/p&gt;
&lt;h2 id=&#34;section-4&#34;&gt;3. Experimentation&lt;/h2&gt;
&lt;p&gt;In this section, we reproduce the experimental methodology and setup used to evaluate the effectiveness of the proposed Fair Robust Learning (FRL) framework in constructing robust deep neural network (DNN) models.&lt;/p&gt;
&lt;p&gt;Firstly, we train a fairly simple model on the Fashion MNIST dataset, then we test out torchattack&amp;rsquo;s PGD on our naturally trained model, Then we will adversarially train the same architecture to see if we can identify this unfairness.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Hajji_Teulier/result1.png&#34;
  alt=&#34;Paper Initial Results&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;As we can see above, the naturally trained model has low standard error, but high PGD error. The adversarially trained model, in contrast, has a much lower PGD error, but higher standard error, and higher disparity between the classes.&lt;/p&gt;
&lt;p&gt;Second, we implement the FRL algorithm (Reweight strategy) which formulates the learning problem as a cost-sensitive classification that penalizes those classes which violate fairness. Essentially, we create multipliers that up or down weight the loss of classes based on how fair or unfair they are with respect to the average across all classes.&lt;/p&gt;
&lt;p&gt;The following is the FRL Algorithm outlined in the paper:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;./images/Hajji_Teulier/algo1.png&#34; alt=&#34;Paper Initial Results&#34; width=&#34;400&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;We made a setup to run the process 3 times: once with equal alpha values, once with an alpha ratio that favors the natural error, and one with an alpha ratio that favors the boundary error.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Hajji_Teulier/result2.png&#34;
  alt=&#34;Paper Initial Results&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;In accordance with the authors of the paper, we find that the alpha ratio that favors the natural error is successful in preventing the unfairness of the standard error in the model, and does help somewhat with the unfairness of the PGD error. On the other hand, we notice that the algorithm struggles to improve the worst-case boundary error, leading to disparities in robustness performance across different classes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, the studied article discusses the development and implementation of Fair Robust Learning (FRL) strategies to address fairness concerns in adversarial training of deep neural networks. The objective of these strategies is to achieve both equalized accuracy and robustness across different classes.&lt;/p&gt;
&lt;p&gt;The Reweight strategy aims to minimize overall robust error while adhering to fairness constraints by adjusting training weights based on class-wise errors while the Remargin strategy enlarges the perturbation margin during adversarial training to improve robustness and reduce boundary errors.&lt;/p&gt;
&lt;p&gt;Finally, The FRL framework combines these strategies to mitigate fairness issues and improve model performance across various classes. These approaches represent promising steps towards achieving fairness in robust deep learning models.&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;[1]  Han Xu, Xiaorui Liu, Yaxin Li, Anil K. Jain, Jiliang Tang1. To be Robust or to be Fair: Towards Fairness in Adversarial Training. 2021.&lt;/p&gt;
&lt;p&gt;[2] Goodfellow, I. J., Shlens, J., and Szegedy, C. Explaining and harnessing adversarial examples. 2014.&lt;/p&gt;
&lt;p&gt;[3]  Morgulis, N., Kreines, A., Mendelowitz, S., and Weisglass, Y. Fooling a real car with adversarial traffic signs. 2019.&lt;/p&gt;
&lt;p&gt;[4]  Sharif, M., Bhagavatula, S., Bauer, L., and Reiter, M. K. Accessorize to a crime: Real and stealthy attacks on state of-the-art face recognition. In Proceedings of the 2016 acm sigsac conference on computer and communications security, pp. 1528–1540, 2016.&lt;/p&gt;
&lt;p&gt;[5] Krizhevsky, A., Hinton, G., et al. Learning multiple layers of features from tiny images. 2009.&lt;/p&gt;
&lt;p&gt;[6] He, H. and Garcia, E. A. Learning from imbalanced data. IEEE Transactions on knowledge and data engineering, 21(9):1263–1284. 2009.&lt;/p&gt;
&lt;p&gt;[7] Zhang, H., Yu, Y., Jiao, J., Xing, E. P., Ghaoui, L. E., and Jordan, M. I. Theoretically principled trade-off between robustness and accuracy. 2019.&lt;/p&gt;
&lt;p&gt;[8] Tramer, F., Behrmann, J., Carlini, N., Papernot, N., and Ja- ` cobsen, J.-H. Fundamental tradeoffs between invariance and sensitivity to adversarial perturbations. In International Conference on Machine Learning, pp. 9561–9571. PMLR. 2020.&lt;/p&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/robust-or-fair/</guid>
      <pubDate>Wed, 27 Mar 2024 11:37:03 +0100</pubDate>
    </item>
    
    <item>
      <title>XCM, an explainable CNN for MTS classficiation</title>
      <link>http://localhost:1313/posts/xcm/</link>
      <description>&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;h1 style=&#34;font-size: 36px;&#34;&gt;XCM: An Explainable Convolutional Neural Network for Multivariate Time Series Classification&lt;/h1&gt;
&lt;h3 style=&#34;font-size: 24px;&#34;&gt;Authors : Nicolas SAINT &amp; Matthis Guérin&lt;/h3&gt;
&lt;h4 style=&#34;font-size: 22px;&#34;&gt;Table of Contents
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-introduction&#34;&gt;1. Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-related-work&#34;&gt;2. Related Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-xcm&#34;&gt;3. XCM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-evaluation&#34;&gt;4. Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-results&#34;&gt;5. Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-implementation&#34;&gt;6. Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-conclusion&#34;&gt;7. Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#appendix&#34;&gt;Appendix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a blog post about the article &amp;ldquo;XCM: An Explainable Convolutional Neural Network for Multivariate Time Series Classification&amp;rdquo; published by Kevin Fauvel et al. in 2021 and available &lt;a href=&#34;https://www.mdpi.com/2227-7390/9/23/3137&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h3&gt;
&lt;p&gt;The classification of multivariate time series (MTS) has emerged as an increasingly important research area over the last decade, driven by the exponential growth of temporal data across various domains such as finance, healthcare, mobility, and natural disaster prediction . A time series is a sequence of real values ordered in time, and when a set of co-evolving series is recorded simultaneously by a set of sensors, it is referred to as an MTS. MTS classification, which involves learning the relationship between an MTS and its label, presents a significant challenge due to the inherent complexity of the multivariate and temporal nature of the data.&lt;/p&gt;
&lt;p&gt;Traditional approaches to MTS classification, while effective on large datasets, encounter significant limitations such as poor generalization on small datasets and a lack of explainability, which can limit their adoption in sensitive applications where understanding the model&amp;rsquo;s decisions is crucial . For example, the European GDPR regulation highlights the importance of providing meaningful explanations for automated decisions, emphasizing the need for approaches capable of reconciling performance and explainability .&lt;/p&gt;
&lt;h3 id=&#34;2-related-work&#34;&gt;2. Related Work&lt;/h3&gt;
&lt;p&gt;The existing literature on MTS classification can be broadly grouped into three main categories: similarity-based methods, feature-based methods, and deep learning approaches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Similarity-based methods&lt;/strong&gt;: These methods utilize similarity measures to compare two MTS. Dynamic Time Warping (DTW) combined with the nearest neighbor rule (k-NN) has shown impressive performance, although it is not without limitations, particularly in terms of computational cost and the absence of an explicit feature representation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feature-based methods&lt;/strong&gt;: Approaches such as shapelets and Bag-of-Words (BoW) models transform time series into a more manageable feature space. WEASEL+MUSE, for instance, uses a symbolic Fourier approximation to create a BoW representation of MTS, enabling efficient classification using logistic regression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deep learning approaches&lt;/strong&gt;: The advent of Convolutional Neural Networks (CNNs) and Long Short-Term Memory (LSTM) networks has opened new avenues for MTS classification, thanks to their ability to automatically learn complex data representations. MLSTM-FCN, combining LSTM and CNN, has been identified as one of the top-performing models, despite its complexity and difficulty in providing explanations for its decisions.&lt;/p&gt;
&lt;p&gt;Explainability of MTS classification models has become a major concern, particularly for critical applications. Post-hoc methods, such as LIME and SHAP, offer ways to generate explanations for black-box models, but these explanations may lack fidelity to the model&amp;rsquo;s internal workings. This underscores the need for approaches that inherently integrate explainability into the model design.&lt;/p&gt;
&lt;p&gt;In this context, our work presents XCM, an innovative convolutional neural network architecture for MTS classification, that not only outperforms existing approaches in terms of performance but also provides reliable and intuitive explanations for its predictions, directly addressing the challenges of performance and explainability in MTS classification. This approach is grounded on the foundational work presented in the paper &amp;ldquo;XCM: An Explainable Convolutional Neural Network for Multivariate Time Series Classification&amp;rdquo;, which offers a novel solution to the pressing needs in the domain of MTS classification.&lt;/p&gt;
&lt;h3 id=&#34;3-xcm&#34;&gt;3. XCM&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XCM&amp;rsquo;s architecture is specifically designed to efficiently address the challenge of multivariate time series (MTS) classification by simultaneously extracting relevant information about observed variables and time directly from the input data. This unique approach allows XCM to capture the complexity and inherent interactions within MTS, thereby enhancing its generalization capability across different datasets and its applicability in various application contexts.&lt;/p&gt;
&lt;p&gt;To achieve this, XCM employs a combination of parallel 2D and 1D convolution filters. The 2D filters focus on extracting features related to observed variables at each time instant, while the 1D filters capture temporal dynamics across all variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2D Convolution Formula for Observed Variables&lt;/strong&gt;: $$A^{(k)} = f(W^{(k)} * X + b^{(k)})$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$A^{(k)}$: représente la carte des caractéristiques activées pour le k-ème filtre.&lt;/li&gt;
&lt;li&gt;$f$: denotes the activation function, often ReLU, to introduce non-linearity.&lt;/li&gt;
&lt;li&gt;$W^{(k)}$, $b^{(k)}$: weights and bias of the $k$-th 2D convolution filter.&lt;/li&gt;
&lt;li&gt;$X$: the input MTS data.&lt;/li&gt;
&lt;li&gt;$*$: the convolution operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By extracting features in this manner, XCM is able to detect complex patterns in MTS that are crucial for precise series classification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1D Convolution Formula for Temporal Information&lt;/strong&gt;: $$M^{(k)} = f(W^{(k)} \circledast X + b^{(k)})$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$M^{(k)}$: the activated feature map resulting from 1D filters.&lt;/li&gt;
&lt;li&gt;$\circledast$: the 1D convolution operation focusing on the temporal dimension.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This dual convolution approach enables XCM to maintain high accuracy while offering a better understanding of the contributions of different variables and temporal dynamics to the final decision.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Saint_Guerin/Architecture_XCM.png&#34;
  alt=&#34;alt text&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explainability&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of the hallmark features of the XCM architecture is its inherent capability to provide explainable predictions, leveraging the Gradient-weighted Class Activation Mapping (Grad-CAM) technique. Grad-CAM produces heatmaps that highlight the regions of the input data that most significantly contribute to a specific class prediction. This feature is crucial for applications where understanding the model&amp;rsquo;s reasoning is as important as the prediction accuracy itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grad-CAM Calculation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Grad-CAM utilizes the gradients of any target concept, flowing into the final convolutional layer to produce a coarse localization map highlighting the important regions in the input for predicting the concept. This method allows the visualization of which parts of the input are considered important by the CNN for classification tasks.&lt;/p&gt;
&lt;p&gt;The calculation involves the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feature Map Extraction&lt;/strong&gt;: Firstly, the feature maps $A^{(k)}$ are extracted from the last convolutional layer. These feature maps are essentially the output of the convolution operations and contain the spatial information that the network has learned to identify.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gradient Calculation&lt;/strong&gt;: The gradients of the score for class $c$, denoted as $y^c$
, with respect to the feature map activations $A^{(k)}$ of a convolutional layer, are computed. These gradients are pooled across the width and height dimensions (indexed by $i$ and $j$) to obtain the neuron importance weights $\alpha_k^c$.&lt;/p&gt;
&lt;p&gt;The weights for the feature map activations are computed as follows:&lt;/p&gt;
&lt;p&gt;$$\alpha_k^c = \frac{1}{Z} \sum_i \sum_j \frac{\partial y^c}{\partial A_{ij}^{(k)}}$$ where $Z$ is the number of pixels in the feature map, and $y^c$ is the score for class $c$, before the softmax layer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weighted Combination of Feature Maps&lt;/strong&gt;: The weighted combination of feature maps, followed by a ReLU, gives the Grad-CAM heatmap $L_{\text{Grad-CAM}}^c$ :
$$L_{\text{Grad-CAM}}^c = \text{ReLU}\left(\sum_k \alpha_k^c A^{(k)}\right)$$&lt;/p&gt;
&lt;p&gt;This equation combines the feature maps of the last convolutional layer of the network with the neuron importance weights to produce a heatmap for each class. The ReLU function is applied to the linear combination of maps to only consider the features that have a positive influence on the class of interest, effectively highlighting the regions of the input that are important for predicting class $c$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This process elucidates how certain input features contribute to the model&amp;rsquo;s predictions, offering a layer of transparency that can aid in the validation and trust-building of machine learning models in critical applications. The ability to generate such visual explanations not only helps in understanding the model&amp;rsquo;s behavior but also in identifying potential biases or errors in the learning process.&lt;/p&gt;
&lt;p&gt;In summary, the explainability aspect of XCM, powered by Grad-CAM, stands out as a significant advancement in making deep learning models more interpretable and trustworthy, especially in domains where decision-making processes need to be transparent and justifiable.&lt;/p&gt;
&lt;h3 id=&#34;4-evaluation&#34;&gt;4. Evaluation&lt;/h3&gt;
&lt;p&gt;The evaluation of the XCM model focuses on its performance across various datasets from the UEA multivariate time series classification archive. The datasets are diverse, spanning different types such as motion, ECG, HAR (Human Activity Recognition), AS (Audio Spectra), and EEG/MEG (Electroencephalogram/Magnetoencephalogram), with varying lengths, dimensions, and number of classes. This diversity presents a rigorous challenge and a comprehensive platform to assess the capabilities of XCM.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an exemple of datasets table used ine the paper:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table: Datasets Overview from UEA Archive&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Datasets&lt;/th&gt;
          &lt;th&gt;Type&lt;/th&gt;
          &lt;th&gt;Train&lt;/th&gt;
          &lt;th&gt;Test&lt;/th&gt;
          &lt;th&gt;Length&lt;/th&gt;
          &lt;th&gt;Dimensions&lt;/th&gt;
          &lt;th&gt;Classes&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Articulary Word Recognition&lt;/td&gt;
          &lt;td&gt;Motion&lt;/td&gt;
          &lt;td&gt;275&lt;/td&gt;
          &lt;td&gt;300&lt;/td&gt;
          &lt;td&gt;144&lt;/td&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;25&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Atrial Fibrillation&lt;/td&gt;
          &lt;td&gt;ECG&lt;/td&gt;
          &lt;td&gt;15&lt;/td&gt;
          &lt;td&gt;15&lt;/td&gt;
          &lt;td&gt;640&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Basic Motions&lt;/td&gt;
          &lt;td&gt;HAR&lt;/td&gt;
          &lt;td&gt;40&lt;/td&gt;
          &lt;td&gt;40&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Character Trajectories&lt;/td&gt;
          &lt;td&gt;Motion&lt;/td&gt;
          &lt;td&gt;1422&lt;/td&gt;
          &lt;td&gt;1436&lt;/td&gt;
          &lt;td&gt;182&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Cricket&lt;/td&gt;
          &lt;td&gt;HAR&lt;/td&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;72&lt;/td&gt;
          &lt;td&gt;1197&lt;/td&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;12&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Duck Duck Geese&lt;/td&gt;
          &lt;td&gt;AS&lt;/td&gt;
          &lt;td&gt;60&lt;/td&gt;
          &lt;td&gt;40&lt;/td&gt;
          &lt;td&gt;270&lt;/td&gt;
          &lt;td&gt;1345&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Eigen Worms&lt;/td&gt;
          &lt;td&gt;Motion&lt;/td&gt;
          &lt;td&gt;128&lt;/td&gt;
          &lt;td&gt;131&lt;/td&gt;
          &lt;td&gt;17984&lt;/td&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Epilepsy&lt;/td&gt;
          &lt;td&gt;HAR&lt;/td&gt;
          &lt;td&gt;137&lt;/td&gt;
          &lt;td&gt;138&lt;/td&gt;
          &lt;td&gt;206&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Ering&lt;/td&gt;
          &lt;td&gt;HAR&lt;/td&gt;
          &lt;td&gt;30&lt;/td&gt;
          &lt;td&gt;30&lt;/td&gt;
          &lt;td&gt;65&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Ethanol Concentration&lt;/td&gt;
          &lt;td&gt;Other&lt;/td&gt;
          &lt;td&gt;261&lt;/td&gt;
          &lt;td&gt;263&lt;/td&gt;
          &lt;td&gt;1751&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Face Detection&lt;/td&gt;
          &lt;td&gt;EEG/MEG&lt;/td&gt;
          &lt;td&gt;5890&lt;/td&gt;
          &lt;td&gt;3524&lt;/td&gt;
          &lt;td&gt;62&lt;/td&gt;
          &lt;td&gt;144&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Finger Movements&lt;/td&gt;
          &lt;td&gt;EEG/MEG&lt;/td&gt;
          &lt;td&gt;316&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;50&lt;/td&gt;
          &lt;td&gt;28&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Interpretation and Results:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each dataset presents unique challenges for MTS classification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Articulary Word Recognition&lt;/strong&gt;: With a substantial number of classes (25), the model must discern between intricate motion patterns. A high accuracy score here would indicate XCM&amp;rsquo;s ability to manage high-dimensional, complex pattern recognition tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Atrial Fibrillation&lt;/strong&gt;: Given the high length of the time series (640) and fewer instances for training and testing, the model&amp;rsquo;s performance can signal its efficiency in overfitting prevention and extracting meaningful information from lengthy sequences with minimal data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basic Motions&lt;/strong&gt;: A dataset like this with a shorter length and moderate dimensionality can showcase XCM&amp;rsquo;s quick learning capability for simple temporal patterns and basic human activities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Character Trajectories&lt;/strong&gt;: This dataset, with a large training set and many classes, is an excellent test of XCM&amp;rsquo;s scalability and classification robustness in handling motion data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cricket&lt;/strong&gt;: Long sequences (1197) and a fair number of classes (12) make this dataset suited for evaluating XCM&amp;rsquo;s temporal pattern learning and generalization over longer periods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Duck Duck Geese&lt;/strong&gt;: An Audio Spectrum dataset with a high dimensionality challenges the model to process and classify complex audio patterns, testing XCM&amp;rsquo;s ability in handling non-motion data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eigen Worms&lt;/strong&gt;: With the longest sequences in the given datasets (17,984), XCM&amp;rsquo;s performance can be interpreted as its capability in modeling highly intricate temporal behaviors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Epilepsy&lt;/strong&gt;: Human activity recognition data like this one requires the model to be sensitive to subtle variations, a good indicator of XCM&amp;rsquo;s precision in critical classification scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ering&lt;/strong&gt;: Small datasets with higher class counts test the model&amp;rsquo;s overfitting resilience and classification dexterity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ethanol Concentration&lt;/strong&gt;: An &amp;lsquo;Other&amp;rsquo; type dataset with long sequences will challenge any classifier&amp;rsquo;s ability to handle diverse, non-standard data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Face Detection&lt;/strong&gt;: This EEG/MEG dataset has a significant number of instances for both training and testing, focusing on XCM&amp;rsquo;s performance in biometric pattern recognition scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Finger Movements&lt;/strong&gt;: Another EEG/MEG dataset, but with shorter sequences and fewer dimensions, this can highlight how well XCM captures rapid, subtle changes in electrical activity related to movements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hyperparameters and Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the evaluation of XCM, a systematic approach was taken to optimize hyperparameters for each dataset. A grid search was employed, where the hyperparameters were fine-tuned to achieve the best average accuracy. This process was underpinned by a stratified 5-fold cross-validation on the training set, ensuring a robust estimation of the model&amp;rsquo;s performance.&lt;/p&gt;
&lt;p&gt;To benchmark against other classifiers, the primary metric used was classification accuracy. This metric is standard for evaluating MTS classifiers on the public UEA datasets. Furthermore, classifiers were ranked based on their performance, with the number of wins or ties noted to establish a comparative landscape of classifier effectiveness.&lt;/p&gt;
&lt;p&gt;Beyond accuracy, a critical difference diagram was used to provide a visual statistical comparison of multiple classifiers across multiple datasets. This method uses the nonparametric Friedman test to highlight performance disparities. For the implementation of this statistical test, the R package scmamp was utilized, which is a recognized tool for such analyses in the machine learning community.&lt;/p&gt;
&lt;p&gt;These rigorous evaluation methods ensure that the performance assessment of XCM is both comprehensive and reliable, offering clear insights into its classification capabilities and its standing relative to existing MTS classifiers.&lt;/p&gt;
&lt;p&gt;For our research paper based on the XCM method and its performance on various datasets, here’s how we could approach Section 5, which covers the analysis and interpretation of results:&lt;/p&gt;
&lt;h3 id=&#34;5-results&#34;&gt;5. Results&lt;/h3&gt;
&lt;p&gt;The performance of the XCM method was rigorously evaluated across a comprehensive set of UEA datasets with a focus on multivariate time series classification. Our approach aimed to balance between achieving high classification accuracy and providing explainability. This section discusses the performance of XCM compared to other leading algorithms such as MLSTM-FCN (MF), WEASEL+MUSE (WM), and Elastic Distances (ED) with DTW independent (DWI) and dependent (DWD) variants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Table: Performance Comparison on UEA Datasets&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Datasets&lt;/th&gt;
          &lt;th&gt;XC&lt;/th&gt;
          &lt;th&gt;XC Seq&lt;/th&gt;
          &lt;th&gt;MC&lt;/th&gt;
          &lt;th&gt;MF&lt;/th&gt;
          &lt;th&gt;WM&lt;/th&gt;
          &lt;th&gt;ED (n)&lt;/th&gt;
          &lt;th&gt;DWI&lt;/th&gt;
          &lt;th&gt;DWD&lt;/th&gt;
          &lt;th&gt;(XC Params) Batch&lt;/th&gt;
          &lt;th&gt;Win %&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Articulary Word Recognition&lt;/td&gt;
          &lt;td&gt;98.3&lt;/td&gt;
          &lt;td&gt;92.7&lt;/td&gt;
          &lt;td&gt;92.3&lt;/td&gt;
          &lt;td&gt;98.6&lt;/td&gt;
          &lt;td&gt;99.3&lt;/td&gt;
          &lt;td&gt;97.0&lt;/td&gt;
          &lt;td&gt;98.0&lt;/td&gt;
          &lt;td&gt;98.7&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;80&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Atrial Fibrillation&lt;/td&gt;
          &lt;td&gt;46.7&lt;/td&gt;
          &lt;td&gt;33.3&lt;/td&gt;
          &lt;td&gt;33.3&lt;/td&gt;
          &lt;td&gt;20.0&lt;/td&gt;
          &lt;td&gt;26.7&lt;/td&gt;
          &lt;td&gt;26.7&lt;/td&gt;
          &lt;td&gt;26.7&lt;/td&gt;
          &lt;td&gt;20.0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;60&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Basic Motions&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;67.6&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;97.5&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Character Trajectories&lt;/td&gt;
          &lt;td&gt;99.5&lt;/td&gt;
          &lt;td&gt;98.8&lt;/td&gt;
          &lt;td&gt;97.4&lt;/td&gt;
          &lt;td&gt;99.3&lt;/td&gt;
          &lt;td&gt;99.0&lt;/td&gt;
          &lt;td&gt;96.4&lt;/td&gt;
          &lt;td&gt;96.9&lt;/td&gt;
          &lt;td&gt;99.0&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;80&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Cricket&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;93.1&lt;/td&gt;
          &lt;td&gt;90.3&lt;/td&gt;
          &lt;td&gt;98.6&lt;/td&gt;
          &lt;td&gt;98.6&lt;/td&gt;
          &lt;td&gt;98.6&lt;/td&gt;
          &lt;td&gt;100.0&lt;/td&gt;
          &lt;td&gt;94.4&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Duck Duck Geese&lt;/td&gt;
          &lt;td&gt;70.0&lt;/td&gt;
          &lt;td&gt;52.5&lt;/td&gt;
          &lt;td&gt;65.0&lt;/td&gt;
          &lt;td&gt;67.5&lt;/td&gt;
          &lt;td&gt;57.5&lt;/td&gt;
          &lt;td&gt;27.5&lt;/td&gt;
          &lt;td&gt;55.0&lt;/td&gt;
          &lt;td&gt;60.0&lt;/td&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;80&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Eigen Worms&lt;/td&gt;
          &lt;td&gt;43.5&lt;/td&gt;
          &lt;td&gt;45.0&lt;/td&gt;
          &lt;td&gt;41.9&lt;/td&gt;
          &lt;td&gt;80.9&lt;/td&gt;
          &lt;td&gt;89.0&lt;/td&gt;
          &lt;td&gt;55.0&lt;/td&gt;
          &lt;td&gt;60.3&lt;/td&gt;
          &lt;td&gt;61.8&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;40&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Epilepsy&lt;/td&gt;
          &lt;td&gt;99.3&lt;/td&gt;
          &lt;td&gt;93.5&lt;/td&gt;
          &lt;td&gt;94.9&lt;/td&gt;
          &lt;td&gt;96.4&lt;/td&gt;
          &lt;td&gt;99.3&lt;/td&gt;
          &lt;td&gt;66.7&lt;/td&gt;
          &lt;td&gt;97.8&lt;/td&gt;
          &lt;td&gt;96.4&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Ering&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;13.3&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;80&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Ethanol Concentration&lt;/td&gt;
          &lt;td&gt;34.6&lt;/td&gt;
          &lt;td&gt;31.6&lt;/td&gt;
          &lt;td&gt;30.8&lt;/td&gt;
          &lt;td&gt;31.6&lt;/td&gt;
          &lt;td&gt;29.3&lt;/td&gt;
          &lt;td&gt;29.3&lt;/td&gt;
          &lt;td&gt;30.4&lt;/td&gt;
          &lt;td&gt;32.3&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;80&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Face Detection&lt;/td&gt;
          &lt;td&gt;63.9&lt;/td&gt;
          &lt;td&gt;63.8&lt;/td&gt;
          &lt;td&gt;50.0&lt;/td&gt;
          &lt;td&gt;57.4&lt;/td&gt;
          &lt;td&gt;54.5&lt;/td&gt;
          &lt;td&gt;51.9&lt;/td&gt;
          &lt;td&gt;51.3&lt;/td&gt;
          &lt;td&gt;52.9&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;60&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Finger Movements&lt;/td&gt;
          &lt;td&gt;60.0&lt;/td&gt;
          &lt;td&gt;60.0&lt;/td&gt;
          &lt;td&gt;49.0&lt;/td&gt;
          &lt;td&gt;61.0&lt;/td&gt;
          &lt;td&gt;54.0&lt;/td&gt;
          &lt;td&gt;55.0&lt;/td&gt;
          &lt;td&gt;52.0&lt;/td&gt;
          &lt;td&gt;53.0&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;40&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(Note: &amp;ldquo;XC&amp;rdquo; denotes the accuracy of XCM, &amp;ldquo;XC Seq&amp;rdquo; denotes the accuracy of XCM with sequential layers, &amp;ldquo;MC&amp;rdquo; represents MTEX-CNN, &amp;ldquo;MF&amp;rdquo; denotes MLSTM-FCN, &amp;ldquo;WM&amp;rdquo; stands for WEASEL+MUSE, &amp;ldquo;ED (n)&amp;rdquo; represents Elastic Distance (normalized), &amp;ldquo;DWI&amp;rdquo; and &amp;ldquo;DWD&amp;rdquo; refer to Dynamic Time Warping independent and dependent, respectively. &amp;ldquo;Win %&amp;rdquo; indicates the percentage of times XCM achieved the highest accuracy across all folds.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpretation of Results&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Articulary Word Recognition&lt;/strong&gt;: XCM achieved a high accuracy of 98.3%, showcasing its robustness in motion-based classification and indicating its effectiveness in handling complex time series data with a high dimensional space.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Atrial Fibrillation&lt;/strong&gt;: This dataset posed a challenge with lower accuracy across all methods. XCM&amp;rsquo;s performance at 46.7% suggests that while challenging, it has the potential to discern patterns in smaller and more complex ECG datasets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basic Motions&lt;/strong&gt;: XCM perfected the score, highlighting its proficiency in recognizing basic human activity patterns, a crucial capability for HAR applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Character Trajectories&lt;/strong&gt;: The high score of 99.5% reflects XCM&amp;rsquo;s strength in managing datasets with numerous classes, reinforcing its scalability for extensive data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cricket&lt;/strong&gt;: A perfect score of 100.0% emphasizes XCM&amp;rsquo;s ability to capture intricate temporal patterns, suggesting its suitability for complex HAR scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Duck Duck Geese&lt;/strong&gt;: XCM&amp;rsquo;s performance at 70.0% accuracy indicates a significant capability in audio spectrum data classification, a testament to its adaptability to different data types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eigen Worms&lt;/strong&gt;: Despite the lower score, XCM&amp;rsquo;s handling of the longest sequences among the datasets indicates its potential to model complex temporal behaviors in motion data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Epilepsy&lt;/strong&gt;: An accuracy of 99.3% portrays XCM&amp;rsquo;s precision and reliability in critical classification scenarios, essential for medical applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ering&lt;/strong&gt;: The universally low scores across methods reflect the dataset&amp;rsquo;s complexity, underscoring a need for specialized approaches or additional features to aid classification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ethanol Concentration&lt;/strong&gt;: Although challenging, XCM&amp;rsquo;s relatively higher score suggests its capacity to filter meaningful information from noisy data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Face Detection&lt;/strong&gt;: XCM&amp;rsquo;s ability to handle biometric patterns is evidenced by its performance, indicating its utility in EEG/MEG data interpretation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Finger Movements&lt;/strong&gt;: The moderate score reflects the complexity of the task but also suggests XCM&amp;rsquo;s capability to capture rapid changes in EEG/MEG datasets associated with movements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;ldquo;Win %&amp;rdquo; column indicates the superiority of XCM in most datasets, which combined with its explainability features, positions it as a preferred choice for MTS classification in practical applications. This comprehensive analysis not only confirms the effectiveness of the XCM approach but also guides future advancements and potential improvements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discussion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The results underscore the effectiveness of XCM in multivariate time series classification across a variety of domains, highlighting its capability to maintain high accuracy even in datasets with challenging characteristics. Moreover, the high win percentage indicates XCM&amp;rsquo;s robustness as it frequently outperforms other methods. It is crucial to note that beyond accuracy, XCM&amp;rsquo;s design enables it to offer a layer of explainability which is not captured by accuracy metrics alone but is invaluable in practical applications.&lt;/p&gt;
&lt;h3 id=&#34;6-implementation&#34;&gt;6. Implementation&lt;/h3&gt;
&lt;p&gt;We decided to implement ourselves the XCM model using &lt;a href=&#34;https://github.com/XAIseries/XCM&#34;&gt;this GitHub Repository&lt;/a&gt; on a dataset used in the original paper : BasiMotions.&lt;/p&gt;
&lt;p&gt;The code of the XCM model is shown in the &lt;a href=&#34;#appendix&#34;&gt;Appendix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the results we obtained for a 5 fold training :&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Dataset&lt;/th&gt;
          &lt;th&gt;Model_Name&lt;/th&gt;
          &lt;th&gt;Batch_Size&lt;/th&gt;
          &lt;th&gt;Window_Size&lt;/th&gt;
          &lt;th&gt;Fold&lt;/th&gt;
          &lt;th&gt;Accuracy_Train&lt;/th&gt;
          &lt;th&gt;Accuracy_Validation&lt;/th&gt;
          &lt;th&gt;Accuracy_Test&lt;/th&gt;
          &lt;th&gt;Accuracy_Test_Full_Train&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;BasicMotions&lt;/td&gt;
          &lt;td&gt;XCM&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0.90625&lt;/td&gt;
          &lt;td&gt;0.75&lt;/td&gt;
          &lt;td&gt;0.825&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;BasicMotions&lt;/td&gt;
          &lt;td&gt;XCM&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.925&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;BasicMotions&lt;/td&gt;
          &lt;td&gt;XCM&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.925&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;BasicMotions&lt;/td&gt;
          &lt;td&gt;XCM&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.875&lt;/td&gt;
          &lt;td&gt;0.9&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;BasicMotions&lt;/td&gt;
          &lt;td&gt;XCM&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;20&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;0.78125&lt;/td&gt;
          &lt;td&gt;0.875&lt;/td&gt;
          &lt;td&gt;0.825&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We then analyzed with a graph the evolution of both accuaries with regard to the epochs. The model is thus perfoming really well as explained in the paper.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Saint_Guerin/Evolution_Accuracies.png&#34;
  alt=&#34;Evolution of accuracies during traning&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;One of the main improvment of XCM is his explainalibily of the features which can be explicitly shown with layer activations features map. Here is the one we extracted from the model we trained on BasicMotions dataset.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Saint_Guerin/test_MTS_0_layer_2D_Activation.png&#34;
  alt=&#34;2D_activation_layer&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h3 id=&#34;7-conclusion&#34;&gt;7. Conclusion&lt;/h3&gt;
&lt;p&gt;The XCM approach signifies a substantial step forward in MTS classification, achieving high accuracy while providing explainability of features which is indispensable for applications demanding transparency in AI decision-making. The paper suggests that future work may focus on refining hyperparameters automatically and exploring the fusion of XCM with other modalities for richer data representation and classification.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;appendix&#34;&gt;Appendix&lt;/h3&gt;
&lt;p&gt;Implementation of the XCM model with Keras&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Saint_Guerin/code_xcm.png&#34;
  alt=&#34;XCM&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fauvel, K.; Lin, T.; Masson, V.; Fromont, É.; Termier, A. XCM: An Explainable Convolutional Neural Network for Multivariate Time Series Classification. Mathematics 2021, 9, 3137. &lt;a href=&#34;http://dx.doi.org/10.3390/math9233137&#34;&gt;DOI: 10.3390/math9233137&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Li, J.; Rong, Y.; Meng, H.; Lu, Z.; Kwok, T.; Cheng, H. TATC: Predicting Alzheimer’s Disease with Actigraphy Data. In Proceedings
of the 24th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, London, UK, 19–23 August 2018.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jiang, R.; Song, X.; Huang, D.; Song, X.; Xia, T.; Cai, Z.; Wang, Z.; Kim, K.; Shibasaki, R. DeepUrbanEvent: A System for Predicting
Citywide Crowd Dynamics at Big Events. In Proceedings of the 25th ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining, Anchorage, AK, USA, 4–8 August 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fauvel, K.; Balouek-Thomert, D.; Melgar, D.; Silva, P.; Simonet, A.; Antoniu, G.; Costan, A.; Masson, V.; Parashar, M.; Rodero, I.;
et al. A Distributed Multi-Sensor Machine Learning Approach to Earthquake Early Warning. In Proceedings of the 34th AAAI
Conference on Artificial Intelligence, New York, NY, USA, 7–12 February 2020.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Karim, F.; Majumdar, S.; Darabi, H.; Harford, S. Multivariate LSTM-FCNs for Time Series Classification. Neural Netw. 2019,
116, 237–245. [CrossRef] [PubMed]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schäfer, P.; Leser, U. Multivariate Time Series Classification with WEASEL+MUSE. arXiv 2017, arXiv:1711.11343.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bagnall, A.; Lines, J.; Keogh, E. The UEA Multivariate Time Series Classification Archive, 2018. arXiv 2018, arXiv:1811.00075.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/xcm/</guid>
      <pubDate>Tue, 26 Mar 2024 00:55:40 +0100</pubDate>
    </item>
    
    <item>
      <title>RobustAI_RegMixup</title>
      <link>http://localhost:1313/posts/robustai_regmixup/</link>
      <description>&lt;style
TYPE=&#34;text/css&#34;&gt;

code.has-jax {font:
inherit;
font-size:
100%; 
background: 
inherit; 
border: 
inherit;}

&lt;/style&gt;
&lt;script
type=&#34;text/x-mathjax-config&#34;&gt;

MathJax.Hub.Config({

    tex2jax: {

        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],

        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry

    }

});

MathJax.Hub.Queue(function() {

    var all = MathJax.Hub.getAllJax(), i;

    for(i = 0; i &lt; all.length; i += 1) {

        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;

    }

});

&lt;/script&gt;
&lt;script
type=&#34;text/javascript&#34;
src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
&lt;meta charset=&#34;UTF-8&#34;&gt;
&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
&lt;title&gt;Styled Table&lt;/title&gt;
&lt;style&gt;
    table {
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        padding: 8px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }
    th {
        background-color: #f2f2f2;
    }
    tr:hover {
        background-color: #f5f5f5;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;/html&gt;
&lt;h1 style=&#34;font-size: 36px;&#34;&gt;RegMixup : Regularizer for robust AI&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 24px;&#34;&gt;Improve accuracy and Out-of-Distribution Robustness&lt;h1&gt;
&lt;h1 style=&#34;font-size: 18px;&#34;&gt;Authors: Marius Ortega, Ly An CHHAY &lt;br /&gt;
Paper : &lt;a href=&#34;https://arxiv.org/abs/2206.14502&#34;&gt;RegMixup&lt;/a&gt;  by Francesco Pinto, Harry Yang, Ser-Nam Lim, Philip H.S. Torr, Puneet K. Dokania&lt;/h1&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0.0&#34;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-0.1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Prerequisites&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.1&#34;&gt;Empirical Risk Minimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.2&#34;&gt;Vicinal Risk Minimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1.3&#34;&gt;Mixup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;RegMixup in theory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;RegMixup in practice &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-0.0&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In this blog post, we will present the paper &amp;ldquo;RegMixup: Regularizer for robust AI&amp;rdquo; by Francesco Pinto, Harry Yang, Ser-Nam Lim, Philip H.S. Torr, Puneet K. Dokania. This paper introduces a new regularizer called RegMixup, which is designed to improve the accuracy and out-of-distribution robustness of deep neural networks. The authors show that RegMixup can be used to improve the performance of state-of-the-art models on various datasets, including CIFAR-10, CIFAR-100, and ImageNet. The paper also provides an extensive empirical evaluation of RegMixup, demonstrating its effectiveness in improving the robustness of deep neural networks to out-of-distribution samples.&lt;/p&gt;
&lt;p&gt;In this blong post, we will provide an overview of the paper, explain the theoretical background of RegMixup, and finally, perform a toy example to demonstrate how to use RegMixup with the torch-uncertainty library.&lt;/p&gt;
&lt;h2 id=&#34;section-0.1&#34;&gt;Introduction &lt;/h2&gt;
&lt;p&gt;Most real-world machine algorithm applications are good when it comes to predicting new data following the train distribution. However, they are not robust to out-of-distribution (OOD) samples (i.e. when the test data distribution is different from the train data distribution). This is a major problem in machine learning as it can lead to catastrophic predictions.&lt;/p&gt;
&lt;p&gt;The question is how to improve the robustness of machine learning algorithms to OOD samples ?
Many researchers have tried such as Liu et al. (2020a, 2020b), Wen et al. (2021), Lakshminarayanan et al. (2017). Even though they have shown some improvements, their approaches use expensive ensemble methods or propose non-trivial modifications of the neural network architecture. What if we could improve the robustness of deep neural networks with respect to OOD samples while utilizing much simpler and cost-effective methods?&lt;/p&gt;
&lt;p&gt;The first step toward the method presented in this blog is Mixup, proposed by Zang and al (2018). This method is quite good when it comes to dealing with slight perturbations in the data distribution. However, Mixup has the tendency to emphasize difference in labels from very similar samples (high predictive entropy). This is not ideal for OOD samples as the model do not differentiate ID (In-distribution) and OOD samples very well.&lt;/p&gt;
&lt;p&gt;RegMixup adds a new layer to Mixup by using it as a regularizer. From there, we will present the theoretical background of the paper, the implementation so as to easily use it in practice.&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;1. Prerequisites &lt;/h2&gt;
&lt;p&gt;In order to understand the paper, we need to understand what is Empirical and Vicinal Risk Minimization (ERM and VRM) as well as Mixup.&lt;/p&gt;
&lt;h3 id=&#34;section-1.1&#34;&gt;1.1. Empirical Risk Minimization (ERM)&lt;/h3&gt;
&lt;p&gt;Empirical Risk Minimization is an inference principle which consists in finding the model $\hat{f}$ that minimizes the empirical risk $R_{emp}(\hat{f})$ on the training set. The empirical risk is defined as the average loss over the training set :&lt;/p&gt;
&lt;p&gt;$$
R_{emp}(\hat{f}) = \frac{1}{n} \sum_{i=1}^{n} L(\hat{f}(x_i), y_i) \tag{1}
$$&lt;/p&gt;
&lt;p&gt;where $L$ is the loss function, $x_i$ is the input, $y_i$ is the label and $n$ is the number of samples in the training set. However, ERM contains a very strong assumption which is that $\hat{f} \approx f$ where $f$ is the true (and unknown) distribution for all points of the dataset. Thereby, if the testing set distribution differs even slighly from the training set one, ERM is unable to explain or provide generalization. Vicinal Risk is a way to relax this assumption.&lt;/p&gt;
&lt;h3 id=&#34;section-1.2&#34;&gt;1.2. Vicinal Risk Minimization (VRM)&lt;/h3&gt;
&lt;p&gt;Vicinal Risk Minimization (VRM) is a generalization of ERM. Instead of having a single distribution estimate $\hat{f}$, VRM uses a set of distributions $\hat{f}_{x_i, y_i}$ for each training sample $(x_i, y_i)$. The goal is to minimize the average loss over the training set, but with respect to the vicinal distribution of each sample.&lt;/p&gt;
&lt;p&gt;$$
R_{vrm}(\hat{f}) = \frac{1}{n} \sum_{i=1}^{n} L(\hat{f}_{x_i, y_i}(x_i), y_i) \tag{2}
$$&lt;/p&gt;
&lt;p&gt;Consequently, each training point has its own distribution estimate. This is a way to relax the strong assumption of ERM explained above.&lt;/p&gt;
&lt;h3 id=&#34;section-1.3&#34;&gt;1.3. Mixup&lt;/h3&gt;
&lt;p&gt;Mixup is a data augmentation technique that generates new samples by mixing pairs of training samples. By doing so, Mixup regularizes models to favor simple linear behavior in-between training examples. Experimentally speaking, Mixup has been shown to improve the generalization of deep neural networks, increase their robustness to adversarial attacks, reduce the memorization of corrupt labels as well as stabilize the training of generative adversarial networks.&lt;/p&gt;
&lt;p&gt;In essence, Mixup can be thought as a learning objective designed for robustness and accountability of the model. Now, let&amp;rsquo;s see how Mixup works.&lt;/p&gt;
&lt;p&gt;First, we take two samples $(x_i, y_i)$ and $(x_j, y_j)$ from the training set. Then, we generate a new sample $(\tilde{x}, \tilde{y})$ by taking a convex combination of the two samples with a mixup coefficient $\lambda \sim \text{Beta}(\alpha, \alpha)$ :&lt;/p&gt;
&lt;p&gt;$$
\tilde{x} = \lambda x_i + (1 - \lambda) x_j \hspace{1cm}
\tilde{y} = \lambda y_i + (1 - \lambda) y_j
$$&lt;/p&gt;
&lt;p&gt;We can then define the vicinal distribution of the mixed sample $(\tilde{x}, \tilde{y})$ as :&lt;/p&gt;
&lt;p&gt;$$
P_{x_i, y_i} = \mathbb{E}_\lambda[( \delta {\tilde{x}_i}(x), \delta{\tilde{y}_i}(y))] \tag{3}
$$&lt;/p&gt;
&lt;p&gt;Mixup is an interesting method to consider but it possesses some limitations :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Small $\alpha$ issues :&lt;/strong&gt; With our setup, $\alpha \approx 1$ encourages $\tilde{x}$ to be perceptually different from $x$. Consequently, training and testing distribution will also grow appart from each other. When $\alpha \ll 1$, the mixup convex interpolation factor λ leads to a sharp peaks of 0 and 1. Therefore, Mixup will produce samples close to the initial ones (in case λ close to 1) or in the direction of another sample (in case of λ close to 0). Look at the &lt;strong&gt;&lt;a href=&#34;#my-fig&#34;&gt;figure&lt;/a&gt;&lt;/strong&gt; below, one of the two interpolating images dominates the interpolated one. What is noticed after cross-validation of alpha is that the best values are $\alpha \approx 0.2$ which is very small. Consequently, the final sample effectively presents only a small perturbation in comparison to the original one while the vicinal distribution exploration space is much larger. We could say that Mixup does not allow to use the full potential of the vicinal distributions of the data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model underconfidence :&lt;/strong&gt; When a neural network is trained with Mixup, it is only exposed to interpolated samples. Consequently, the model learns to predict smoothed labels which is the very root cause of its underconfidence. This results in a high predictive entropy for both ID and OOD samples.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure id=&#34;my-fig&#34; class=&#34;numbered&#34;&gt;
    &lt;img src=&#34;./images/regmixup/fig.png&#34; class=&#34;align-center&#34;&gt;
    &lt;p style=&#34;text-align: center;&#34;&gt;Mixup vs RegMixup, underconfidence and space exploration.&lt;/p&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;section-2&#34;&gt;2. RegMixup in theory&lt;/h2&gt;
&lt;p&gt;Now that we have understood the path that led to RegMixup, we will explore its theoretical background and see how and why it is a good regularizer for robust AI.&lt;/p&gt;
&lt;p&gt;While Mixup utilizes data points&amp;rsquo; vicinal distribution only, RegMixup uses both the vicinal and the empirical one (refering respectively to VRM and ERM). This can seem far-fetched or even counter-intuitive but produces very interesting properties.&lt;/p&gt;
&lt;p&gt;$$
P(x, y) = \frac{1}{n} \sum_{i=1}^n \left( \gamma \delta_{x_i}(x) \delta_{y_i}(y) + (1-\gamma) P_{x_i, y_i}(x, y) \right) \tag{4}
$$&lt;/p&gt;
&lt;p&gt;Here, $\gamma$ is the hyperparameter controlling the mixup between the empirical and vicinal distribution. In fact, we see that the distribution $P(x, y)$ for RegMixup is a convex combination of the empirical distribution (left term of the addition in equation 4) and the vicinal distribution defined with equations (2) and (3).&lt;/p&gt;
&lt;p&gt;From there, we can define a new loss function $\mathcal{L}$ based on the Cross Entropy Loss ($\text{CE}$)&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}(\hat{y}, y) = \text{CE}(p_\theta(\hat{y} \vert x), y) + \eta \text{CE}(p_\theta(\hat{y} \vert \tilde{x}), \tilde{y}) \tag{5}
$$&lt;/p&gt;
&lt;p&gt;With $ \eta \in R_{+}^{\ast} $ being the hyperparameter controlling the importance of the vicinal cross entropy sub-loss and $p_\theta$ the activation function of the model parameterized by $\theta$. In the paper, the value of $\eta$ is set to 1 and its variation seem negligible. Consequently, we will not focus on it in this blog post.&lt;/p&gt;
&lt;p&gt;Such a model (equation 4) exhibits properties that lacked in Mixup :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Values of $\alpha$ and underconfidence :&lt;/strong&gt; As we explicitly add the empirical distribution to the vicinal one, the ERM term will encourage the model to predict the true labels of the training set while the VRM term, motivated by the interpolation factor $\lambda$, will explore the vicinal distribution space in a much more thorough way than what was possible with Mixup. For instance, if λ $\approx$ 0.5, a wide variety of images containing features from both the images in the pair are obtained (look at the &lt;strong&gt;&lt;a href=&#34;#my-fig&#34;&gt;figure&lt;/a&gt;&lt;/strong&gt;). Consequently, the ERM term allows to better predict in-distribution samples while the VRM term, with a larger $\alpha$, will allow to better predict OOD samples. This is a very interesting property as it allows to have a model that is both confident and accurate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prediction entropy :&lt;/strong&gt; Through their experiments and observations, researchers found that a cross-validated value of $\alpha$ leads to a maximum likelihood estimation having high entropy for ODD samples only. While Mixup demonstrated high entropy for both ID and OOD samples, RegMixup is able to differentiate between the two. This is an highly desirable properties indicating us that RegMixup acts as a &lt;strong&gt;regularizer&lt;/strong&gt; in essense.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a preliminary conclusion, RegMixup is a very powerful, cost-efficient and simple-to-implement regularizer that allows to improve the robustness and accuracy of deep neural networks for both in-distribution and out-of-distribution samples. In the next section, we will see how to use RegMixup in practice trough a toy example.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;3. RegMixup in practice (implementation)&lt;/h2&gt;
&lt;p&gt;Now, our objective will be to demonstrate the effectiveness of RegMixup through a very simple example. We will use the CIFAR-10-C dataset (corrupted version of CIFAR-10) and a standard ResNet-18 model. We will compare performances of 3 models :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A baseline model trained with ERM&lt;/li&gt;
&lt;li&gt;A model trained with Mixup&lt;/li&gt;
&lt;li&gt;A model trained with RegMixup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do so, we have two possibilities :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the official implementation of RegMixup available on &lt;a href=&#34;https://github.com/FrancescoPinto/RegMixup&#34;&gt;Francesco Pinto&#39;s GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use the torch-uncertainty library which provides a simple and efficient way to use RegMixup. Note, the library is developed by researchers from ENSTA Paris and is available on &lt;a href=&#34;https://github.com/ENSTA-U2IS-AI/torch-uncertainty&#34;&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog post, we will use the torch-uncertainty library as it is very simple to use and provides a very well-implemented version of RegMixup.&lt;/p&gt;
&lt;h3 id=&#34;31-installation&#34;&gt;3.1. Installation&lt;/h3&gt;
&lt;p&gt;First, we need to install the torch-uncertainty library. To do so, we can use pip :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install torch-uncertainty
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: If you use a gpu, torch-uncertainty will automatically install a cpu version of torch and torchvision, you can compile the following lines to install the gpu version of torch and torchvision (took from &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;PyTorch website&lt;/a&gt;) :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip unistall torch torchvision
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cu118
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To check if the installation was successful, you can run the following code, it should return True if you have a gpu and False if you don&amp;rsquo;t have one :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cuda&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;is_available&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-training-the-models-with-torch-uncertainty&#34;&gt;3.2. Training the models with torch-uncertainty&lt;/h3&gt;
&lt;p&gt;Now that we have installed torch-uncertainty, we can train the models. First, we need to import the necessary libraries :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch_uncertainty&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;cli_main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;init_args&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch_uncertainty.baselines.classification&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ResNet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch_uncertainty.optimization_procedures&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;optim_cifar10_resnet18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch_uncertainty.datamodules&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;CIFAR10DataModule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torchvision.datasets&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;CIFAR10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torchvision&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;transforms&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch.nn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;CrossEntropyLoss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pathlib&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;cli_test_helpers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ArgvContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we can define the 3 models we discussed earlier :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;baseline&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ResNet&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;num_classes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;loss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;CrossEntropyLoss&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;optimization_procedure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;optim_cifar10_resnet18&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;std&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;in_channels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cuda&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;mixup&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ResNet&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;num_classes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;loss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;CrossEntropyLoss&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;optimization_procedure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;optim_cifar10_resnet18&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;std&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;in_channels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;mixup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;mixup_alpha&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cuda&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;regmixup&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ResNet&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;num_classes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;loss&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;CrossEntropyLoss&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;optimization_procedure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;optim_cifar10_resnet18&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;std&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;in_channels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;reg_mixup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;mixup_alpha&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cuda&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before training the models, we need to define important arguments such as training parameters (epochs, estimators, etc.) and the datamodule. We can do so with the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Path&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;abspath&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We mock the arguments for the trainer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ArgvContext&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;file.py&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;--max_epochs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;--enable_progress_bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;--num_estimators&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;init_args&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;network&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;ResNet&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;datamodule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;CIFAR10DataModule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;net_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;logs/reset18-cifar10&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# datamodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;dm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;CIFAR10DataModule&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;vars&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we can train the models using the &lt;code&gt;cli_main&lt;/code&gt; function from torch-uncertainty :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;results_baseline&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;cli_main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;baseline&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;dm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;root&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;net_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;results_mixup&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;cli_main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;mixup&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;dm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;root&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;net_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;results_regmixup&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;cli_main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;regmixup&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;dm&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;root&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;net_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: If you have a gpu, you can make a slight modification to the code to use it :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on &lt;code&gt;cli_main&lt;/code&gt; and press &lt;code&gt;F12&lt;/code&gt; to go to the function definition.&lt;/li&gt;
&lt;li&gt;Go to line 222 and replace the trainer definition by the following one :&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# trainer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#111&#34;&gt;trainer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;pl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Trainer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;from_argparse_args&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;accelerator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;gpu&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;devices&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;callbacks&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;callbacks&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tb_logger&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;deterministic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;seed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;inference_mode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;opt_temp_scaling&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;val_temp_scaling&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Save the file and you are all set.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;33-results&#34;&gt;3.3. Results&lt;/h3&gt;
&lt;p&gt;So as to compare the performances of the 3 models, we use two corrupted versions of Cifar-10-C. The first version has a corruption severity factor of 5 (slight data corruption) and the second one has a corruption severity factor of 15 (more severe data corruption). Our study contains 5 metrics : entropy, accuracy, brier score, expected calibration error (ECE) and negative log-likelihood (NLL). In our explanation, we will focus on the accuracy and entropy to keep it simple.&lt;/p&gt;
&lt;p&gt;With corruption severity factor of 5, we obtain the following results :&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;entropy&lt;/th&gt;
          &lt;th&gt;accuracy&lt;/th&gt;
          &lt;th&gt;brier&lt;/th&gt;
          &lt;th&gt;ece&lt;/th&gt;
          &lt;th&gt;nll&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;baseline&lt;/td&gt;
          &lt;td&gt;0.656294&lt;/td&gt;
          &lt;td&gt;0.7480&lt;/td&gt;
          &lt;td&gt;0.349862&lt;/td&gt;
          &lt;td&gt;0.032466&lt;/td&gt;
          &lt;td&gt;0.729336&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;mixup&lt;/td&gt;
          &lt;td&gt;0.640811&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;0.7578&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;0.335403&lt;/td&gt;
          &lt;td&gt;0.024429&lt;/td&gt;
          &lt;td&gt;0.703844&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;regmixup&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;0.676174&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;0.7564&lt;/td&gt;
          &lt;td&gt;0.340233&lt;/td&gt;
          &lt;td&gt;0.023135&lt;/td&gt;
          &lt;td&gt;0.711405&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;First of all, we can see that the accuracy is quite similar for the 3 models. This makes sense as the corruption severity factor is quite low, thus cifar-10-c is not very different from the original cifar-10. However, we can see that the entropy of the RegMixup model is higher than the one of the Mixup model. This is symptomatic of Mixup&amp;rsquo;s underconfidence. As stated previously, given the low corruption severity factor of cifar-10-c, the underconfidence of Mixup does not impact its performances in a visible manner.&lt;/p&gt;
&lt;p&gt;With corruption severity factor of 15, we obtain the following results :&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;entropy&lt;/th&gt;
          &lt;th&gt;accuracy&lt;/th&gt;
          &lt;th&gt;brier&lt;/th&gt;
          &lt;th&gt;ece&lt;/th&gt;
          &lt;th&gt;nll&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;baseline&lt;/td&gt;
          &lt;td&gt;0.615607&lt;/td&gt;
          &lt;td&gt;0.7402&lt;/td&gt;
          &lt;td&gt;0.358522&lt;/td&gt;
          &lt;td&gt;0.048414&lt;/td&gt;
          &lt;td&gt;0.750933&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;mixup&lt;/td&gt;
          &lt;td&gt;0.698558&lt;/td&gt;
          &lt;td&gt;0.7558&lt;/td&gt;
          &lt;td&gt;0.338540&lt;/td&gt;
          &lt;td&gt;0.014760&lt;/td&gt;
          &lt;td&gt;0.709190&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;regmixup&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;0.702599&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;0.7614&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;0.327945&lt;/td&gt;
          &lt;td&gt;0.008439&lt;/td&gt;
          &lt;td&gt;0.687550&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here the results are much more unequivocal. As the severity factor increases, the baseline model drops in accuracy and entropy, Mixup also drops in accuracy but increases in entropy and RegMixup increases in accuracy and entropy. Here, RegMixup has the higher entropy as the model has higher entropy for OOD samples which are more frequent at this corruption level. Mixup shows a greater delta increase in entropy due to its higher predictive entropy tendency whether or not samples are OOD or ID. Consequently, RegMixup is more confident and accurate than the Mixup model eventhough Mixup is not fully underperforming.&lt;/p&gt;
&lt;h2 id=&#34;section-4&#34;&gt;4. Conclusion&lt;/h2&gt;
&lt;p&gt;As a conclusion, we have seen that RegMixup is a powerful method to regularize deep neural networks. Despite being very simple and cost-effective, it is important to specify that the paper does not provide a theoretical explanation of the method. These experimental grounds are very promising but it appears important to stay cautious while utilizing RegMixup.&lt;/p&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/robustai_regmixup/</guid>
      <pubDate>Sun, 24 Mar 2024 12:38:16 +0100</pubDate>
    </item>
    
    <item>
      <title>Learning Fair Scoring Functions: Bipartite Ranking under ROC-based Fairness Constraints</title>
      <link>http://localhost:1313/posts/lambert-davy/</link>
      <description>&lt;h1 style=&#34;font-size: 24px;&#34;&gt;Learning Fair Scoring Functions: Bipartite Ranking under ROC-based Fairness Constraints&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 18px;&#34;&gt;Authors: Godefroy LAMBERT and Louise DAVY&lt;/h1&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;AUC-based fairness constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;ROC-based fairness constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;Reproducibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-7&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a blog post about the paper Learning Fair Scoring Functions: Bipartite Ranking under ROC-based Fairness Constraints, published by R. Vogel et al. in 2021 and available &lt;a href=&#34;http://proceedings.mlr.press/v130/vogel21a/vogel21a-supp.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;h1 style=&#34;font-size: 24px; text-decoration: underline;&#34;&gt;Introduction&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;With recent advances in machine learning, applications are becoming increasingly numerous and the expectations are high. Those applications will only be able to be deployed if some important issues are addressed such as bias. There are famous datasets known for containing variables that induce a lot of bias such as Compas with racial bias and gender bias in the Adult dataset. To avoid those biases, new algorithms were created to provide more fairness in the prediction by using diverse methods.&lt;/p&gt;
&lt;p&gt;Today, we will be reviewing the methods presented in “Learning Fair Scoring Functions: Bipartite Ranking under ROC-based Fairness Constraints”. This paper uses basic metrics such as AUC constraint and ROC constraint and shows some limitations. Since this is bipartite ranking, we will only focus on binary prediction, such as will this person recid for the COMPAS dataset or will this person get his loan for the Adult dataset.&lt;/p&gt;
&lt;h1 id=&#34;section-2&#34;&gt;&lt;h1 style=&#34;font-size: 24px; text-decoration: underline;&#34;&gt;Definitions&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;The goal of &lt;strong&gt;bipartite ranking&lt;/strong&gt; is to acquire an ordering of X where positive instances are consistently ranked above negative ones with a high probability. This is done by learning an appropriate scoring function $s$. Such scoring functions are widely used in many critical domains such as &lt;strong&gt;loan granting&lt;/strong&gt;, &lt;strong&gt;anomaly detection&lt;/strong&gt;, or even in &lt;strong&gt;court decisions&lt;/strong&gt;. A nice way to assess their performance is through the analysis of the &lt;strong&gt;Receiver Operating Characteristic&lt;/strong&gt; (ROC) curve and the &lt;strong&gt;Area Under the ROC Curve&lt;/strong&gt; (AUC).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ROC&lt;/strong&gt; stands for &lt;strong&gt;Receiver Operating Characteristic curve&lt;/strong&gt; and is a graph showing the performance of a classification model at all classification thresholds for a model. This curve plots two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;True Positive Rate&lt;/li&gt;
&lt;li&gt;False Positive Rate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/lambert_davy/roc_easy.png&#34;
  alt=&#34;Roc_1&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;The formula for the True Positive Rate (TPR) is:
$$TPR = \frac{TP}{TP + FN}$$&lt;/p&gt;
&lt;p&gt;And the formula for the False Positive Rate (FPR) is:
$$FPR = \frac{FP}{FP + TN}$$&lt;/p&gt;
&lt;p&gt;With ${FP}$ = False Positive, $FN$ = False Negative, $TP$ = True Positive, $TN$ = True Negative.&lt;/p&gt;
&lt;p&gt;By varying the classifier, we can obtain different ROC curves that are represented in the following image. The curve that is closer to the upper-left corner is the best one, while the curve in diagonal represents a random classifier.
&lt;img
  src=&#34;./images/lambert_davy/Roc_curve.svg.png&#34;
  alt=&#34;Roc_full&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AUC&lt;/strong&gt; stands for &lt;strong&gt;Area Under the ROC Curve&lt;/strong&gt; and is a widely used metric in machine learning, particularly in binary classification tasks. The AUC quantifies the &lt;strong&gt;overall performance of the model&lt;/strong&gt; across all possible classification thresholds.&lt;/p&gt;
&lt;p&gt;That is, AUC measures the entire two-dimensional area underneath the entire ROC curve (think integral calculus) from (0,0) to (1,1). The AUC ranges in value from 0 to 1. A model whose predictions are &lt;strong&gt;100% wrong has an AUC of 0.0&lt;/strong&gt;, one whose predictions are &lt;strong&gt;100% correct has an AUC of 1.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/lambert_davy/AUC.png&#34;
  alt=&#34;AUC&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;While &lt;strong&gt;fairness&lt;/strong&gt; seems like a desirable goal for any ranking function, there are many different definitions of what fairness really is and thus, many different &lt;strong&gt;metrics&lt;/strong&gt; to assess the fairness of an algorithm. In the case of loan grants for example, one could consider that fairness is achieved between men and women if we granted the same percentage of loans for both groups. &lt;strong&gt;Statistical parity&lt;/strong&gt;, which  compares the proportion of positive outcomes between different demographic groups, is a good metric in this case.  However, this approach might overlook underlying disparities in socioeconomic status that affect loan approval rates. Another vision of fairness might ensure that individuals are all as likely to get a wrong decision, regardless of demographic factors such as gender or ethnicity. In this case, &lt;strong&gt;parity of mistreatment&lt;/strong&gt; would be a good metric, as it ensures that the proportion of errors is the same for all demographic groups. However, this considers that all errors are the same, which means that one group could have a high false positive rate and another a high false negative rate. The authors thus decided to choose &lt;strong&gt;parity in false positive rates&lt;/strong&gt; and/or &lt;strong&gt;parity in false negative rates&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;section-3&#34;&gt;&lt;h1 style=&#34;font-size: 24px; text-decoration: underline;&#34;&gt;AUC-based fairness constraints&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;This first approach is based on the AUC, it will help us to highlight the limitations of this metric which motivated the authors to introduce another approach based on ROC constraints.&lt;/p&gt;
&lt;p&gt;Precise example of AUC based constraints presented in the paper are the intra-group pairwise AUC fairness (Beutel et al., 2019), Background Negative Subgroup Positive (BNSP) AUC fairness (Borkan et al., 2019), the inter-group pairwise AUC fairness (Kallus and Zhou, 2019). The first one require the ranking performance to be equal within groups, the second one enforces that positive instances from either group have the same probability of being ranked higher than a negative example and the last one imposes that the positives of a group can be distinguished from the negatives of the other group as effectively for both groups. Those 3 AUC based constraints are only a part of the many constraints that exist.&lt;/p&gt;
&lt;p&gt;The paper introduces a new framework to generalize all relevant AUC-based constraint as a &lt;strong&gt;linear combination of 5 relevant elementary constraints&lt;/strong&gt; noted $C_1$ to $C_5$.&lt;/p&gt;
&lt;p&gt;The value of |$ C_ {1} $(s)| (resp. |$ C_ {2} $(s)|) quantifies the &lt;strong&gt;resemblance of the distribution&lt;/strong&gt; of the negatives (resp. positives) between the &lt;strong&gt;two sensitive attributes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;$ C_ {1} $(s) = $ AUC_ {{H_S^{(0)}} ,{H_S^{(1)}}} $ - $\frac{1}{2}$&lt;/p&gt;
&lt;p&gt;$ C_ {2} $(s) = $\frac{1}{2}$ - $ AUC_ {{G_S^{(0)}} ,{G_S^{(1)}}} $&lt;/p&gt;
&lt;p&gt;The values of $ C_ {3} $(s), $ C_ {4} $(s) and $ C_ {5} $(s) measure the &lt;strong&gt;difference
in ability of a score to discriminate&lt;/strong&gt; between positives and negatives for any two pairs of sensitive attributes.&lt;/p&gt;
&lt;p&gt;$ C_ {3} $(s) = $ AUC_ {{H_S^{(0)}} ,{G_S^{(0)}}} $ - $ AUC_ {{H_S^{(0)}} ,{G_S^{(1)}}} $&lt;/p&gt;
&lt;p&gt;$ C_ {4} $(s) = $ AUC_ {{H_S^{(0)}} ,{G_S^{(1)}}} $ - $ AUC_ {{H_S^{(1)}} ,{G_S^{(0)}}} $&lt;/p&gt;
&lt;p&gt;$ C_ {5} $(s) = $ AUC_ {{H_S^{(1)}} ,{G_S^{(0)}}} $ - $ AUC_ {{H_S^{(1)}} ,{G_S^{(1)}}} $&lt;/p&gt;
&lt;p&gt;The family of fairness constraints considered is then the set of linear combinations of the $C_l(s)$ = 0:&lt;/p&gt;
&lt;p&gt;\begin{align*}
% $C_l(s)$ = 0
C_Γ(s): Γ^T C(s) =
\sum_{l=1}^{5} {Γ_l}{C_l}(s) = 0
\end{align*}&lt;/p&gt;
&lt;p&gt;Where $Γ$ = $(Γ_1, &amp;hellip; Γ_5)^T$.&lt;/p&gt;
&lt;p&gt;The objective function is thus defined as follows :&lt;/p&gt;
&lt;p&gt;\begin{align}
\label{eq:auc_general_problem}
\textstyle\max_{s\in\mathcal{S}} \quad AUC_{H_s,G_s} - \lambda
|\Gamma^\top
C
(s)|,
\end{align}
where $\lambda\ge 0$ is a hyperparameter balancing ranking performance
and fairness.&lt;/p&gt;
&lt;p&gt;The paper focuses on a special case of fairness, the &lt;strong&gt;intra-group pairwise AUC fairness&lt;/strong&gt;. This was to be more concise. In this example, the objective function becomes:&lt;/p&gt;
&lt;p&gt;$$
L_\lambda(s) = AUC_{H_s,G_s} - \lambda  | AUC_{H_s^{(0)}, G_s^{(0)}} -  AUC_{H_s^{(1)}, G_s^{(1)} } |
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt; Issues of AUC-Based constraint:&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fairness using AUC-based constraints defined by the equality between two AUC’s only quantify a stochastic order between distributions, not the equality between these distributions, and would lead to some unfair result, for a group or for the other group.&lt;/p&gt;
&lt;p&gt;The authors conducted experiments with the credit-risk dataset and found that creditworthy individuals from both groups had equal chances of being ranked higher than a &amp;ldquo;bad borrower.&amp;rdquo; However, employing high thresholds (which represent low probabilities of default on approved loans) would result in unfair outcomes for one group.&lt;/p&gt;
&lt;h1 id=&#34;section-4&#34;&gt;&lt;h1 style=&#34;font-size: 24px; text-decoration: underline;&#34;&gt;ROC-based fairness constraints&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;A richer approach is then to use &lt;strong&gt;pointwised ROC-based fairness constraints&lt;/strong&gt;. Ideally, we would want to enforce the equality of all score distributions between both groups (i.e., identical ROC curves). This would satisfy all AUC-based fairness constraints previously mentioned. However, this condition is so restrictive that it will most likely lead to a significant drop in performances. As a result, the authors propose to satisfy this constraint on only a &lt;strong&gt;finite number of points&lt;/strong&gt;. They were indeed able to prove that this was sufficient to ensure maximum fairness for a fixed false positive or false negative  $\alpha$.&lt;/p&gt;
&lt;p&gt;As a result, the objective function becomes :&lt;/p&gt;
&lt;p&gt;\begin{align*}
% L_\Lambda(s) =
AUC_{H_s,G_s} &amp;amp;-
\sum_{k=1}^{m_H} \lambda_H^{(k)}  \big| \Delta_{H,\alpha_H^{
(k)}}(s) \big|
- \sum_{k=1}^{m_G} \lambda_G^{(k)} \big| \Delta_{G,\alpha_G^{(k)}}(s) \big|,
\end{align*}&lt;/p&gt;
&lt;p&gt;Where $\Delta_{H,\alpha_H^{(k)}}(s)$ and $\Delta_{G,\alpha_G^{(k)}}(s)$ represent the deviations between the positive (resp. negative) inter-group ROCs and the identity function:&lt;/p&gt;
&lt;p&gt;$$
\Delta_{G, \alpha}(s) = ROC_{G^{(0)}_s, G^{(1)}_s}(\alpha) - \alpha
$$&lt;/p&gt;
&lt;p&gt;$$
\Delta_{H, \alpha}(s) = ROC_{H^{(0)}_s,H^{(1)}_s}(\alpha) - \alpha
$$&lt;/p&gt;
&lt;p&gt;In practice, the objective function is slightly modified to be able to maximise it. The authors applied a classic smooth surrogate relaxations of the AUCs or ROCs based on a logistic function. They also removed the absolute values and, instead, relied on some parameters to ensure positive values.&lt;/p&gt;
&lt;h1 id=&#34;section-5&#34;&gt;&lt;h1 style=&#34;font-size: 24px; text-decoration: underline;&#34;&gt;Results&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;The authors tested out their results on two datasets : &lt;strong&gt;Compas&lt;/strong&gt; and &lt;strong&gt;Adult&lt;/strong&gt;. Both are widely used when it comes to fairness. Indeed, they are known to be biased against race (for Compas) and gender (for both). Compas is a recidivism prediction dataset, whereas Adult predicts whether income exceeds $50K/yr based on census data. The results reported in the next figure show that the ROC-based method achieves its goal of mitigating the differences between favoured and unfavoured groups with limited drop in performances (the AUC went from 0.72 to 0.70 on the Compas dataset and from 0.91 to 0.87 on the Adult dataset). Indeed, the blue ROC curve, which is the ROC curve of the unfavoured group (Afro-American people for the Compas Dataset and women for the Adult Dataset), is brought closer to the green ROC curve (the ROC curve of the favoured group).&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/lambert_davy/main_text_inkscape_all_rocs_no_train_new.svg&#34;
  alt=&#34;AUC&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h1 id=&#34;section-6&#34;&gt;&lt;h1 style=&#34;font-size: 24px; text-decoration: underline;&#34;&gt;Reproducibility&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;We were able to run the provided code without too much trouble on WSL2. The only modification we had to make was to change the calls for python in the sh files. We replace &lt;code&gt;python&lt;/code&gt; with &lt;code&gt;python3&lt;/code&gt;. However, as mentionned in the cide, the experiments were very long to run (several days) and we were not able to run the &lt;code&gt;generate_all_figures.sh&lt;/code&gt; script fully as it made our computers crash. Still, we were able to get some of the figures found in the paper (see below) by launching some scripts separately.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/lambert_davy/dist.png&#34;
  alt=&#34;dist&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/lambert_davy/roc.png&#34;
  alt=&#34;roc_gen&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;Here are two figure generated for the toy 1 dataset, one for the distribution of the scores and one for the ROC curve.&lt;/p&gt;
&lt;h1 id=&#34;section-7&#34;&gt;&lt;h1 style=&#34;font-size: 24px; text-decoration: underline;&#34;&gt;Conclusion&lt;/h1&gt;&lt;/h1&gt;
&lt;p&gt;The paper &amp;ldquo;Learning Fair Scoring Functions: Bipartite Ranking under ROC-based Fairness Constraints&amp;rdquo; underscores the growing importance of fairness in machine learning applications. It shows the limits of AUC-based fairness constraints for their inability to ensure equality between distributions, potentially leading to unfair outcomes. In contrast, ROC-based fairness constraints offer a richer approach by enforcing equality of score distributions between groups, albeit with some performance trade-offs. The paper tests the method on typical fairness datasets, but it is also possible to apply it to reel use cases. &amp;ldquo;A Probabilistic Theory of Supervised Similarity Learning for Pointwise ROC Curve Optimization&amp;rdquo;, for example, explores the possibility to apply ROC-based methods for similarity learning, such as face recognition.&lt;/p&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/lambert-davy/</guid>
      <pubDate>Sat, 23 Mar 2024 19:39:13 +0100</pubDate>
    </item>
    
    <item>
      <title>Label-Free Explainability</title>
      <link>http://localhost:1313/posts/label-free-explainability/</link>
      <description>&lt;h1 style=&#34;font-size: 36px;&#34;&gt;Label-Free Explainability for Unsupervised Models&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 18px;&#34;&gt;Authors: &lt;a href=&#34;https://github.com/Valentinahxu&#34;&gt;Valentina Hu &lt;/a&gt; and  &lt;a href=&#34;https://github.com/selmazrg&#34;&gt; Selma Zarga&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0&#34;&gt;Incentives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Feature Importance &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Example Importance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a blog post about the paper Label-Free Explainability for Unsupervised Models, published by J. Crabbé et al. in 2022 and available &lt;a href=&#34;https://proceedings.mlr.press/v162/crabbe22a/crabbe22a.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;section-0&#34;&gt;Why do we need explainability ?&lt;/h2&gt;
&lt;p&gt;Machine learning models are becoming increasingly capable of making advanced predictions. While models like linear regression are relatively easy to understand and explain, more complex models, often called &lt;strong&gt;&amp;ldquo;black boxes&amp;rdquo;&lt;/strong&gt; due to their complexity, present challenges in explaining how they make predictions. These models can be problematic in highstakes applications such as healthcare, finance, and justice, where it&amp;rsquo;s crucial to justify decision-making. Additionally, in case of errors, it&amp;rsquo;s important to understand the origin in order to address and correct them.&lt;/p&gt;
&lt;center&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;Explainability is the cornerstone of trust in black box models; without it, they remain inscrutable and unreliable.&lt;/strong&gt;&amp;rdquo; - &lt;em&gt;Yoshua Bengio&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;To tackle this challenge, the field of Explainable Artificial Intelligence (XAI) has emerged, offering various methods to enhance &lt;strong&gt;model transparency&lt;/strong&gt;. &lt;strong&gt;Post-Hoc explainability&lt;/strong&gt; methods exist, which intervene after the model has generated its results, enabling users to comprehend the reasoning behind specific decisions or predictions. These methods supplement the predictions of black box models with diverse explanations of how they arrive at their predictions.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/explainability/Black-Box.png&#34;
  alt=&#34;XAI explainability&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;I. Introduction&lt;/h2&gt;
&lt;p&gt;The entire post focuses on the quest for explainability of unsupervised models. In these models, no labels are assigned to the data, making understanding the model even more complicated due to the absence of explicit guidance on what the model is learning. In the supervised setting, users know the meaning of the black-box output they are trying to interpret. However, this clarity is not always available in machine learning. Therefore, elucidating concepts such as feature importance and example importance provides insights into why the model makes certain decisions or identifies specific patterns in the data.&lt;/p&gt;
&lt;p&gt;A recent research conducted by Crabbé and van der Schaar in 2022 explores the explainability of unsupervised models. They have developed two new methods to explain these complex models without labels. The first method highlights important features in the data, while the second identifies training examples that have the biggest impact on the model&amp;rsquo;s construction of representations. In this post, we will attempt to explain these two methods.&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;II. Feature Importance&lt;/h2&gt;
&lt;p&gt;Feature importance aims to explain how the model arrives at its prediction for a given input by assigning an  importance scores to each feature (or attribute) of the input. This helps understand which features have the most influence on the model&amp;rsquo;s predictions. This method is developed based on a linear reasoning that is extended to label-free settings.&lt;/p&gt;
&lt;p&gt;Given a model $( f : \mathcal{X} \rightarrow \mathcal{Y} )$, which maps an input space $( \mathcal{X} \subset \mathbb{R}^{d_X} )$ to an output space $( \mathcal{Y} \subset \mathbb{R}^{d_Y} )$. Where, $( d_X )$ and $( d_Y )$ is the dimensions of the input and output spaces.&lt;/p&gt;
&lt;p&gt;In the traditionnal method, the process requires selecting one component $( f_j(x) )$ of the model&amp;rsquo;s output to compute the importance score for each feature $( i )$, denoted as $( a_i(f, x) )$. The selection is based on the ground-truth label, and $( j )$ corresponds to the class predicted with the highest probability.&lt;/p&gt;
&lt;p&gt;To understand how the label-free feature importance method works, let&amp;rsquo;s start by looking at the labeled case:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Labelled Feature Importance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Authors introduces an alternative approach to calculate feature importance scores. The method proposes to combine the importance scores of different components of the model&amp;rsquo;s output by weighting them with the associated class probabilities. For each component of the model&amp;rsquo;s output, we multiply the importance score of the corresponding feature by the probability of that component.&lt;/p&gt;
&lt;p&gt;These weighted importance scores are then combined to obtain the final importance score of each feature.&lt;/p&gt;
&lt;p&gt;Let $a_i(f_j;x)$ be the importance score of feature $x_i$ calculated with respect to the component $f_j$ of the model&amp;rsquo;s output. The method proposes to calculate the importance score $b_i(f;x)$ for feature $x_i$ as follows:&lt;/p&gt;
&lt;p&gt;$b_i(f;x) = \sum_{j=1}^{d_Y} f_j(x) \times a_i(f_j,x)$&lt;/p&gt;
&lt;p&gt;Here, $f_j(x)$ represents the probability of class $j$, and $a_i(f_j;x)$ is the importance score of feature $x_i$ for class $j$.&lt;/p&gt;
&lt;p&gt;Hovewer when the class probabilities are balanced, this method accounts for the contribution of each class to the feature importance score, rather than focusing only on the class with the highest probability, which is the usual practice.&lt;/p&gt;
&lt;p&gt;This method proves to be efficient predominantly when the significance scores exhibit linearity in relation to the model. To facilitate a streamlined computation of weighted importance scores, another method is to introduce an auxiliary function, denoted as $(g_x)$ :&lt;/p&gt;
&lt;p&gt;$\ g_x(z) = \sum_{j=1}^{d_Y} f_j(x) \cdot f_j(z) $&lt;/p&gt;
&lt;p&gt;With the function $(g_x)$, it becomes feasible to calculate the weighted importance score, $(b_i(f, x))$, for each feature $(i)$, by merely employing $(g_x)$. This technique significantly simplifies the computational process, obviating the need to calculate $(d_Y \times d_X)$ importance scores. Such a calculation becomes impractically cumbersome with the escalation of the number of classes, $(d_Y)$. With this trick, we can compute the weighted importance score by only calling the auxiliary function.&lt;/p&gt;
&lt;p&gt;We can see that in the labeled case, the method is quite clear. A similar reasoning is used in the label-free setting. Now, let&amp;rsquo;s move on to the label-free setting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Label-Free Feature Importance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the context of the unlabelled setting, we consider a latent space $H$ of dimension $d_H$ where a black-box model $f : X \rightarrow H$ is given. The goal is to assign an importance score to each feature of the input $x$, even if the dimensions of the latent space have no clear relations with the labels.&lt;/p&gt;
&lt;p&gt;A similar weighting formula for importance scores is used, where the components $f_j(x)$ do not correspond to probabilities but to neuron activations. The weighted sum is considered as a inner product in the latent space.&lt;/p&gt;
&lt;p&gt;The method is developed using linear feature importance functions, and it retains the completeness property, meaning that the sum of importance scores equals the black-box prediction up to a baseline constant.&lt;/p&gt;
&lt;p&gt;Here is how the method operates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Presentation of the Latent Space:&lt;/strong&gt; We consider a latent space $H$ of dimension $d_H$ where each input $x$ is mapped by the black-box model $f$ to obtain a representation $h = f(x)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assignment of Importance Scores:&lt;/strong&gt; The objective is to assign an importance score $b_i(f; x)$ to each feature $x_i$ of $x$. Unlike in the previous setting, where we had probabilities associated with each component, here, we do not have a clear method to choose a particular component $f_j$ in the latent space. Therefore, we use a similar approach to the one described previously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Calculation of Importance Scores:&lt;/strong&gt; We use a weighting method where the importance score is given by $b_i(f; x) = a_i(\sum_{j=1}^{d_H} f_j(x) \cdot f_j(x))$. The individual components $f_j(x)$ do not correspond to probabilities in this case; they generally correspond to neuron activation functions. Inactive neurons will have a corresponding component that vanishes ($f_j(x) = 0$), meaning they will not contribute to the weighted sum, while more activated neurons will contribute more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Completeness:&lt;/strong&gt; An important property shared by many feature importance methods is completeness. This means that the sum of importance scores equals the black-box prediction up to a baseline constant. This establishes a connection between importance scores and black-box predictions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This method proposes an extension of linear feature importance methods to the unlabelled setting by defining an auxiliary scalar function $g_x$ that encapsulates the black-box function $f$. This extension is achieved by using a function $g_x$ that computes the inner product between the representation $f(x)$ and the representation $f(\tilde{x})$ for all $\tilde{x}$ in the input space.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;III. Example Importance&lt;/h2&gt;
&lt;p&gt;In this section, we explain the approach to extending example importance methods to the label-free setting. Given that example importance methods vary significantly, they are separated into two families: loss-based and representation-based methods. The extension to the label-free setting differs for these two families, so we discuss them separately in distinct subsections.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Loss-Based Example Importance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supervised Setting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In supervised learning, loss-based example importance methods determine how important each training example is by assessing the impact of its removal on the model&amp;rsquo;s performance on test data. This is measured by the change in the loss function, which quantifies how well the model&amp;rsquo;s predictions match the true data.&lt;/p&gt;
&lt;p&gt;Mathematically, let $z$ represent the data of an example required to evaluate the loss, typically corresponding to a pair $(x, y)$ in supervised settings. The loss function $L(z; \theta)$ is optimized over a parameter space $\Theta$ to train the model. When an example $z_n$ is removed from the training set $D_{\text{train}}$, it results in a parameter shift $\theta_n - \theta&amp;rsquo;_{-n}$, impacting the loss $L(z; \theta&amp;rsquo;)$ on a test example $z$. This loss shift provides a meaningful measure of example importance.&lt;/p&gt;
&lt;p&gt;To estimate the loss shift without retraining the model, methods like the influence function and checkpoint evaluation are employed. For example, Koh &amp;amp; Liang (2017) propose using the influence function:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Influence Function Formula&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;\begin{equation} \langle
\delta_{\theta}^{n} L(z; \theta&amp;rsquo;) \approx \frac{1}{N} \langle {\nabla L(z; \theta_{*})}, H^{-1} {\nabla L(z_{n}; \theta_{*}&amp;rsquo;)} \rangle_{\theta} &lt;br&gt;
\end{equation}&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$( \nabla_{\theta} L(z, \theta^*) )$ is the gradient of the loss with respect to the parameters for the test example.&lt;/li&gt;
&lt;li&gt;$( H_{\theta^*} )$ is the Hessian matrix.&lt;/li&gt;
&lt;li&gt;$( \nabla_{\theta} L(z^n, \theta^*) )$ is the gradient of the loss for the removed training example.&lt;/li&gt;
&lt;li&gt;$( \langle \cdot, \cdot \rangle_{\theta} )$ denotes the inner product in the parameter space.&lt;/li&gt;
&lt;li&gt;$( N )$ is the number of training examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Label-Free Setting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a label-free setting, the models are trained without explicit labels. Instead, they use a label-free loss function, which typically tries to capture the structure of the data itself rather than fitting to specific target labels.&lt;/p&gt;
&lt;p&gt;In the context of autoencoders, determining the importance of a training example can be tricky due to the loss function used during training (uses the encoder and decoder). When we are only interested in the encoder part and it is not sufficient to only use the model&amp;rsquo;s loss function as this also include the influence of the decoder.&lt;/p&gt;
&lt;p&gt;To address this, we decompose the parameter space into relevant and irrelevant components. The proposed method computes the example importance scores by considering only the relevant parameters. The model to interpret, denoted as $f_r$, is parametrized only by the relevant parameters $\theta_r$.&lt;/p&gt;
&lt;p&gt;This motivates the definition of Label-Free Loss-Based Example Importance:&lt;/p&gt;
&lt;p&gt;\begin{equation}
c_n(f_r; x) = \theta_n L(x; \theta&amp;rsquo;)
\end{equation}&lt;/p&gt;
&lt;p&gt;Label-Free Loss-Based Example Importance score $( c_n(f_{\theta_r}, x) )$ measures the impact of removing a training example $( x_n )$ from the training set on the learned latent representation $( f_{\theta_r}(x) )$ of a test example $( x )$. It uses $( \delta_{\theta_r} L )$ to denote the part of the loss shift that is only due to changes in the relevant parameters $(( \theta_r ))$.&lt;/p&gt;
&lt;p&gt;This definition extends any loss-based example importance method to the label-free setting, where the unsupervised loss $L$ is used to fit the model, and the gradients with respect to the parameters of the encoder are computed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Representation-Based Example Importance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Representation-based example importance methods analyze the latent representations of examples to assign importance scores.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supervised Setting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These methods quantify the affinity between a test example and the training set examples based on their latent representations. For instance, in a model $f_l \circ f_e: X \rightarrow Y$, where $f_e: X \rightarrow H$ maps inputs to latent representations and $f_l: H \rightarrow Y$ maps representations to labels, representation-based methods reconstruct the test example&amp;rsquo;s latent representation using training representations. The reconstruction involves assigning weights to training representations, typically based on nearest neighbors or learned weights. For example, using a kernel function $\mathcal{K}$:&lt;/p&gt;
&lt;p&gt;\begin{equation}
w_n(x) = \frac{1}{|KNN(x)|} \sum_{n&amp;rsquo; \in KNN(x)} \mathcal{K}(\text{fe}(x_n), \text{fe}(x))
\end{equation}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Label-Free Setting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rrepresentation-based methods remain valid by replacing supervised representation maps with unsupervised ones. Hence, no additional modifications are needed.&lt;/p&gt;
&lt;h2 id=&#34;section-5&#34;&gt;IV. Experiments: Evaluation and Results&lt;/h2&gt;
&lt;h3 id=&#34;section-111&#34;&gt;Consistency Checks&lt;/h3&gt;
&lt;p&gt;Now, we are verifying the consistency of results obtained from different methods of assessing feature and example importance using the MNIST dataset.&lt;/p&gt;
&lt;p&gt;In MNIST, important features are the pixels of the images, and various methods can be employed to evaluate their importance. To assess feature importance, we can measure the impact of selectively removing the most important pixels on the latent representation constructed by the encoder, as described in the previous example. By comparing the results of different methods of importance assessment, such as perturbing the most important pixels according to various importance measures, we can check if the same pixels are identified as important and if their removal consistently affects the latent representation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We rerun the tests provided in the &lt;a href=&#34;https://github.com/JonathanCrabbe/Label-Free-XAI&#34;&gt;GitHub repository&lt;/a&gt;:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;On the MNIST dataset, we perturb the most important pixels and observe how this perturbation affects the quality or relevance of the latent representation generated by the encoder.
Here we can see the result of the experiment :&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/explainability/mnist_consistency_features.png&#34;
  alt=&#34;XAI explainability&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;The results obtained from the representation shift curves as a function of the percentage of perturbed pixels demonstrate the effectiveness of Feature Importance methods on the MNIST dataset.&lt;/p&gt;
&lt;p&gt;We observe that Feature Importance methods such as Gradient Shap and Integrated Gradients show a significant increase in representation shift when the most important pixels are perturbed. This indicates that these methods successfully identify the most relevant pixels for constructing the latent representation. However, after perturbing approximately 20% of the most important pixels, we notice a stabilization of the representation shift, suggesting that adding additional perturbations does not necessarily lead to a significant increase in impact on the latent representation.&lt;/p&gt;
&lt;p&gt;On the other hand, the Saliency method appears to be less effective, with an almost linear representation shift curve, suggesting that it fails to selectively identify the most important pixels for the latent representation.&lt;/p&gt;
&lt;p&gt;Overall, this confirms the effectiveness of Feature Importance methods, particularly Integrated Gradients.&lt;/p&gt;
&lt;p&gt;Similarly, to evaluate the importance of examples in MNIST, we select training examples that have a significant influence on predicting the latent representation of test examples. By comparing the results obtained with different methods of assessing example importance, we can verify if the same examples are identified as important and if their relevance is consistent with the model&amp;rsquo;s predictions.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/explainability/example.png&#34;
  alt=&#34;XAI explainability&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;For all example importance methods, we observe a decrease in similarity rates, with a consistent trend across all curves.&lt;/p&gt;
&lt;p&gt;This observation highlights that the similarity rate is significantly higher among the most similar examples compared to the least similar examples, confirming the effectiveness of label-free importance scores cn(fe; x) in identifying training examples related to the test example we wish to explain.&lt;/p&gt;
&lt;p&gt;In summary, these results affirm the capability of label-free importance scores in effectively selecting relevant training examples and distinguishing between similar and dissimilar examples.&lt;/p&gt;
&lt;h2 id=&#34;section-6&#34;&gt;V. Conclusion&lt;/h2&gt;
&lt;p&gt;In this post you learned about label-free explainability a new framework developped by Crabbé and van der Schaar in 2022, wich extend linear feature importance and example importance
methods to the unsupervised setting with a focus on the MNIST dataset.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crabbé, J. &amp;amp; van der Schaar, M.. (2022). Label-Free Explainability for Unsupervised Models. &lt;i&gt;Proceedings of the 39th International Conference on Machine Learning&lt;/i&gt;, in &lt;i&gt;Proceedings of Machine Learning Research&lt;/i&gt; 162:4391-4420 Available from &lt;a href=&#34;https://proceedings.mlr.press/v162/crabbe22a.html&#34;&gt;https://proceedings.mlr.press/v162/crabbe22a.html&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;style&gt;
.highlight {
  background-color: red;
}
.highlight-on-hover:hover {
        background-color: yellow;
    }
/* Quiz form styles */
.quiz-form {
        max-width: 500px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
}

.quiz-question {
        margin-bottom: 20px;
}

.quiz-options label {
        display: block;
        margin-bottom: 10px;
}

.quiz-submit {
        background-color: #4caf50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
}

.quiz-submit:hover {
        background-color: #45a049;
}

/* Quiz results styles */
.quiz-results {
        margin-top: 20px;
        font-weight: bold;
}
.quiz-options label {
        display: block;
        margin-bottom: 10px;
    }
.quiz-options label.correct {
        color: green;
}
.quiz-options label.incorrect {
        color: red;
}
a[name]:hover {
        background-color: yellow; /* Change to the same color as normal state to maintain yellow highlight */
        text-decoration: none; /* Optionally remove underline on hover */
}
&lt;/style&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/label-free-explainability/</guid>
      <pubDate>Sun, 17 Mar 2024 15:31:34 +0100</pubDate>
    </item>
    
    <item>
      <title>Adversarially Reweighted Learning</title>
      <link>http://localhost:1313/posts/adversarially_reweighted_learning/</link>
      <description>&lt;h1 style=&#34;font-size: 36px;&#34;&gt;Fairness without Demographics through Adversarially Reweighted Learning&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 24px;&#34;&gt;Authors: Pierre Fihey &amp; Guerlain Messin&lt;/h1&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0&#34;&gt;Fairness issues in ML and AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;The privacy of demographic’s data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;The Adversarial Reweighted Learning Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;An Hypothesis: Protected Groups are Correlated with Both Features and Labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Computational identifiability of protected groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;The Rawlsian Max-Min Fairness principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;The ARL objective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-7&#34;&gt;The Model Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-8&#34;&gt;Results analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-9&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a blog post about the paper Fairness without Demographics through Adversarially Reweighted Learning, published by P. Lahoti et al. in 2020 and available &lt;a href=&#34;https://dl.acm.org/doi/abs/10.5555/3495724.3495786&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;section-0&#34;&gt;Fairness issues in ML and AI&lt;/h2&gt;
&lt;p&gt;As Machine Learning and Artificial Intelligence algorithms are increasingly developed to aid and automate decision-making, it is crucial that they provide ethical, fair and discrimination-free results. However, discriminative biases are now found in many facets of AI and ML and affect many possible applications.&lt;/p&gt;
&lt;p&gt;Such biases can be found in NLP applications, where we can see that generative AIs often associate certain genders or ethnic groups with professions. In computer vision, the lack of diversity in the training data also induces numerous discriminatory biases, since we can see that the algorithms&amp;rsquo; performances differ according to age, gender and ethnic group, which can lead to unfair treatments.
Machine Learning models, used in decision-making processes from loan approvals to job applications, can inherit historical biases present in their training data, resulting in unfair outcomes.&lt;/p&gt;
&lt;p&gt;The root of these biases lies in the historical prejudices and inequalities that are inadvertently encoded into the datasets used to train AI and ML models. These datasets often reflect the societal, cultural, and institutional biases that have existed over time. As a result, when AI and ML technologies are trained on such data, they risk mirroring and amplifying these biases instead of offering neutral, objective outputs. It is therefore vital to focus on AI fairness to enable the development of technologies that will benefit everyone fairly and equitably.&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;The privacy of demographic’s data&lt;/h2&gt;
&lt;p&gt;Strict regulations established by laws such as the General Data Protection Regulation (GDPR) severely restrict the collection of demographic data, including age, gender, religion and other personal attributes. This legal framework, designed to protect individual privacy and data rights, poses a problem for the study of discriminatory bias in algorithms, since it becomes almost impossible to measure. This situation creates a real paradox, since protecting personal data conflicts with limiting discrimination and promoting fairness for ML and iA algorithms.&lt;/p&gt;
&lt;p&gt;In this blog, we&amp;rsquo;ll look at the paper Fairness without Demographics through Adversarially Reweighted Learning, published by Google&amp;rsquo;s 2020 research team to propose a method for improving the fairness of AI models despite the lack of demographic data. Indeed, while much previous works have focused on improving fairness in AI and ML, most of these works assume that models have access to this protected data. Given the observations made above, the problem this paper attempts to address is as follows: How can we train a ML model to improve fairness when we do not have access to protected features neither at training nor inference time, i.e., we do not know protected group memberships?&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;The Adversarial Reweighted Learning Model&lt;/h2&gt;
&lt;h3 id=&#34;section-3&#34;&gt;An Hypothesis: Protected Groups are Correlated with Both Features and Labels&lt;/h3&gt;
&lt;p&gt;While access to the protected features is often impossible, the authors of this paper assume that there is a strong correlation between these variables and the observable features X as well as the class labels Y. Although these correlations are the cause of the fairness problems faced by ML algorithms, they represent a real advantage here, as they can help to identify these protected groups and thus to evaluate and correct possible discrimination biases.&lt;/p&gt;
&lt;p&gt;The authors have shown that this hypothesis is frequently verified. For example, they were able to predict the race and gender of individuals in the Adults and LSAC Datasets with high accuracy from unprotected features and labels.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Fihey_Messin/Identifying_Groups.png&#34;
  alt=&#34;Identifying Groups&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;This assumption therefore implies that protected groups can be computationally identifiable. It is on this notion of computational identifiability that the model proposed by Google&amp;rsquo;s research team is based to outperform previous work.&lt;/p&gt;
&lt;h3 id=&#34;section-4&#34;&gt;Computational identifiability of protected groups&lt;/h3&gt;
&lt;p&gt;Computational identifiability refers to the ability to algorithmically identify specific subgroups or patterns within a dataset based on certain criteria, using computable functions. Mathematically, this notion is defined as follows:&lt;/p&gt;
&lt;p&gt;For a family of binary functions $F$, we say that a subgroup $S$ is computationally-identifiable if there is a function $f : X \times Y \rightarrow \text{{0, 1}}$ in $F$ such that $f(x, y) = 1$ if and only if $(x, y) \in S$.&lt;/p&gt;
&lt;p&gt;This function typically maps input data to a binary outcome, indicating protected subgroup membership. While many previous works have used this principle of computational identifiability, the model presented in this article differs in that it does not require these subgroups to be present in the input space, but also in its objective. While most work has focused on reducing the efficiency gap between each subgroup, the ARL model aims to increase efficiency for these subgroups, while considering that this should not be at the expense of the other groups. Indeed, the authors have decided to follow the Rawlsian Max Min fairness principle, which we present below.&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34;&gt;The Rawlsian Max-Min Fairness principle&lt;/h3&gt;
&lt;p&gt;In philosophy, the Rawlsian Max Min principle of distributive justice is defined by John Rawls as maximizing the welfare of the most disadvantaged member of society. In a mathematical context, this can be translated as maximizing the minimum utility U a model has across all groups s ∈ S. We adopt the following definition:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition (Rawslan Max-Min Fairness):&lt;/strong&gt; Suppose $H$ is a set of hypotheses, and $U_{D_s}(h)$ is the expected utility of the hypothesis $h$ for the individuals in group $s$, then a hypothesis $h^* $ is said to satisfy Rawlsian Max-Min fairness principle if it maximizes the utility of the worst-off group, i.e., the group with the lowest utility.
$$h^* = argmax_{h \in H} min_{s \in S} U_{D_s}(h)$$&lt;/p&gt;
&lt;p&gt;The Maxmin Rawlsian principle inherently accepts the existence of inequalities, as its core aim is not to ensure uniform outcomes across all groups but rather to maximize the overall utility, particularly focusing on enhancing the welfare of the least advantaged.  This is what will enable our model to obtain truly relevant results, and we&amp;rsquo;ll now see how it adapts this principle to define a loss function to be minimized during training.&lt;/p&gt;
&lt;h3 id=&#34;section-6&#34;&gt;The ARL objective&lt;/h3&gt;
&lt;p&gt;To adapt this Rawlsian principle to a Machine Learning task, the authors decided to set up a MinMax Problem. A minmax algorithm is a mathematical problem defined in game theory. Its aim is to optimize the worst possible scenario for a player, assuming that the opponent plays optimally.
The aim is now to minimize the highest loss, i.e. the loss of the most disadvantaged protected group. This new objective function is defined as follows:&lt;/p&gt;
&lt;p&gt;$$J(\theta, \lambda) := min_{\theta} max_{\lambda} \sum_{s \in S} \lambda_s L_{D_s}(h)$$
$$= min_{\theta} max_{\lambda} \sum_{i=0}^{n} \lambda_{s_i} l(h(x_i), y_i)$$&lt;/p&gt;
&lt;p&gt;With $l(.,.)$ the cross-entropy loss and lambda the weights that maximize the weighted loss of protected groups. To solve this minmax problem, the authors set up a special architecture consisting of two neural networks, a learner and an adversary.&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34;&gt;The Model Architecture&lt;/h3&gt;
&lt;p&gt;As previously announced, the authors therefore decided to implement the Adversarial Reweighted Learning (ARL) approach, training two models alternately.&lt;/p&gt;
&lt;p&gt;The learner optimizes for the main classification task, and aims to learn the best parameters θ that minimizes expected loss.&lt;/p&gt;
&lt;p&gt;The adversary learns a function mapping $f_\phi : X \times Y \rightarrow [0, 1]$ to computationally-identifiable regions with high loss, and makes an adversarial assignment of weight vector $\lambda_\phi : f_\phi \rightarrow \mathbb{R}$ so as to maximize the expected loss.&lt;/p&gt;
&lt;p&gt;The learner then adjusts itself to minimize the adversarial loss:
$$J(\theta, \phi) = min_{\theta} max_{\phi} \sum_{i=1}^{n} \lambda_{\phi}(x_i, y_i) \cdot l_{ce}(h_\theta(x_i), y_i)$$&lt;/p&gt;
&lt;p&gt;To ensure that the loss function is well defined, it&amp;rsquo;s crucial to introduce specific constraints on the weights used in the loss function. Ensuring these weights are non-negative, prevent zero values to include all training examples, and are normalized, addresses potential instability and promotes uniform contribution across the dataset.&lt;/p&gt;
&lt;p&gt;$$\lambda_{\phi}(x_i, y_i) = 1 + n \cdot \frac{f_{\phi}(x_i, y_i)}{\sum_{i=1}^{n} f_{\phi}(x_i, y_i)}$$&lt;/p&gt;
&lt;p&gt;The authors have implemented these two networks using standard feed-forward network. The learner is a fully connected two-layer feed-forward network with 64 and 32 hidden units in the hidden layers, with ReLU activation function. For small datasets, the adversary which performs the best is a linear model.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Fihey_Messin/ARL_Computational_Graph.png&#34;
  alt=&#34;ARL Computational Graph&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;h2 id=&#34;section-8&#34;&gt;Results analysis&lt;/h2&gt;
&lt;p&gt;This section provides a detailed examination of the results obtained from our implementation of the Adversarial Reweighted Learning (ARL) model. We replicate the experiments conducted by Lahoti et al. and present the outcomes of our implementation. Furthermore, we analyze the significance of the results through a comprehensive evaluation.&lt;/p&gt;
&lt;h3 id=&#34;reproducibility&#34;&gt;Reproducibility&lt;/h3&gt;
&lt;p&gt;We first reproduce the results reported by Lahoti et al. using their TensorFlow implementation. However, due to the absence of optimal hyperparameters, we utilize default parameters for our runs. As a result, our AUC scores are lower than those reported in the original paper. For instance, the average AUC for the Adult dataset in Lahoti et al.&amp;rsquo;s work is 0.907, whereas our run yields an AUC of 0.497. Similarly, for the LSAC dataset, Lahoti et al. report an AUC of 0.823, whereas we obtain 0.518. The COMPAS dataset also exhibits a similar trend, with Lahoti et al. reporting an AUC of 0.748, compared to our result of 0.536. Subsequent experimentation with optimal parameters from TensorFlow implementation demonstrates improved performance, although AUC scores remain lower than those presented in the original paper.&lt;/p&gt;
&lt;h3 id=&#34;replicability&#34;&gt;Replicability&lt;/h3&gt;
&lt;p&gt;We replicate the experiments using our PyTorch implementation of the ARL model with optimal hyperparameters obtained through grid-search. Comparing the AUC scores with Lahoti et al.&amp;rsquo;s results reveals close alignment for the Adult and LSAC datasets. However, a slightly larger difference is observed for the COMPAS dataset. Notably, all AUC metrics for the COMPAS dataset are lower than the baseline model presented by Lahoti et al. This discrepancy suggests potential challenges with dataset size, leading to increased variance in results. Nonetheless, our PyTorch implementation demonstrates consistency with Lahoti et al.&amp;rsquo;s findings, highlighting the robustness of the ARL model across different implementations.&lt;/p&gt;
&lt;h3 id=&#34;significance-evaluation&#34;&gt;Significance Evaluation&lt;/h3&gt;
&lt;p&gt;We conduct significance tests to evaluate the performance improvement of our PyTorch-implemented ARL model compared to a simple baseline model. Despite observing notable improvements in fairness metrics, none of the p-values obtained are less than 0.05. Consequently, according to established significance criteria, the performance enhancement achieved by our ARL model is not statistically significant. This finding underscores the need for further investigation into the efficacy of adversarial learning methods in enhancing fairness without demographic information.&lt;/p&gt;
&lt;h2 id=&#34;section-9&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this study, we critically examined the paper &amp;ldquo;Fairness without Demographics through Adversarially Reweighted Learning&amp;rdquo; by Lahoti et al., focusing on reproducibility, replicability, and the significance of reported results. While encountering challenges in reproducing Lahoti et al.&amp;rsquo;s results due to parameter settings and dataset characteristics, we successfully replicated the experiments using our PyTorch implementation. Despite demonstrating consistency with the original findings, our significance tests indicate a lack of statistical significance in the performance improvement achieved by the ARL model. This prompts further inquiry into the suitability of adversarial learning approaches for addressing fairness concerns in machine learning without relying on demographic data.&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;annexes&#34;&gt;Annexes&lt;/h2&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;p&gt;[1] Lahoti, P., Beutel, A., Chen, J., Lee, K., Prost, F., Thain, N., Wang, X., &amp;amp; Chi, E. H. (2020). Fairness without demographics through adversarially reweighted learning. arXiv preprint arXiv:2006.13114.&lt;/p&gt;
&lt;p&gt;[2] Veale, M., &amp;amp; Binns, R. (2017). Fairer machine learning in the real world: Mitigating discrimination without collecting sensitive data. Big Data &amp;amp; Society, 4(2), 2053951717743530.&lt;/p&gt;
&lt;p&gt;[3] Hanley, J. A., &amp;amp; McNeil, B. J. (1982). The meaning and use of the area under a receiver operating characteristic (ROC) curve. Radiology, 143(1), 29-36.&lt;/p&gt;
&lt;p&gt;[4] Hanley, J. A., &amp;amp; McNeil, B. J. (1983). A method of comparing the areas under receiver operating characteristic curves derived from the same cases. Radiology, 148(3), 839-843.&lt;/p&gt;
&lt;p&gt;[5] Dua, D., &amp;amp; Graff, C. (2019). UCI machine learning repository.&lt;/p&gt;
&lt;p&gt;[6] Kim, M. P., Ghorbani, A., &amp;amp; Zou, J. (2019). Multiaccuracy: Black-box post-processing for fairness in classification. In Proceedings of the 2019 AAAI/ACM Conference on AI, Ethics, and Society (pp. 247-254).&lt;/p&gt;
&lt;p&gt;[7] Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., &amp;hellip; &amp;amp; Bengio, Y. (2014). Generative adversarial nets. Advances in neural information processing systems, 27, 2672-2680.&lt;/p&gt;
&lt;p&gt;[8] Paszke, A., Gross, S., Massa, F., Lerer, A., Bradbury, J., Chanan, G., &amp;hellip; &amp;amp; Chintala, S. (2019). PyTorch: An imperative style, high-performance deep learning library. In Advances in Neural Information Processing Systems 32 (pp. 8024-8035).&lt;/p&gt;
&lt;p&gt;[9] Kamishima, T., Akaho, S., &amp;amp; Sakuma, J. (2011). Fairness-aware learning through regularization approach. In 2011 IEEE 11th International Conference on Data Mining Workshops (pp. 643-650). IEEE.&lt;/p&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/adversarially_reweighted_learning/</guid>
      <pubDate>Mon, 04 Mar 2024 18:35:12 +0100</pubDate>
    </item>
    
    <item>
      <title>Packed Ensembles</title>
      <link>http://localhost:1313/posts/packed-ensembles/</link>
      <description>&lt;script
type=&#34;text/x-mathjax-config&#34;&gt;

MathJax.Hub.Config({

    tex2jax: {

        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],

        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry

    }

});

MathJax.Hub.Queue(function() {

    var all = MathJax.Hub.getAllJax(), i;

    for(i = 0; i &lt; all.length; i += 1) {

        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;

    }

});

&lt;/script&gt;
&lt;script
type=&#34;text/javascript&#34;
src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
This is a blog post about the paper Packed-Ensembles for Efficient Uncertainty Estimation, published by O. Laurent et al. in 2023 and available [here](https://openreview.net/pdf?id=XXTyv1zD9zD).
&lt;h3 id=&#34;authors-cynthia-obeid-and-elie-nakad&#34;&gt;&lt;strong&gt;Authors&lt;/strong&gt;: Cynthia Obeid and Elie Nakad&lt;/h3&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;/div&gt;
The document &#34;Packed-Ensembles for Efficient Uncertainty Estimation&#34; introduces a novel framework for designing and training compact, structured ensembles of neural networks, termed Packed-Ensembles (PE). It addresses the limitations of Deep Ensembles (DE) in terms of computational efficiency and hardware constraints by leveraging grouped convolutions. This technique allows for parallelizing the ensemble into a single shared backbone, improving training and inference speeds within the memory limits of standard neural networks. The paper demonstrates through extensive experiments that PEs maintain the beneficial properties of DEs, such as diversity and robustness to distribution shift, while achieving comparable accuracy, calibration, and out-of-distribution detection capabilities. The work includes implementation details, experimental results on CIFAR-10/100 and ImageNet datasets and comparisons with existing approaches. It concludes with insights on the reproducibility of results and the potential ethical considerations of deploying such models in safety-critical systems.
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;h1&gt;Presentation of the model&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Packed-Ensembles&lt;/strong&gt;&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/fig1.jpg&#34; alt=&#34;The base network and Packed-Ensembles&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;The base network and Packed-Ensembles&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Packed-Ensembles (PE) is a technique for designing and training lightweight ensembles of neural networks. It is based on the idea of using grouped convolutions to create multiple subnetworks within a single network. These subnetworks are trained independently, which helps to improve the efficiency of the ensemble.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Benefits of Packed-Ensembles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Packed-Ensembles offer several benefits over traditional ensemble methods, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt; Packed-Ensembles are more efficient than traditional ensembles in terms of memory usage and training time. This is because they use grouped convolutions to share parameters between the subnetworks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accuracy:&lt;/strong&gt; Packed-Ensembles can achieve accuracy levels that are comparable to traditional ensembles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Calibration:&lt;/strong&gt; Packed-Ensembles are well-calibrated, meaning that their predicted probabilities are accurate reflections of the true probabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Out-of-distribution (OOD) detection:&lt;/strong&gt; Packed-Ensembles are good at detecting out-of-distribution data, which is data that comes from a different distribution than the data that the model was trained on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Comparison to other ensemble methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The paper compares Packed-Ensembles to several other ensemble methods, including Deep Ensembles, BatchEnsemble, MIMO, and Masksembles. The paper found that Packed-Ensembles are more efficient than all of these methods, and they achieve comparable accuracy on most tasks.&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;h1&gt;Packed-Ensembles: A Technique for Efficient Neural Network Ensembles&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;Packed-Ensembles (PE) is a method for designing and training lightweight ensembles of neural networks. It aims to improve efficiency while maintaining accuracy and other desirable properties. This technique achieves this by leveraging grouped convolutions to create multiple subnetworks within a single network, enabling them to be trained independently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understanding Convolutional Layers and Grouped Convolutions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Convolutional Layers:&lt;/strong&gt; These are the backbone of Convolutional Neural Networks (CNNs), performing filtering operations on input data using learnable filters (kernels). Mathematically, the output of a convolutional layer, denoted by $z_{j+1}$, is calculated as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$z^{(j+1)}(c,:,:) = (h^j \otimes \omega^j)(c,:,:) = \sum_{k=0}^{C_{j}-1} \omega^j(c, k,:,:) \star h^j(k,:,:)$&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$c$&lt;/strong&gt; represents the channel index&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$h^j$&lt;/strong&gt; denotes the input feature map&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$ω^j$&lt;/strong&gt; represents the weight tensor (kernel)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$⋆$&lt;/strong&gt; denotes the 2D cross-correlation operator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Grouped Convolutions:&lt;/strong&gt; This technique allows training multiple subnetworks within a single network by dividing the channels of feature maps and weight tensors into groups. Each group is processed by a separate set of filters, essentially creating &lt;strong&gt;independent subnetworks&lt;/strong&gt;. The mathematical formulation for grouped convolutions is given by:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
z^{(j+1)}(c,:,:) = \left( h^j \otimes \omega^j_{\gamma} \right) (c,:,:) = \sum_{k=0}^{\frac{C_{j}}{\gamma}-1} \omega^j_{\gamma} (c, k,:,:) \star h^j \left( k + \left\lfloor \frac{c}{C_{j+1}/\gamma} \right\rfloor \frac{C_{j}}{\gamma}, :,:\right)
$$&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$γ$&lt;/strong&gt; represents the number of groups&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$C_{j+1}$&lt;/strong&gt; and &lt;strong&gt;$C_j$&lt;/strong&gt; denote the number of output and input channels, respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The formula states that a grouped convolution layer is mathematically equivalent to a standard convolution where the weights are selectively applied using a binary mask &lt;strong&gt;$\text{mask}_{m}^j$&lt;/strong&gt;
&lt;strong&gt;$\in \{{ 0, 1 \}}^{C_{j+1} \times C_j \times s_j^2}$&lt;/strong&gt; with $s_j^2$ the kernel size squared of the layer $j$. Each element in $\text{mask}_{m}^j$ is either 0 or 1.&lt;/p&gt;
&lt;p&gt;The condition &lt;strong&gt;$\text{mask}_{m}^j(k, l, :, :) = 1$&lt;/strong&gt; happens only if $\left\lfloor \frac{l}{C_{j}/\gamma} \right\rfloor = \left\lfloor \frac{k}{C_{j+1}/\gamma} \right\rfloor$ for each group $m \in [|0, \gamma - 1 |]$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complete Mask and Convolution:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;$\text{mask}^j = \sum_{m=0}^{{\gamma}-1}\text{mask}_{m}^j$ : This combines the masks for all groups ($m$) into a single $\text{mask}^j$ for layer $j$.&lt;/li&gt;
&lt;li&gt;$z^{j+1} = h^j \otimes (ω^j ◦ \text{mask}^j)$: This rewrites the grouped convolution operation. Here:
&lt;ul&gt;
&lt;li&gt;$z^{j+1}$: Output feature map of the layer.&lt;/li&gt;
&lt;li&gt;$h^j$: Input feature map.&lt;/li&gt;
&lt;li&gt;$ω^j$: Convolution weights for layer &lt;code&gt;j&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;$\otimes$: Denotes convolution operation.&lt;/li&gt;
&lt;li&gt;$◦$: Denotes Hadamard product (element-wise multiplication).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In simpler terms:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grouped convolution divides the input channels and weights into groups.&lt;/li&gt;
&lt;li&gt;A separate mask is created for each group, ensuring elements within a group are aligned.&lt;/li&gt;
&lt;li&gt;These masks effectively turn specific weights to zero during the convolution, essentially selecting which weights contribute to the output for each group.&lt;/li&gt;
&lt;li&gt;The final convolution is equivalent to applying the original weights element-wise multiplied by the combined mask.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;h1&gt;Background on Deep Ensembles&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;This section delves into Deep Ensembles (DE), a technique for image classification tasks.&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/fig2.png&#34; alt=&#34;Deep Ensembles&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;Deep Ensembles&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting the Scene&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We have a dataset $D$ containing pairs of images and their corresponding labels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$x_i$: Represents an image sample with dimensions $C0 \times H0 \times W0$ (likely referring to color channels, height, and width).&lt;/li&gt;
&lt;li&gt;$y_i$ : One-hot encoded label representing the class of the image ($NC$ total classes).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The dataset is assumed to be drawn from a joint distribution $P(X, Y)$.&lt;/p&gt;
&lt;p&gt;A neural network $f_\theta$ processes the images and predicts their class labels. This network has learnable parameters denoted by $\theta$.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\hat{y}_i = f_θ(xi)$: The predicted class label for image $x_i$ based on the network with parameters $θ$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Traditional Approach:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The model predicts probabilities for each class using a Multinoulli distribution. These probabilities are treated as point estimates, meaning they represent the most likely class without considering uncertainty.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introducing Deep Ensembles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DE works by training multiple Deep Neural Networks (DNNs) $M$ with random initializations. These DNNs are denoted by $θ_m$ for the $m-th$ network ($0$ to $M-1$).&lt;/p&gt;
&lt;p&gt;The ensemble prediction is obtained by averaging the predictions of all $M$ DNNs as shown in the equation below:&lt;/p&gt;
&lt;p&gt;$$
P(y_i|x_i, D) = M^{-1} \sum_{m=0}^{M-1} P(y_i|x_i, \theta_m)
$$&lt;/p&gt;
&lt;p&gt;This essentially combines the outputs of multiple networks to create a more robust prediction.&lt;/p&gt;
&lt;p&gt;In simpler terms, DE trains multiple neural networks with slight variations and combines their predictions to get a more reliable estimate, including the level of uncertainty in the prediction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building Packed-Ensembles:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Packed-Ensembles combine the concepts of Deep Ensembles (ensembles of multiple independent DNNs) and grouped convolutions. Here&amp;rsquo;s how it works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Subnetworks:&lt;/strong&gt; The ensemble is formed by creating &lt;strong&gt;$M$&lt;/strong&gt; smaller subnetworks within the main network architecture. These subnetworks share the same structure but have &lt;strong&gt;independent parameters&lt;/strong&gt; due to the use of grouped convolutions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hyperparameters:&lt;/strong&gt; Packed-Ensembles are defined by three hyperparameters:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$α$ (alpha):&lt;/strong&gt; expansion factor that scales the width of each subnetwork (compensates for the decrease in capacity due to using fewer parameters).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$M$:&lt;/strong&gt; number of subnetworks in the ensemble (represents the ensemble size).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$γ$ (gamma):&lt;/strong&gt; number of groups for grouped convolutions within each subnetwork (introduces another level of sparsity).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mathematical Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The output of a Packed-Ensemble layer is calculated by averaging the predictions from each subnetwork, as shown in the following equation:&lt;/p&gt;
&lt;p&gt;$$
\hat{y} = M^{-1} \sum_{m=0}^{M-1} P(y|\theta_a^m, x) \quad \text{with} \quad \theta_a^m = ({\omega_j^{\alpha} \circ \text{mask}_{m}^j})_j
$$&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$\hat{y}$&lt;/strong&gt; represents the ensemble&amp;rsquo;s predicted label&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$P(y|θ_a^m, x)$&lt;/strong&gt; denotes the probability of class &lt;strong&gt;$y$&lt;/strong&gt; given the input &lt;strong&gt;$x$&lt;/strong&gt; and the parameters &lt;strong&gt;$θ_a^m$&lt;/strong&gt; of the &lt;strong&gt;$m-th$&lt;/strong&gt; subnetwork&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$\theta_a^m = ({\omega_j^{\alpha} \circ \text{mask}_{m}^j})_j$&lt;/strong&gt; represents the parameters of the &lt;strong&gt;$m-th$&lt;/strong&gt; subnetwork, obtained by applying element-wise multiplication (&lt;strong&gt;$∘$&lt;/strong&gt;) between the expanded weights (&lt;strong&gt;$\omega_j^{\alpha}$&lt;/strong&gt;) and the group mask (&lt;strong&gt;$\text{mask}_{m}$&lt;/strong&gt;) for each layer &lt;strong&gt;$j$&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/fig4.png&#34; alt=&#34;Equivalent architectures for Packed-Ensembles&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;Equivalent architectures for Packed-Ensembles&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The authors proposed a method for designing efficient ensemble convolutional layers using grouped convolutions. This approach exploits the parallelization capabilities of GPUs to accelerate training and inference. The sequential training architecture is replaced with parallel implementations, as shown in the part b and c of the figure above. This figure summarizes equivalent architectures for a simple ensemble of M=3 neural networks with three convolutional layers and a final dense layer. In these implementations, feature maps are stacked on the channel dimension (denoted as rearrange operation). This results in a feature map of size M × Cj × Hj × Wj, regrouped by batches of size B × M, where B is the batch size of the ensemble. To maintain the original batch size, the batch is repeated M times after rearrangement. Grouped convolutions with M groups and γ subgroups per subnetwork are employed. Each feature map is processed independently by each subnetwork, resulting in separate outputs. Grouped convolutions are used throughout to ensure gradients remain independent between subnetworks. Other operations, like Batch Normalization, can be applied if they are groupable or act independently on each channel. The figure below illustrates the masks used to encode Packed Ensembles for M=2 and M=2 with γ=2. Finally, implementations (b) and (c) of the figure above are equivalent. A standard convolution can replace the initial steps (rearrangement and first grouped convolution) if all subnetworks receive the same images simultaneously.&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/fig5.png&#34; alt=&#34;subnetwork mask&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;Diagram representation of a subnetwork mask: maskj, with M = 2, j an integer corresponding to a fully connected layer&lt;/i&gt;&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;h1&gt;Experiments&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;The experiment section evaluates the Packed-Ensembles (PE) method on classification tasks. Here are the key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Datasets:&lt;/strong&gt; CIFAR-10, CIFAR-100, and ImageNet are used for various complexity levels.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Architectures:&lt;/strong&gt; PE is compared on ResNet-18, ResNet-50, Wide ResNet-28-10 against Deep Ensembles, BatchEnsemble, MIMO, and Masksembles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metrics:&lt;/strong&gt; Accuracy (%), Negative Log-Likelihood (NLL), Expected Calibration Error (ECE) for calibration, and Areas Under Precision-Recall (AUPR) and ROC (AUC) curves for Out-of-Distribution (OOD) detection are used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementation Details:&lt;/strong&gt; Softmax probabilities from all subnetworks are averaged for prediction. Maximum value of the output vector is considered the class. SVHN dataset is used for OOD detection on CIFAR-10/100. Mutual Information (MI) is used as a criterion for ensemble techniques on ImageNet-O and Texture datasets. ImageNet-R is used to evaluate robustness under distribution shift.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code:&lt;/strong&gt; PyTorch-Lightning framework is used for implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;h1&gt;Results&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;The experiment results show that Packed-Ensembles (PE) achieves similar performance to Deep Ensembles (DE) on classification tasks, but with lower memory usage. Here are the key findings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CIFAR-10/100:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;PE performs similarly or slightly better than DE on OOD detection and classification (especially with larger architectures like ResNet-50 and Wide ResNet).&lt;/li&gt;
&lt;li&gt;Smaller architectures (ResNet-18) might not have enough capacity for PE to perform as well on CIFAR-100.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageNet:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;PE improves uncertainty quantification for OOD detection and distribution shift compared to DE and single models.&lt;/li&gt;
&lt;li&gt;PE achieves better accuracy with a reasonable increase in training and inference cost.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These results suggest that PE is a memory-efficient alternative to DE for tasks requiring good uncertainty estimation.&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/fig3.png&#34; alt=&#34;ResNet50 performance&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;Packed-Ensembles of ResNet50 performance on CIFAR-10 and CIFAR-100&lt;/i&gt;&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;h1&gt;Ethics&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;This section emphasizes the ethical considerations of the research. Here are the key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Goal:&lt;/strong&gt; This research proposes a method to improve uncertainty estimation in deep learning models.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limitations:&lt;/strong&gt; The authors acknowledge limitations, particularly for safety-critical systems (systems where failure can have severe consequences). Even though the method aims to improve reliability, it&amp;rsquo;s not ready for such applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concerns:&lt;/strong&gt; The text mentions limitations explored in the experiments. These limitations highlight the need for further validation and verification before real-world use, especially concerning robustness in various scenarios like:
&lt;ul&gt;
&lt;li&gt;Unknown situations&lt;/li&gt;
&lt;li&gt;Corner cases (uncommon but important situations)&lt;/li&gt;
&lt;li&gt;Adversarial attacks (attempts to intentionally mislead the model)&lt;/li&gt;
&lt;li&gt;Potential biases in the model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overall:&lt;/strong&gt; The authors advocate for responsible use of the method and emphasize the importance of further research before deploying it in safety-critical systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;h1&gt;Reproducibility: Packed-Ensemble on CIFAR-10&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;We attempted to reproduce the experiment outlined in the tutorial available at &lt;a href=&#34;https://torch-uncertainty.github.io/auto_tutorials/tutorial_pe_cifar10.html&#34;&gt;https://torch-uncertainty.github.io/auto_tutorials/tutorial_pe_cifar10.html&lt;/a&gt; which trains a Packed-Ensemble classifier on the CIFAR-10 dataset. The tutorial details a step-by-step approach, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Data Loading and Preprocessing:&lt;/strong&gt; Utilizing torchvision to load the CIFAR-10 dataset and performing normalization on the images.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packed-Ensemble Definition:&lt;/strong&gt; Defining a Packed-Ensemble model with M=4 subnetworks, alpha=2, and gamma=1, built upon a standard convolutional neural network architecture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loss Function and Optimizer:&lt;/strong&gt; Employing Classification Cross-Entropy loss and SGD with momentum for optimization during training.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Training:&lt;/strong&gt; Training the Packed-Ensemble model on the CIFAR-10 training data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing and Evaluation:&lt;/strong&gt; Evaluating the trained Packed-Ensemble on the CIFAR-10 test data, with a focus on uncertainty quantification and OOD (Out-of-Distribution) detection performance.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Experimental Runs and Observations:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Test 1:&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/Result1.png&#34; alt=&#34;First result&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;GroundTruth:  cat   ship  ship  plane&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The predicted labels are: cat   ship  ship  ship&lt;/p&gt;
&lt;p&gt;Test 2:&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/Result2.png&#34; alt=&#34;Second result&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;GroundTruth: dog bird horse bird&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The predicted labels are: dog  frog  car  dog&lt;/p&gt;
&lt;p&gt;Test 3:&lt;/p&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/Result3.png&#34; alt=&#34;Third result&#34; style=&#34;display:block; margin:auto;&#34;&gt;
&lt;/div&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;&lt;i&gt;GroundTruth:  dog truck plane car &lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The predicted labels are: dog  horse ship  truck&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Challenges and Limitations:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A significant limitation of the tutorial is the lack of guidance on evaluating the model&amp;rsquo;s performance. Without a defined evaluation metric (e.g., accuracy, precision, recall), it&amp;rsquo;s challenging to determine the overall effectiveness of the trained Packed-Ensemble. While the provided test results show inconsistencies between ground truth labels and predictions, a quantitative evaluation metric is necessary to draw more concrete conclusions.&lt;/p&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/packed-ensembles/</guid>
      <pubDate>Tue, 27 Feb 2024 15:05:20 +0100</pubDate>
    </item>
    
    <item>
      <title>A Framework to Learn with Interpretation</title>
      <link>http://localhost:1313/posts/a-framework-to-learn-with-interpretation/</link>
      <description>&lt;hr&gt;&lt;/hr&gt;
&lt;style
TYPE=&#34;text/css&#34;&gt;
&lt;p&gt;code.has-jax {font:
inherit;
font-size:
100%;
background:
inherit;
border:
inherit;}&lt;/p&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;script
type=&#34;text/x-mathjax-config&#34;&gt;

MathJax.Hub.Config({

    tex2jax: {

        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],

        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry

    }

});

MathJax.Hub.Queue(function() {

    var all = MathJax.Hub.getAllJax(), i;

    for(i = 0; i &lt; all.length; i += 1) {

        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;

    }

});

&lt;/script&gt;
&lt;script
type=&#34;text/javascript&#34;
src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;h1 style=&#34;font-size: 36px;&#34;&gt;A Framework to Learn with Interpretation&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Authors: Maroun ABOU BOUTROS, Mohamad EL OSMAN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Article: &lt;a href=&#34;https://arxiv.org/abs/2010.09345&#34;&gt;A Framework to Learn with Interpretation&lt;/a&gt; by Jayneel Parekh, Pavlo Mozharovskyi and Florence d’Alché-Buc&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Learning a classifier and an interpreter&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-2.1&#34;&gt;Design of FLINT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2.2&#34;&gt;Interpretation in FLINT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2.3&#34;&gt;Learning by imposing interpretability properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Understanding encoded concepts in FLINT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Reproducing the experiments&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-4.1&#34;&gt;Global interpretation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4.2&#34;&gt;Local interpretation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Subjective evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;Specialization of FLINT to post-hoc interpretability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-7&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;section-1&#34;&gt;1 Introduction&lt;/h1&gt;
&lt;p&gt;In this blog post, we’ll explore FLINT, a framework introduced in the paper titled “A Framework to Learn with Interpretation” by Jayneel Parekh, Pavlo Mozharovskyi and Florence d’Alché-Buc, available on the following &lt;a href=&#34;https://arxiv.org/abs/2010.09345&#34;&gt;link&lt;/a&gt;, addressing the crucial need for interpretability in machine learning as complex predictive models become more prevalent in fields like law, healthcare, and defense. Interpretability, synonymous with explainability, provides insights into a model’s decision-making process. Two main approaches, post-hoc methods and “interpretable by design” methods, tackle the challenge of interpreting models, each with its pros and cons. A new approach, Supervised Learning with Interpretation (SLI), jointly learns a predictive model and an interpreter model. FLINT, specifically designed for deep neural network classifiers, introduces a novel interpreter network architecture promoting local and global interpretability. It also proposes a criterion for concise and diverse attribute functions, enhancing interpretability. We’ll delve into the architecture of FLINT and how it works to give explainable predictions, and we will reproduce some experiments done in the experimental section of the article and evaluate their outputs to study FLINT&amp;rsquo;s performance. And finally, we will present a specialization of FLINT for post-hoc interpretability.&lt;/p&gt;
&lt;h1 id=&#34;section-2&#34;&gt;2 Learning a classifier and its interpreter with FLINT&lt;/h1&gt;
&lt;p&gt;The paper introduces Supervised Learning with Interpretation (SLI), a new task aimed at incorporating interpretability alongside prediction in machine learning models. In SLI, a separate model, called an interpreter, is employed to interpret the predictions made by the primary predictive model. The task involves minimizing a combined loss function consisting of prediction error and interpretability objectives. The paper focuses on addressing SLI within the context of deep neural networks for multi-class classification tasks. It proposes a framework called Framework to Learn with INTerpretation (FLINT), which utilizes a specialized architecture for the interpreter model, distinguishes between local and global interpretations, and introduces corresponding penalties in the loss function to achieve the desired interpretability.&lt;br&gt;
So for a dataset $S$ and a given model $f \in F$ where $F$ is a class of classifiers (here neural networks) and an interpreter model $g \in G_f$ where $G_f$ is a family of models, the SLI problem is presented by:
$$
\arg{\min_{f \in F, g \in G_f}{L_{pred}(f, S) + L_{int}(f, g, S)}}
$$
Where $L_{pred}(f, S)$ denotes a loss term related to prediction error and $L_{int}(f, g, S)$ measures the ability of $g$ to provide interpretations of predictions by $f$.&lt;/p&gt;
&lt;h2 id=&#34;section-2.1&#34;&gt;2.1 Design of FLINT&lt;/h2&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/FLINT/FLINT_design.png&#34;
  alt=&#34;design of FLINT&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;In FLINT, depicted in the image above, both a prediction model ($f$) and an interpreter model ($g$) are used. The input to FLINT is a vector $x \in X$, where $X = \mathbb{R}^d$, and the output is a vector $y \in Y$, where $Y$ is defined as the set of one-hot encoding vectors with binary components of size $C$ (the number of classes to predict). The prediction model $f$ is structured as a deep neural network with $l$ hidden layers, represented as $f = f_{l+1} \circ f_l \circ \ldots \circ f_1$. Each $f_k$ represents a hidden layer mapping from $R^{d_{k-1}}$ to $R^{d_k}$. To interpret the outputs of $f$, we randomly select a subset of $T$ hidden layers, indexed by $I=\{i_1, i_2, \ldots, i_T\}$, and concatenate their outputs to form a new vector $f_I(x) \in \mathbb{R}^D$, where $D = \sum_{t=1}^T d_{i_t}$. This vector is then fed into a neural network $\Psi$ to produce an output vector $\Phi(x) = \Psi(f_I(x)) = (\phi_1(x), &amp;hellip;, \phi_J (x)) \in \mathbb{R}^J$, representing an attribute dictionary comprising functions $\phi_j: X \rightarrow \mathbb{R}^+$, where $\phi_j(x)$ captures the activation of a high-level attribute or a &amp;ldquo;concept&amp;rdquo; over $X$. Finally, $g$ computes the composition of the attribute dictionnary with an interpretable function $h: R^J \rightarrow Y$.
$$
\forall x \in X, g(x) = h(\Phi(x))
$$
For now we take $h(x) = softmax(W^T \Phi(x))$ but $h$ can be any interpretable function (like a decision tree for example).&lt;/p&gt;
&lt;p&gt;Note that $d$ in the image is a decoder network that takes $\Phi(x)$ and reconstructs the input $x$. This decoder is used for training and its purpose will be detailed later on in section 2.3.&lt;/p&gt;
&lt;h2 id=&#34;section-2.2&#34;&gt;2.2 Interpretation in FLINT&lt;/h2&gt;
&lt;p&gt;With the interpreter defined, let&amp;rsquo;s clarify its role and interpretability objectives within FLINT. Interpretation serves as an additional task alongside prediction. We&amp;rsquo;re interested in two types: global interpretation, which aids in understanding which attribute functions contribute to predicting a class, and local interpretation, which pinpoints the attribute functions involved in predicting a specific sample.&lt;/p&gt;
&lt;p&gt;To interpret a local prediction $f(x)$, it&amp;rsquo;s crucial that the interpreter&amp;rsquo;s output $g(x)$ aligns with $f(x)$. Any discrepancy prompts analysis of conflicting data, potentially raising concerns about the prediction&amp;rsquo;s confidence.&lt;/p&gt;
&lt;p&gt;To establish local and global interpretation, we rely on attribute relevance. Given an interpreter with parameters $\Theta_g = (\theta_\Psi, \theta_h)$ and an input $x$, an attribute $\phi_j$&amp;rsquo;s relevance is defined concerning the prediction $g(x) = f(x) = \hat{y}$. The attribute&amp;rsquo;s contribution to the unnormalized score of class $\hat{y}$ is $\alpha_{j, \hat{y}, x} = \phi_j(x) \cdot w_{j, \hat{y}}$, where $w_{j, \hat{y}}$ is the coefficient associated with this class. Relevance score $r_{j, x}$ is computed by normalizing $\alpha$ as $r_{j, x} = \frac{\alpha_{j, \hat{y}, x}}{\max_i |\alpha_{i, \hat{y}, x}|}$. An attribute $\phi_j$ is considered relevant for a local prediction if it&amp;rsquo;s both activated and effectively used in the linear model.&lt;/p&gt;
&lt;p&gt;Attribute relevance extends to its overall importance in predicting any class $c$. This is achieved by averaging relevance scores from local interpretations over a random subset or the entirety of the training set $S$ where the predicted class is $c$. Thus, $r_{j, c} = \frac{1}{|S_c|} \sum_{x \in S_c} r_{j, x}$, where $S_c = \{x \in S \mid \hat{y} = c\}$.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s introduce the local and global interpretations the interpreter will provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Global interpretation ($G(g, f)$) identifies class-attribute pairs $(c, \phi_j)$ where the global relevance $r_{j, c}$ exceeds a threshold $\frac{1}{\tau}$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Local interpretation ($L(x, g, f)$) for a sample $x$ includes attribute functions $\phi_j$ with local relevance $r_{j, x}$ surpassing $\frac{1}{\tau}$. These definitions don&amp;rsquo;t assess interpretation quality directly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-2.3&#34;&gt;2.3 Learning by imposing interpretability properties&lt;/h2&gt;
&lt;p&gt;For learning, the paper defines certain penalties to minimize, where each one aims to enforce a certain desirable property:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fidelity to output:&lt;/strong&gt;&lt;/em&gt; The output of $g(x)=h(\Psi(f_I(x)))$ should be close to $f(x)$ for any x. This can be imposed through a cross-entropy loss:
$$
L_{of}(f, g, S) = - \sum_{x \in S} h(\Psi(f_I(x)))^T \log(f(x))
$$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Conciseness and Diversity of Interpretations:&lt;/strong&gt;&lt;/em&gt; We aim for concise local interpretations, containing only essential attributes per sample, promoting clearer understanding and capturing high-level concepts. Simultaneously, we seek diverse interpretations across samples to prevent attribute functions from being class-exclusive. To achieve this, the paper proposes that we leverage entropy (defined for a vector as $\mathcal{E}(v) = - \sum_i p_i \log(p_i)$), which quantifies uncertainty in real vectors. Conciseness is fostered by minimizing the entropy of the interpreter&amp;rsquo;s output, $\Phi(x) = \Psi(f_I(x))$, while diversity is encouraged by maximizing the entropy of the average $\Psi(f_I(x))$ over a mini-batch. This approach promotes sparse and varied coding of $f_I(x)$, enhancing interpretability. However, as entropy-based losses lack attribute activation constraints, leading to suboptimal optimization, we also minimize the $l_1$ norm of $\Psi(f_I(x))$ with hyperparameter $\eta$. Although $l_1$-regularization commonly encourages sparsity, the experiments done in the paper show that entropy-based methods are more effective.
$$
L_{cd}(f, g, S) = -\mathcal{E}(\frac{1}{\lvert S \lvert} \sum_{x \in S} \Psi(f_I(x))) + \sum_{x \in S} \mathcal{E}(\Psi(f_I(x))) + \sum_{x \in S} \eta \lVert \Psi(f_I(x)) \lVert_1
$$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fidelity to input:&lt;/strong&gt;&lt;/em&gt; In order to promote the representation of intricate patterns associated with the input within $\Phi(x)$, a decoder network $d : \mathbb{R}^J \rightarrow X$ is employed. This network is designed to take the attribute dictionary $\Phi(x)=\Psi(f_I(x))$ as input and reconstruct the original input $x$.
$$
L_{if}(f, g, d, S) = \sum_{x \in S} (d(\Psi(f_I(x))) - x)^2
$$&lt;/p&gt;
&lt;p&gt;Given the proposed loss terms, the loss for the interpretability model writes as follows:
$$
L_{int}(f, g, d, S) = \beta L_{of}(f, g, S) + \gamma L_{if}(f, g, d, S) + \delta L_{cd}(f, g, S)
$$
Where $\beta, \gamma, \delta$ are non-negative hyperparameters. the total loss to be minimized $L = L_{pred} + L_{int}$, where the prediction loss, $L_{pred}$, is the well-know cross entropy loss (since this a classification problem).&lt;/p&gt;
&lt;h1 id=&#34;section-3&#34;&gt;3 Understanding encoded concepts in FLINT&lt;/h1&gt;
&lt;p&gt;Once the predictor and interpreter networks are jointly learned, interpretation can be conducted at both global and local levels . A critical aspect highlighted by the authors is understanding the concepts encoded by each individual attribute function ​$\phi_j$ . Focusing on image classification, the authors propose representing an encoded concept as a collection of visual patterns in the input space that strongly activate $\phi_j$ . They present a pipeline for generating visualizations for both global and local interpretation, adapting various existing tools .&lt;/p&gt;
&lt;p&gt;For global interpretation visualization, the authors propose starting by selecting a small subset of training samples from a given class c that maximally activate ​$\phi_j$ . This subset, referred to as Maximum Activating Samples (MAS), is denoted as $MAS(c , ​\phi_j , l)$ where $l$ is the subset size (set as 3 in their experiments). However, while MAS provides some insight into the encoded concept, further analysis is required to understand the specific aspects of these samples that cause ​$\phi_j$ activation. To achieve this, the authors propose utilizing a modified version of activation maximization called Activation Maximization with Partial Initialization (AM+PI). This technique aims to synthesize input that maximally activates ​$\phi_j$ by optimizing a common activation maximization objective, initialized with a low-intensity version of the sample from MAS.&lt;/p&gt;
&lt;p&gt;For local analysis, given any test sample $x_{0}$ , its local interpretation $L(x_{0},f,g)$ can be determined, representing the relevant attribute functions . To visualize a relevant attribute ​$\phi_j$, the authors suggest repeating the AM+PI procedure with initialization using a low-intensity version of $x_{0}$ to enhance the concept detected by ​$\phi_j$ in $x_{0}$ .&lt;/p&gt;
&lt;h2 id=&#34;section-4&#34;&gt;4 Reproducing the experiments&lt;/h2&gt;
&lt;p&gt;In the experimental section of the article, several experiments were conducted to do a quantitative evaluation of FLINT&amp;rsquo;s performance compared to other state-of-the-art models designed for interpretability, such as SENN and PrototypeDNN. Additionally, FLINT was compared to LIME and VIBI to evaluate the fidelity of its interpretations, measuring the proportion of samples where the predictions of a model and its interpreter agree. Across these tests, FLINT consistently outperformed the other models, demonstrating its reliability and effectiveness.&lt;/p&gt;
&lt;p&gt;However, in this blog post we will specifically focus on reproducing the experiments in the article related to FLINT&amp;rsquo;s explainability, that aim to do a qualitative analysis of it. To achieve a thorough understanding of the model and its operational dynamics across prevalent datasets, we replicated the study by cloning the project from the GitHub repository referenced in the article (&lt;a href=&#34;https://github.com/jayneelparekh/FLINT&#34;&gt;repo link&lt;/a&gt;). Our experimentation involved the CIFAR10 and QuickDRAW datasets, employing a ResNet18-based network for both. For the QuickDRAW dataset, we utilized J=24 attributes, while for the CIFAR10 dataset, we used J=36 attributes.&lt;/p&gt;
&lt;p&gt;The instructions provided in the GitHub repository for executing the model are clear, and the model runs flawlessly. We have the option to either train the model ourselves or download the pre-trained models. Furthermore, there is a well-detailed Python notebook named &amp;ldquo;FLINT demo.ipynb&amp;rdquo;, which contains code for visualizing data, such as attribute relevance scores for each class and local interpretations for data samples. We will execute FLINT on test images and take a look at how interpretability is done with FLINT in this section.&lt;/p&gt;
&lt;h3 id=&#34;section-4.1&#34;&gt;4.1 Global interpretation&lt;/h3&gt;
&lt;p&gt;In the article, the authors explore global interpretation using a figure similar to the one provided below which was reproduced from the notebook, and which illustrates the generated global relevances $r_{j,c}$ for all class-attribute pairs in the QuickDraw dataset.&lt;/p&gt;
&lt;!-- ![Global class-attribute relevances](/images/FLINT/Global_class_attribute_QuickDRAW.png) --&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;./images/FLINT/Global_class_attribute_QuickDRAW.png&#34; alt=&#34;Image&#34; width=&#34;300&#34; height=&#34;200&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Additionally, by running the model on the CIFAR10 and QuickDRAW dataset we got visual outputs representative of class-attribute pair analyses for both datasets. These outputs served as pivotal tools in elucidating interrelations and facilitating comparative assessments between attributes and classes. We present below two figures derived from the resultant class-attribute pair analyses for each of the 2 datasets. The class-attribute pairs shown are different from the examples shown in the paper.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/FLINT/Class_attribute_pair_CIFAR10.png&#34;
  alt=&#34;Class-attribute pair analysis on dataset CIFAR10&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;em&gt;Caption: Class-attribute pair analysis on dataset CIFAR10&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/FLINT/Class_attribute_pair_QuickDraw.png&#34;
  alt=&#34;Class-attribute pair analysis on dataset QuickDraw&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;em&gt;Caption: Class-attribute pair analysis on dataset QuickDraw&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We focus on class-attribute pairs with high relevance, showcasing examples in the provided figure above . For each pair, we examine Maximum Activating Samples (MAS) alongside their corresponding Activation Maximization with Partial Initialization (AM+PI) outputs.&lt;/p&gt;
&lt;p&gt;MAS analysis alone provides valuable insights into the encoded concept. For instance, on QuickDRAW dataset, attribute $\phi_{16}$  relevant for class &amp;lsquo;Banana&amp;rsquo; activates the curve shape of the banana. However, AM+PI outputs offer deeper insights by elucidating which parts of the input activate an attribute function more clearly. And on CIFAR10 dataset , attribute $\phi_{12}$ activates for &amp;lsquo;Deer&amp;rsquo; class , but the specific focus of the attribute remains ambiguous. The outputs of the AM+PI method indicate that attribute $\phi_{12}$ predominantly highlights the area encompassing the legs and the horns of the deer, characterized as the most prominently enhanced regions.&lt;/p&gt;
&lt;h3 id=&#34;section-4.2&#34;&gt;4.2 Local interpretation&lt;/h3&gt;
&lt;p&gt;Similarly to the article, we explored local interpretation through the figure provided below which was generated in the notebook, which showcases visualizations for 4 test samples of the QuickDRAW dataset. Both predictor $f$ and interpreter $g$ accurately predict the true class in all cases, for the first 2 it&amp;rsquo;s &amp;ldquo;Cat&amp;rdquo; and the last 2 it&amp;rsquo;s &amp;ldquo;Banana&amp;rdquo;. For each case, they highlighted the top 3 relevant attributes to the prediction along with their relevances and corresponding AM+PI outputs.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/FLINT/Local_interpretations.jpg&#34;
  alt=&#34;Local interpretations for test samples&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;Analysis of the AM+PI outputs reveals that attribute functions generally activate for patterns corresponding to the same concept inferred during global analysis. This consistency is evident for attribute functions present in the previous figures. Additionaly, by looking at the figure showing the relevance of class-attribute pairs in section 4.1 for the QuickDRAW dataset we observe that the 3 most important features for each class in the local interpretations are also those having the highest relevence for these classes. For example for the &amp;ldquo;Banana&amp;rdquo; class, $\phi_{16}$, which activates the curve shape, is by far the most important feature for identifying this class by looking at both the local interpretations and the class-attribute relevences. While for the &amp;ldquo;Cat&amp;rdquo; class, it seems that the most important features are in order $\phi_{23}$, $\phi_1$ and $\phi_{19}$ when looking at both the local interpretations and the class-attribute relevences.&lt;/p&gt;
&lt;h2 id=&#34;section-5&#34;&gt;5 Subjective evaluation&lt;/h2&gt;
&lt;p&gt;In the article,  a subjective evaluation survey with 20 respondents using the QuickDraw dataset to assess FLINT&amp;rsquo;s interpretability is conducted. The authors selected 10 attributes covering 17 class-attribute pairs and presented visualizations (3 MAS and AM+PI outputs) along with textual descriptions for each attribute to the respondents. They were asked to indicate their level of agreement with the association between the descriptions and the patterns in the visualizations using predefined choices.&lt;/p&gt;
&lt;p&gt;Descriptions were manually generated, including 40% incorrect ones to ensure informed responses. Results showed that for correct descriptions, 77.5% of respondents agreed, 10.0% were unsure, and 12.5% disagreed. For incorrect descriptions, 83.7% disagreed, 7.5% were unsure, and 8.8% agreed. These results affirm that the concepts encoded in FLINT&amp;rsquo;s learned attributes are understandable to humans.&lt;/p&gt;
&lt;h1 id=&#34;section-6&#34;&gt;6 Specialization of FLINT to post-hoc interpretability&lt;/h1&gt;
&lt;p&gt;FLINT primarily aims for interpretability by design, but the authors of the article propose that it can also be adapted to provide post-hoc interpretations when a classifier $\hat{f}$ is already available. Post-hoc interpretation learning, a special case of SLI, involves building an interpreter for $\hat{f}$ by minimizing a certain objective function. Specifically, Given a classifier
$\hat{f} \in F$ and a training set $S$, the goal is to build an interpreter of $\hat{f}$ by solving:
$$
\text{arg} \min_{g \in G_{f}} L_{int}(\hat{f}, g, S)
$$
Where $g(x)=h(\Phi(\hat{f_I} (x)))$ for a given set of $I$ hidden layers and an attribute dictionnary of size $J$. The learning is performed the same as before but we only keep the parameters $\theta_\Psi$, $\theta_h$ and $\theta_d$. We fix $\theta_\hat{f}$ and remove $L_{pred}$ from the training loss $L$.&lt;/p&gt;
&lt;p&gt;There are experimental results in the article and in the supplements that are not mentionned here that demonstrate the effectiveness of post-hoc interpretation within FLINT, showing that even without fine-tuning the internal layers of the classifier, meaningful interpretations can be generated with high fidelity.&lt;/p&gt;
&lt;h1 id=&#34;section-7&#34;&gt;7 Conclusion&lt;/h1&gt;
&lt;p&gt;In conclusion, FLINT offers a robust framework for enhancing the interpretability of machine learning models, particularly deep neural networks, in critical domains like healthcare, law, and defense. By jointly learning predictor and interpreter models, FLINT addresses the challenge of providing both global and local interpretations of model predictions. Through carefully designed loss functions, FLINT ensures fidelity to input and output, promotes concise and diverse interpretations, and facilitates the representation of intricate patterns associated with input data. Reproducing experiments on datasets such as CIFAR10 and QuickDRAW showcases FLINT&amp;rsquo;s effectiveness in providing interpretable insights into model predictions. Subjective evaluations affirm the understandability of FLINT&amp;rsquo;s learned attributes, reinforcing its potential for real-world applications. Moreover, FLINT&amp;rsquo;s adaptability for post-hoc interpretability underscores its versatility, enabling meaningful interpretations without extensive modification of the underlying classifier. Overall, FLINT emerges as a valuable tool for fostering transparency and trust in complex machine learning models, contributing to the development of interpretable AI systems across various domains.&lt;/p&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/a-framework-to-learn-with-interpretation/</guid>
      <pubDate>Tue, 13 Feb 2024 16:56:04 +0100</pubDate>
    </item>
    
    <item>
      <title>NTK-SAP: IMPROVING NEURAL NETWORK PRUNING BY ALIGNING TRAINING DYNAMICS</title>
      <link>http://localhost:1313/posts/ntk-sap/</link>
      <description>&lt;p&gt;This is a blog post about the paper NTK-SAP: Improving neural network pruning by aligning training dynamics, published by Y. Wang et al. in 2023 and available &lt;a href=&#34;https://openreview.net/pdf?id=-5EWhW_4qWP&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduction:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a world increasingly driven by demand for data and computational resources, the narrative of artificial intelligence has been one of abundance: more data, more power, more precision. Yet, nestled within this grand tale, lies a quieter narrative - one that champions the concept of achieving more with less—Frugal AI.&lt;/p&gt;
&lt;p&gt;Imagine a craftsman from a bygone era, working in a workshop filled with natural light. Instead of an overwhelming array of tools, he possesses only a few, each worn and refined by years of careful use. With these simple instruments, he creates works of unexpected beauty, demonstrating that the value lies not in the abundance of resources, but in the skill and wisdom with which they are used.
Frugal AI embodies this craftsman’s spirit in the digital age. It does not revel in the excesses of computational power or data. Instead, it thrives in constraint, finding clever pathways through the limitations, optimizing algorithms not just for performance, but for efficiency and accessibility.&lt;/p&gt;
&lt;p&gt;In the quest for efficiency, neural network pruning has emerged as a foundation of Frugal AI principles. Just as craftsmen meticulously select and refine their tools, neural network pruning systematically removes redundant, non-critical components from a network, optimizing its performance without compromising its functionality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neural network pruning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Neural network pruning stems from the recognition that many models, especially deep learning networks, are often over-parameterized. This means they contain more parameters than are necessary for effective learning or inference. In the context of Frugal AI, this over-parameterization is analogous to an artist&amp;rsquo;s studio cluttered with unused tools and materials, which, rather than aiding, only serve to overwhelm and complicate. The act of pruning, therefore, can be seen as an effort to streamline and refine. It&amp;rsquo;s about identifying and removing the &amp;rsquo;excess&amp;rsquo; in the network—those weights and connections that contribute little to the output. This not only reduces the computational load, making the network faster and more energy-efficient, but also often improves its generalization ability, making the model less prone to overfitting and more adaptable to different tasks or datasets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pruning Methods:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pruning methodologies come in various forms, each tailored to specific needs and objectives. These methodologies can be categorized into three main types: &lt;strong&gt;post-hoc pruning&lt;/strong&gt;, &lt;strong&gt;pruning during training&lt;/strong&gt;, and &lt;strong&gt;foresight pruning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Post-hoc Pruning:&lt;/strong&gt; This technique trims neural networks after training, typically requiring multiple train-prune-retrain cycles. It utilizes various metrics, like magnitude and Hessian values, to determine which weights to eliminate, primarily aiming to reduce inference time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pruning During Training:&lt;/strong&gt; This approach involves gradually removing connections within a neural network as it trains, employing regularization or trainable masks. It aims to save training time but doesn&amp;rsquo;t necessarily reduce memory costs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Foresight Pruning:&lt;/strong&gt; This strategy prunes networks before training begins to prevent unnecessary computational waste. It seeks to address issues like layer collapse collapse at high sparsity levels. Recent advancements aim to overcome the limitations of early pruning methods by incorporating more informed strategies, such as meta-gradients.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Foresight pruning methods - saliency score:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Foresight pruning methods optimize neural network structures by identifying and removing less important connections, reducing computational complexity while maintaining performance. At the heart of these methods lies the loss function, which serves as the guiding metric for evaluating the network&amp;rsquo;s performance on a given dataset and determining which connections to prune. Given the complexity of directly solving the loss function, an indirect method is employed. Each potential connection within the network is assigned a &amp;ldquo;saliency score,&amp;rdquo; reflecting its influence on the loss function. This score is computed by assessing how changes in the connection impact the loss function, scaled by the initial weight value. Essentially, connections with higher saliency scores, indicating greater impact on the loss function, are retained, while those with lower scores are pruned. This systematic approach ensures that the network remains efficient while preserving its effectiveness in solving tasks.&lt;/p&gt;
&lt;p&gt;Key pruning methods such as &lt;strong&gt;SNIP&lt;/strong&gt;, &lt;strong&gt;Iterative SNIP&lt;/strong&gt;, &lt;strong&gt;GraSP&lt;/strong&gt;, and &lt;strong&gt;Synflow&lt;/strong&gt;, introduce specific saliency measures to assess the importance of connections:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. SNIP&lt;/strong&gt; calculates saliency as $S_{\text{SNIP}}(m&amp;rsquo;) = \left|\frac{\partial L}{\partial \theta}\odot \theta\right|$, focusing on the impact of each connection on the loss.  SNIP&amp;rsquo;s saliency score is the difference in the loss function before and after pruning a connection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Iterative SNIP&lt;/strong&gt;  repeats the process of SNIP multiple times for a refined pruning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. GraSP&lt;/strong&gt; employs the Hessian-gradient product to identify connections important for preserving gradient flow, with saliency defined as $S_{\text{GraSP}}(m&amp;rsquo;) = -\left[H(\theta \odot m&amp;rsquo;; D)\frac{\partial L}{\partial \theta}\right] \odot \theta$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Synflow&lt;/strong&gt;  uses $S_{\text{Synflow}}(m&amp;rsquo;) = \left|\theta\right| \odot \left|\frac{\partial L}{\partial \theta}\right|$ as a data-agnostic measure, emphasizing connections&amp;rsquo; overall contribution to the network&amp;rsquo;s output irrespective of the dataset.&lt;/p&gt;
&lt;p&gt;Each method&amp;rsquo;s saliency score guides the pruning process by ranking the connections based on their calculated importance to only keep the top-ranked connections - the most salient ones. Therefore, the overall idea is to start with a complex network, score each connection by importance, and keep only the most important connections. This results in a simpler network that is cheaper to train and run but still capable of learning effectively from the data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neural Tangent Kernel (NTK):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In recent studies, there has been significant exploration into optimizing neural networks on a global scale. One notable area of focus involves leveraging the neural tangent kernel (NTK) to gain deeper insights into how gradient descent functions within extensive deep neural networks. The NTK spectrum provides valuable information about convergence patterns. Remarkably, researchers have observed that the NTK remains consistent throughout training in sufficiently large DNNs. This suggests that the NTK spectrum could serve as a comprehensive measure for understanding training dynamics.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neural Tangent Kernel Spectrum-Aware Pruning (NTK-SAP):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consequently, a novel pruning approach has emerged: selectively removing connections that exert minimal influence on the NTK spectrum.&lt;/p&gt;
&lt;p&gt;In order to implement this conceptual pruning methods, there are a few considerations:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Metric Selection:&lt;/strong&gt;  Due to the complexity and time required to calculate the full range of eigenvalues (the eigenspectrum) of the Neural Tangent Kernel, the nuclear norm—essentially the sum of these eigenvalues—is used instead as a scalar to summarize the characteristics of the eigenspectrum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Choosing the Right NTK Matrix:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can distinguish between wo types of NTK matrices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed-Weight NTK: Related to the network&amp;rsquo;s initial setup.&lt;/li&gt;
&lt;li&gt;Analytic NTK: A theoretical model assuming a network of infinite size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, since calculating the Analytic NTK is highly resource-intensive, the researchers use a practical workaround. They approximate the Analytic NTK by averaging multiple Fixed-Weight NTKs from various initial setups, balancing computational efficiency with accuracy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Computational Efficiency:&lt;/strong&gt; To manage computation costs, there is a technique known as the &amp;ldquo;new-input-new-weight&amp;rdquo; (NINW) method. This approach involves changing the network&amp;rsquo;s weights for each new set of input data. By doing this, they can efficiently evaluate the properties of the Neural Tangent Kernel (NTK) across different scenarios without significantly adding to the computational load.&lt;/p&gt;
&lt;p&gt;Based on these considerations, Wang and colleagues have developed an innovative approach called &lt;strong&gt;Neural Tangent Kernel Spectrum-Aware Pruning (NTK-SAP)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;NTK-SAP leverages the NTK spectrum for efficient foresight pruning by using multi-sampling to predict pruning outcomes and ensure accuracy. It also incorporates the Novel Iterative Network Weighting (NINW) technique to reduce computation costs. This method streamlines neural networks by preemptively removing less impactful parts, optimizing both the pruning process and the network&amp;rsquo;s performance with minimal resource expenditure.&lt;/p&gt;
&lt;p&gt;NTK-SAP follows the following implementation:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Adrien_Elia/algo.png&#34;
  alt=&#34;algorithm&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculation of NTK-SAP Saliency Score:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Finite Approximation Approach&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The NTK-SAP method introduces a finite approximation expression to calculate a saliency score S-NTK-SA, which leverages the pruning dataset to approximate the entire training set. This foresight pruning approach identifies and prunes weights with the lowest saliency scores.&lt;/p&gt;
&lt;p&gt;Saliency score based on a fixed-weight Neural Tangent Kernel:&lt;/p&gt;
&lt;p&gt;$$S_{\text{NTK-SAP}}(m^j) = \left| \frac{\partial}{\partial m_j} \mathbb{E}_{\Delta\theta \sim \mathcal{N}(0, \epsilon I)} \left[ \left| f(\mathbf{X}_D; \theta_0 \odot m) - f(\mathbf{X}_D; (\theta_0 + \Delta\theta) \odot m) \right|_2^2 \right] \right|$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Multi-Sampling Approach:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While a single fixed-weight-NTK provides an approximation of the analytic NTK, averaging over multiple fixed-weight-NTKs offers a closer approximation to the expected behavior of the analytic NTK. This method entails sampling several independent weight configurations and averaging their fixed-weight-NTKs to better understand the parameter space and the anticipated performance of pruned networks.&lt;/p&gt;
&lt;p&gt;A stabilized version of the saliency score, S-NTK-SAP(mj) is introduced and incorporates the average of fixed-weight-NTKs computed across multiple random weight configurations, to assess the impact of pruning. Unlike most existing foresight pruning scores, which are dependent on specific weight configurations, this proposed saliency score is weight-agnostic; it primarily reflects the structure of the mask applied for pruning rather than the weights themselves. This distinction highlights the score&amp;rsquo;s focus on the inherent characteristics of the pruning method over the variability of weight initializations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. New-input-new-weight (NINW) trick:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To reconcile the theoretical aspirations with practical viability, NTK-SAP leverage the &amp;rsquo;new-input-new-weight&amp;rsquo; (NINW) trick. This technique estimates the expected behavior of pruned networks by utilizing a new set of weights for each mini-batch of input data. This approach ensures that the pruning algorithm remains computationally feasible, allowing for the real-world application without prohibitive resource demands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Random Input Trick:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NTK-SAP relies on another trick that consists in replacing the pruning set with random inputs. This allows to approximate the network&amp;rsquo;s behavior without depending on real data, thus highlighting NTK-SAP&amp;rsquo;s ability to adapt to any dataset without requiring specific adjustments or optimization.&lt;/p&gt;
&lt;p&gt;$$S_{\text{NTK-SAP}}(m^j) = \left| \frac{\partial}{\partial m_j} \frac{1}{|D|} \sum_{i=1}^{|D|} \left[ \left| f\left(Z_i; \theta_{0,i} \odot m\right) - f\left(Z_i; \left(\theta_{0,i} + \Delta\theta_i\right) \odot m\right) \right|_2^2 \right] \right|$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Experimental validation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experiments were performed on CIFAR-10, CIFAR-100, and Tiny-ImageNet data sets to validate NTK-SAP&amp;rsquo;s superiority across various sparsity levels. Particularly noteworthy is its robust performance at extreme sparsity ratios, where traditional methods falter. These results underscore the efficacy of our multi-sampling strategy and the practical utility of the NINW trick.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Adrien_Elia/performance_curves.png&#34;
  alt=&#34;performance_curves&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;Extending the analysis to the more challenging ImageNet dataset, NTK-SAP consistently outperforms baseline pruning methods, including SNIP and GraSP, especially at high sparsity levels. This success highlights NTK-SAP&amp;rsquo;s scalability and its potential to facilitate efficient neural network training on large-scale datasets.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Adrien_Elia/performance_table.png&#34;
  alt=&#34;performance_table&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reproductive experiments:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To ensure reproducibility, begin by installing the required packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, to run NTK-SAP with the default dataset and parameters using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default parameters are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--dataset&lt;/code&gt;: Mnist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--model-class&lt;/code&gt;: default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--model&lt;/code&gt;:  fc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pruner&lt;/code&gt;: rand&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--prune-batch-size&lt;/code&gt;: 256&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--compression&lt;/code&gt;: 0.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--prune-train-mode&lt;/code&gt;: False&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--prune-epochs&lt;/code&gt;: 1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ntksap_R&lt;/code&gt;:  1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ntk_epsilon&lt;/code&gt;: 0.01&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For experimenting with different parameters, proceed with the desired adjustments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Experiment NTK-SAP with Cifar100 dataset, a 0.01 perturbation hyper-parameter&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python main.py --dataset cifar100 --ntksap_epsilon 0.01
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Train results:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;train_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;test_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top1_accuracy&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top5_accuracy&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Init.&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.607083&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.00&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.96&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Pre-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.607083&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.00&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.96&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Post-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.607083&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.00&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.96&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Final&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;10&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.337817&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.421804&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;17.91&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;45.41&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;2. Experiment NTK-SAP with Cifar100 dataset and a 0.02 perturbation hyper-parameter&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python main.py --dataset cifar100 --ntksap_epsilon  0.02
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Train results:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;train_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;test_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top1_accuracy&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top5_accuracy&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Init.&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.607163&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.02&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.72&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Pre-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.607163&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.02&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.72&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Post-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.607163&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.02&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.72&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Final&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;10&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.341863&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.460254&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;17.74&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;43.78&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3. Experiment NTK-SAP with Cifar100 dataset and a number of iterations of 3&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python main.py --dataset cifar100 --prune-epochs &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Train results:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;train_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;test_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top1_accuracy&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top5_accuracy&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Init.&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.606948&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0.96&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;5.02&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Pre-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.606948&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0.96&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;5.02&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Post-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.606948&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0.96&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;5.02&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Final&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;10&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.337061&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.448972&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;18.09&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;43.97&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;4. Experiment NTK-SAP with Cifar100 dataset and a number of iterations of 7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Train results:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;train_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;test_loss&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top1_accuracy&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;   &lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;top5_accuracy&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Init.&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.606786&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.01&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.95&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Pre-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.606786&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.01&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.95&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Post-Prune&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NaN&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.606786&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1.01&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4.95&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Final&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;10&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.335409&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;3.397401&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;18.93&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;   &lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;44.89&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Analysis from experiments:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Dataset Adaptability:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The study demonstrated NTK-SAP as being data-free. This quality allows pruned networks developed via these methods to be seamlessly adapted to various datasets without requiring additional data, highlighting their versatility and efficiency.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Robustness across hyper-parameter variations:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The robustness of NTK-SAPP is evident through its consistent performance across varying perturbation hyper-parameters (ϵ) in experiments conducted on the Cifar100 dataset. When the perturbation hyper-parameter is set to 0.01, the model exhibits stable behavior throughout training and pruning phases, yielding a final top-1 accuracy of 17.91% and a top-5 accuracy of 45.41%. Similarly, when the perturbation hyper-parameter is increased to 0.02, the model maintains its stability, with minimal fluctuations observed in performance metrics compared to the unperturbed model. Both pre-prune and post-prune stages demonstrate resilience to perturbations, showcasing nearly identical results to the unperturbed model. This consistency across different perturbation levels underscores the robustness of NTK-SAPP, making it a reliable choice for tasks where stability under varying conditions is crucial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Fewer iterations for small datasets:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An exploration into how the number of iterations (T) affects performance across datasets reveals that for smaller datasets, reducing T slightly impacts outcomes, suggesting that computational efficiency can be achieved without significantly compromising results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In conclusion, NTK-SAP stands as a pivotal advancement in the realm of neural network pruning, showcasing its efficacy across diverse datasets and network architectures. By pruning at initialization, it eliminates the necessity for post-training methods and mask training. Moreover, by leveraging NTK theory, it addresses the oversight of training dynamics post-pruning, enabling iterative pruning without data dependency. NTK-SAP effectively bridges the theoretical underpinnings of optimization with practical neural network training, thus pushing the boundaries of frugal neural networks.&lt;/p&gt;
&lt;p&gt;While NTK-SAP represents a significant leap forward, it also unveils several avenues for future exploration. Subsequent research could delve into alternative spectral measures or extend the methodology to other forms of network optimization.&lt;/p&gt;
&lt;p&gt;In essence, NTK-SAP not only signifies a crucial stride towards more efficient and theoretically grounded neural network pruning but also sets the stage for future innovations in enhancing network frugality.
&lt;br&gt;&lt;br&gt;&lt;br&gt;
By Elia Lejzerowicz and Adrien Oleksiak.&lt;/p&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/ntk-sap/</guid>
      <pubDate>Wed, 07 Feb 2024 16:07:10 +0100</pubDate>
    </item>
    
    <item>
      <title>Do Perceptually Aligned Gradients imply Robustness?</title>
      <link>http://localhost:1313/posts/robustness-and-pag-the-converse/</link>
      <description>&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;h1 style=&#34;font-size: 36px;&#34;&gt;Robustness and Perceptually Aligned Gradients : does the converse stand ?&lt;/h1&gt;
&lt;h3 style=&#34;font-size: 24px;&#34;&gt;Author: Yohann Zerbib&lt;/h3&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Adversarial Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Perceptually Aligned Gradients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;To go further&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a blog post about the paper Do Perceptually Aligned Gradients Imply Robustness?, published by R. Ganz et al. in 2023 and available &lt;a href=&#34;https://openreview.net/pdf?id=W6topEXC2-v&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;section-0&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the context of image recognition in Machine Learning, one could quickly realize that building &lt;em&gt;robust&lt;/em&gt; models is crucial. Having failures could potentially lead to worrying outcomes and it is part of the design to aim to implement models that would be prevented against &lt;em&gt;&lt;strong&gt;adversarials attacks&lt;/strong&gt;&lt;/em&gt;, that will be explained. At some point, when reaching models that are robust, it somehow occurs that small variations made are easily &lt;strong&gt;interpretable by humans&lt;/strong&gt;, something which is not common in current ML models such as this one. Having noticed this phenomenon, the authors of the paper would try to verify the opposite assumption. By building models that verify this idea of alignment with human perception, do we create robust models ?&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;Adversarial attacks&lt;/h2&gt;
&lt;p&gt;But before explaining the article, it could be relevant to explain briefly what are adversarial attacks and how it led to the design of robustness.&lt;/p&gt;
&lt;p&gt;Adversarial attacks refer to a class of techniques in machine learning where &lt;strong&gt;intentionally crafted input data&lt;/strong&gt; is used to deceive or mislead a model, leading it to make incorrect predictions or classifications. These attacks exploit vulnerabilities in the model&amp;rsquo;s decision-making process, taking advantage of the model&amp;rsquo;s sensitivity to small changes in input data that might be &lt;strong&gt;imperceptible to humans&lt;/strong&gt;.
They are most prominently associated with deep learning models, particularly neural networks, due to their high capacity and ability to learn complex patterns.&lt;/p&gt;
&lt;p&gt;Concretly, in a theoretical framework, the usual example is to make a model classify an image of a cat as a dog or another animal, without any way for the human to notice it. However, consequences can be more dreadful in real life as one could consider what would happen if an autonomous vehicles missclassified a &lt;em&gt;&lt;strong&gt;stop sign as speed limit sign&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Yohann_Zerbib/stop.png&#34;
  alt=&#34;stop&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;(Eykholt et al. [1])&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s dive a bit deeper to understand how these errors happen.
Several points can be highlighted, such as the level of linearity of Neural Networks, but one acknowledged moot point dwells on the use of Loss function in Deep Learning methods. Indeed, especially when considering datasets of pictures, there are many directions where the &lt;strong&gt;loss is steep&lt;/strong&gt;. It would mean that it can be highly delicate to propose a good minimization of the loss. Moreover, the main idea for our problem is that a &lt;strong&gt;small change&lt;/strong&gt; of the input can cause &lt;strong&gt;abrupt shifts&lt;/strong&gt; in the decision process of our model. This effect increases with the dimensionnality (quality of pictures&amp;hellip;) and therefore will still be relevant with time.&lt;/p&gt;
&lt;p&gt;The basic modelisation of an attack would be the following. Let&amp;rsquo;s consider :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a model $f\ :\ \mathcal{X} \ \rightarrow \ \mathcal{Y}$&lt;/li&gt;
&lt;li&gt;the input to pertub : $x \in \mathcal{X}$&lt;/li&gt;
&lt;li&gt;a potential target label : $t \in  \mathcal{Y}$&lt;/li&gt;
&lt;li&gt;a small perturbation : $\eta$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, mathematically, the attacker would try to have something that verifies $f(x + \eta) = t$ (or any other label than $f(x)$ for an untargeted attack).&lt;/p&gt;
&lt;p&gt;Now, as one can imagine, it is possible to compute attacking models related to this framework. Let&amp;rsquo;s understand two well-knowns algorithms that follow this goal.&lt;/p&gt;
&lt;h3 id=&#34;fast-gradient-sign-method-fgsm-&#34;&gt;Fast Gradient Sign Method (FGSM) :&lt;/h3&gt;
&lt;p&gt;This method can be &lt;em&gt;&lt;strong&gt;targeted&lt;/strong&gt;&lt;/em&gt; or &lt;em&gt;&lt;strong&gt;untargeted&lt;/strong&gt;&lt;/em&gt;. Let&amp;rsquo;s study the targeted one. The algorithm is the following [3]:
One compute the perturbation $\eta \ =\ \epsilon \ \cdotp \ sign( \ \nabla x\ L( x,\ t) \ )$ where $\epsilon$ is the perturbation size. Then, one would have $x&amp;rsquo;\ =\ x\ −\ \eta $ such that we remain espilon close from $x$ and that $f(x&amp;rsquo;) = t$.
The perturbation has to remain small to ensure it will be undetected by human&amp;rsquo;s perception.&lt;/p&gt;
&lt;p&gt;But, at this point, one question arises : how can we be sure that $x&amp;rsquo;$ is still close to $x$? How can we be sure that we have $||x\ −\ x&amp;rsquo;||_{p} \ \leq \ \epsilon $ where p is a particular norm? To answer this question, norms are introduced and two important ones, used in the article are the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$L_{2 }$ norm : This norm captures the &lt;strong&gt;global quantity of changes&lt;/strong&gt;. It is the euclidean distance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$L_{\infty }$ : This norm captures the &lt;strong&gt;maximum change&lt;/strong&gt; in the vector.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, we have several ways to have a level of control over the changed features.&lt;/p&gt;
&lt;p&gt;Now that the first intuition for attack is understood, one should take a rapid look at &lt;strong&gt;PGD&lt;/strong&gt; (Projected Gradient Descent) [4], which will be used for the results of this blog. Other more complex methods exist (AutoAttack), and they are taken into account by the authors but they will not be explained here.&lt;/p&gt;
&lt;p&gt;The algorithm starts with an initial perturbation. At each iteration, the algorithm takes a step in the direction of the gradient of the loss function with respect to the input. The gradient is calculated using backpropagation, and represents the direction of steepest ascent in the loss function. However, since we&amp;rsquo;re trying to reach a specific target, we actually want to move in the &lt;strong&gt;opposite direction&lt;/strong&gt;, so we multiply the gradient by -1 (it is a maximization). The step size is proportional to the norm of the gradient, so we don&amp;rsquo;t overshoot or undershoot our target.
After taking a step, the perturbation is &lt;em&gt;projected&lt;/em&gt; back onto the allowed range, which is defined by the epsilon parameter. This is done by calculating the difference between the current input and the original input, and then scaling this difference so that it falls within the allowed range.
This process is repeated for a certain number of iterations. (In this version of the algorithm, there is no control that it will truly be missclassified : one has to set an improtant enough number of iterations).&lt;/p&gt;
&lt;p&gt;However, our role here is not to learn how to create the best attacks, but more to learn how to &lt;em&gt;&lt;strong&gt;defend&lt;/strong&gt;&lt;/em&gt; them! And suprisingly, what has been shown is that the best way to achieve this goal is to have a training that includes adversarial attacks.
Then, it all comes down to this optimization problem :&lt;/p&gt;
&lt;p&gt;$\min_{\theta }$ $\mathbb{E}_{(x, y)} $ [A] where&lt;/p&gt;
&lt;p&gt;A = $(\max_{\eta \leqslant \epsilon }$ $L( f_{\theta}( x\ +\ \eta ) ,\ y))$&lt;/p&gt;
&lt;p&gt;This is more or less an optimization problem to solve with $\theta$ the parameters to be learnt and where each training sample has a perturbation (an attack). It is linked with adversarial accuracy. We can train a model to be more robust, but chances are it will be less performant. It is up to the trainer to choose the &lt;strong&gt;best trade-off&lt;/strong&gt; on a model.&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;Perceptually Aligned gradients&lt;/h2&gt;
&lt;p&gt;Finally, it is possible to dive more in the subject of the article. Training models as presented before, with a particular care to robustness empirically leads to have &lt;em&gt;perceptually aligned gradients&lt;/em&gt;.
Here, one should understand &amp;ldquo;gradient&amp;rdquo; as the mathematical concept, a vector which points to the direction of the greatest increase of its function. In other words, Perceptually Aligned Gradients correspond to a property, a byproduct of robust models, where the gradients are meaningful to humans. When the input image is slightly modified, the corresponding gradient directions reflect the changes that are &lt;strong&gt;perceptually relevant&lt;/strong&gt;. In other words, the gradients &lt;em&gt;make sense&lt;/em&gt; from a human perspective.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Yohann_Zerbib/pagdemo.png&#34;
  alt=&#34;demopag&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;Here an example given by the author on the CIFAR dataset ([2], Ganz et al.). The intuition is that for models other than the vanilla one, the target class representative of the adversarial examples contains an information about the new class. For example, going from a bird to a frog will get the image much more green and in the shape of the frog. It looks like a &lt;em&gt;ghost&lt;/em&gt; information.&lt;/p&gt;
&lt;p&gt;Now, is it a Bidirectional Connection ? Let&amp;rsquo;s try to have some hints about it.&lt;/p&gt;
&lt;p&gt;The first step to tackle this issue is to create those Perceptually Aligned Gradients without adversarial training.&lt;/p&gt;
&lt;p&gt;Then, it is shown that models with aligneds gradients can be considered as robust.&lt;/p&gt;
&lt;p&gt;Finally, a demonstration of the improvement of robustness through the increase of gradient alignment is proposed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Algorithm of the Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To disentangle the creation of PAG with the usual robust training, a new method is developed. It relies on two elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the classical cross-entropy loss from the usual categorization problem framework,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an auxiliary loss on the input-gradients, differentiable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, our global loss function would look like this :&lt;/p&gt;
&lt;p&gt;$L( x,\ y) \ =LCE\ ( f_{\theta }( x) ,\ y) \ + \lambda\sum_{y_{t} =1}^{C}L_{cos}( \nabla_{x}f_{\theta }(x)_{y_t},\ g( x,\ y_t))$&lt;/p&gt;
&lt;p&gt;It is similar to training with a regularization part ($\lambda$ would control the power of the regularization). $L_{cos}$ is the cosine similarity loss (it gives information on the similarity of the arguments).&lt;/p&gt;
&lt;p&gt;This does not use robust model of any sort, on the hypothesis that we have &lt;strong&gt;ground-true PAG&lt;/strong&gt; in the input. This is a &lt;strong&gt;strong hypothesis&lt;/strong&gt;, and it is crucial to choose well those grounds-truth. Indeed, a lack of rigor here could lead to a bias. If the ground-truth was obtained through adversarial training previously, then this new approach would only be an equivalent of adversarial training, and that is something that must be avoided. This hypotesis will be studied just a bit later.&lt;/p&gt;
&lt;p&gt;After minimizing the loss, the model is tested through adversarial attacks (here, targeted PGD on the test set) to see if there is clearly PAG and if the adversarial accuracy is good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Creation of Perceptually Aligned Gradients&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As we have seen in the formula just above, it is mandatory to have a ground-truth perceptually gradient $g( x,\ y_t)$ for each training image and for each target class. However, finding those gradients are difficult and they are &lt;strong&gt;approximated&lt;/strong&gt;. Firstly, let&amp;rsquo;s consider the heuristics to understand what happens.&lt;/p&gt;
&lt;p&gt;With this objective in mind, we follow a straightforward assumption: the gradient $g( x,\ y_t)$ ought to align with the overall direction of images belonging to the target class $y_t$. Hence, when provided with a target class representative, $r_{y_t}$, we establish the gradient to direct away from the current image and towards the representative. In other words, $g( x,\ y_t) = r_{y_t} - x$&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Yohann_Zerbib/target.png&#34;
  alt=&#34;target&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;To implement this heuristic, three setups are provided.&lt;/p&gt;
&lt;p&gt;$\textbf{One Image (OI):}$ Choose an arbitrary training set image with label $y_t$, and set $r_{y_t}$ to be that image as a global destination for $y_t$-targeted gradients.&lt;/p&gt;
&lt;p&gt;$\textbf{Class Mean (CM):}$ Set $r_{y_t}$ to be the mean of all the training images with label $y_t$. This mean can be multiplied by a constant to obtain an image-like norm.&lt;/p&gt;
&lt;p&gt;$\textbf{Nearest Neighbor (NN):}$  For each image $x$ and each target class$\ y_{t} \ \in \ {{1,\ 2\ .\ .\ .\ ,\ C}}$, we set the class representative $r_{y_t}(x)$ (now dependent on the image) to be the image&amp;rsquo;s nearest neighbor amongst a limited set of samples from class $y_t$, using L2 distance in the pixel space. More formally, we define
$r( x,\ y_{t}) \ \ =\ \underset{ \begin{array}{l}
\widehat{x\ } \in \ D_{y_{t}} \ s.t.\ \hat{x} =x
\end{array}}{\arg\min} ||x\ −\ \hat{x} ||_{2}{}$&lt;/p&gt;
&lt;p&gt;where $ D_{y_{t}}$
is the set of sample images with class $y_t$.&lt;/p&gt;
&lt;p&gt;Now, the more theoretical approach is provided thanks to score-based gradients. Authors have used &lt;strong&gt;Denoising Diffusion Probabilistic Models&lt;/strong&gt; (DDPMs), to generate approximations of PAG.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider noisy versions of an image $x$, noted as $({x_{t}})_{t=1}^{T}$ and their distribution&lt;/p&gt;
&lt;p&gt;$(p_t({x_{t})})_{t=1}^{T}$.&lt;/p&gt;
&lt;p&gt;An iterative process is employed for sampling, which begins from Gaussian noise and proceeds along the direction of the score function, defined as $\nabla_{x_t} \log p(x_t)$ and approximated by a neural network. It is suggested to incorporate class information into these networks, allowing them to model a class-dependent score function $\nabla_{x_t} \log p(x_t|y)$. We identify a resemblance between the class-dependent score function and classification loss gradients with respect to the input image, leading us to propose that gradients derived from DDPM can serve as an enhanced source for perceptually aligned gradients. We would have (one term disappears with the gradient w.r.t the input image) using Bayes&amp;rsquo; formula.&lt;/p&gt;
&lt;p&gt;\begin{equation}
\nabla_{x_t} \log p(x_t|y) = \nabla_{x_t} \log p(y|x_t) + \nabla_{x_t} \log p(x_t),
\end{equation}&lt;/p&gt;
&lt;p&gt;which results in&lt;/p&gt;
&lt;p&gt;\begin{equation}
\nabla_{x_t} \log p(y|x_t) = \nabla_{x_t} \log p(x_t|y) - \nabla_{x_t} \log p(x_t).
\end{equation}&lt;/p&gt;
&lt;p&gt;This formulation introduces a new application of diffusion models – a systematic approach to estimate the appropriate gradients for the expression $\log p(y|x_t)$. However, classification networks operate on noise-free images ($x$) rather than noisy ones ($x_t$). To link classifier input-gradients with DDPMs, we assume that $\log p(y|x) \approx log p(y|x_t)$, for certain noise levels $t$. Consequently, the desired estimation of &amp;ldquo;ground-truth&amp;rdquo; classifier input-gradients can be acquired by subtracting an unconditional score function from a class-conditional one. The selection of $t$ when distilling gradients through this method presents a tradeoff – excessively large values yield gradients unrelated to the input image (too noisy), while excessively small values produce perceptually insignificant ones (in low noise levels, the conditional and unconditional scores are nearly identical). Therefore, we choose $t$ to be of moderate values, generating both perceptually and image-relevant gradients. We denote this method as Score-Based Gradients (SBG).&lt;/p&gt;
&lt;p&gt;To understand a bit more how it works, one has to consider that the variations of the noise from every $x_t$ can be controlled. Indeed, each different iteration takes the direction of the distribution $\log p(x_t)$ (with stochasticity). In other terms, it takes the direction of our score function that can be estimated thanks to Neural Networks. That&amp;rsquo;s how you obtain your set of ground-truth gradients related to the input images.&lt;/p&gt;
&lt;p&gt;At this point, we have four ways to approximate ground-truth gradients. (Three heuristics and a more theoretical one). The experiments presented here will use the NN approach that are very intuitive. What was favoured for real datasets was the score-based approach.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;Experiment&lt;/h2&gt;
&lt;p&gt;Now, let&amp;rsquo;s experiment a bit. In this article, to understand what is happening, we will play a bit with the toy dataset. A 2 dimensional synthetic dataset is built. It contains 6000 samples of 2 classes. Every sample is on the line of equation $x_2 -2x_1=0$. Finally, each class contains &lt;strong&gt;three mods&lt;/strong&gt; (1000 samples per mode) drawn from a Gaussian distribution. The idea is to observe manifolds as decision boundaries. Background of the plan will be colored according to the predicted class. Evaluation will be made on a test set.&lt;/p&gt;
&lt;p&gt;The code is available at this &lt;a href=&#34;https://github.com/YohannZe/responsible-ai-datascience-ipParis.github.io.git&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To this prediction task, a simple 2 layers MLP with ReLU is used. Two training are made with the same seed. The first is based on the usual cross-entropy loss whereas the second is made on the explained new loss.&lt;/p&gt;
&lt;p&gt;As expected, 100% accuracy is obtained for this very simple task for both models on the test set. However, what about predicting adversarial examples ?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first try it out with a targeted $L2$ PGD. Vanilla is only correct for 35 out of 600 samples, whereas this new approach obtains 583 out of 600.
How can this be explained ? One should observe the decision boundaries.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Yohann_Zerbib/vanilla_l2_toy.png&#34;
  alt=&#34;vanillal2&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;This is what is obtained for the regular neural network with cross-entropy Loss.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Yohann_Zerbib/nn_l2_toy.png&#34;
  alt=&#34;nnl2&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;Here is the result obtained for the particular neural network with the new loss.&lt;/p&gt;
&lt;p&gt;What one should notice is the decision boundaries. The vanilla neural network provides manifolds that really &lt;em&gt;&lt;strong&gt;stick&lt;/strong&gt;&lt;/em&gt; to the data points. Going just a bit further can on the graph really can create a shift in the prediction. And that is what is happening with a targeted pgd, where there is only a small variation (semantically invisible).&lt;/p&gt;
&lt;p&gt;However, in the case of the PAG Neural Network, one can observe that around a mode of points, there is a &lt;strong&gt;much greater margin&lt;/strong&gt; of the same class. This can be understood from the setup to create perceptually aligned gradients. Indeed, as we have seen, a target class was set based on a nearest neighbour approach, and the gradient point away from the current image and towards the class representative. Only then the cosine similarity between this gradient and the ground-truth approximated one from DDPMs.&lt;/p&gt;
&lt;p&gt;Another possibility would be to see the impact of the size of the perturbation on the performance. Indeed, here, the given results corresponded to an epsilon value of 15. Increasing it decreases the accuracy to 75%. However, at a certain point, an augmentation of epsilon will not change anything anymore, probably because of a normalizing step in the targeted PGD algorithm.&lt;/p&gt;
&lt;h2 id=&#34;section-4&#34;&gt;To go further&lt;/h2&gt;
&lt;p&gt;What&amp;rsquo;s next ? Testing the hypothesis on real datasets. Among them, CIFAR-10, STL (higher resolution) and CIFAR-100 (higher number of classes). The architecture to achieve those tasks are classical (Resnet-18, ViT). Here are the main results that can be highlighted.&lt;/p&gt;
&lt;p&gt;PAG approach is often similar and sometimes outperforms adversarially training approach. Score-based gradient seems to be the most accurate ground-truth approximation setup. It is also more notable for the ViT architecture. It also globally performs well on STL and CIFAR-100 (sometimes even better than adversarially training).&lt;/p&gt;
&lt;p&gt;But, the question is not yet answered : &lt;em&gt;&lt;strong&gt;Do Perceptually Aligned Gradients imply Robustness?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s where the regularization aspect of the loss is very useful. One can make variation over the hyperparameter $\lambda$ to see what brings a bigger focus on the PAG loss. The authors have done it and are summarized with this table.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Yohann_Zerbib/regu.png&#34;
  alt=&#34;regu&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;As one can see, the robustness increases with the increase of the regularization hyperparameter. The more the &lt;em&gt;ghost&lt;/em&gt; features of the target class are visible (even if it not always comprehensible), the more the model is robust.&lt;/p&gt;
&lt;p&gt;So, it seems that yes, models with &lt;strong&gt;PAG would be more robust&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;section-5&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To draw a conclusion, this paper has empirically shown that &lt;strong&gt;PAG lead to more robustness&lt;/strong&gt; in models. It was also mentionned that it could potentially be combined with Adversarially Training to gain more robustness, and there are probably some experiments and tests that could optimize that. The performance are also good and can be seen as an alternative, potentially not too costly. Sometimes it &lt;strong&gt;ouperforms Adversarially Training&lt;/strong&gt; and it would be up to the user to decide which framework to employ for creating robust models. Finally, approximating ground-truth PAG needs additionnal research and discussion as even if the results tend to favour Score-Based Gradients, it happens that heuristics function better and there are potentially other approaches that have yet to be discovered. One should shed light on the fact that the diffusion models used need to be trained, and the training time gained over adversarially training is not as significant as with other heuristics if we consider this aspect.&lt;/p&gt;
&lt;h2 id=&#34;section-6&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;EYKHOLT, Kevin, EVTIMOV, Ivan, FERNANDES, Earlence, et al. Robust physical-world attacks on deep learning visual classification. In : Proceedings of the IEEE conference on computer vision and pattern recognition. 2018. p. 1625-1634.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ganz, R., Kawar, B., &amp;amp; Elad, M. (2023, July). Do perceptually aligned gradients imply robustness?. In International Conference on Machine Learning (pp. 10628-10648). PMLR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goodfellow, I. J., Shlens, J., &amp;amp; Szegedy, C. (2014). Explaining and harnessing adversarial examples. arXiv preprint arXiv:1412.6572.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Madry, A., Makelov, A., Schmidt, L., Tsipras, D., &amp;amp; Vladu, A. (2017). Towards deep learning models resistant to adversarial attacks. arXiv preprint arXiv:1706.06083.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/robustness-and-pag-the-converse/</guid>
      <pubDate>Wed, 07 Feb 2024 16:06:43 +0100</pubDate>
    </item>
    
    <item>
      <title>To update or not to update? Neurons at equilibrium in deep models</title>
      <link>http://localhost:1313/posts/neq/</link>
      <description>&lt;h1 style=&#34;font-size: 36px;&#34;&gt;To update or not to update? Neurons at equilibrium in deep models
&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 24px;&#34;&gt;Author: Alexis WINTER Augustin CREUSILLET&lt;/h1&gt;
&lt;h1 id=&#34;table-of-content&#34;&gt;Table of content&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;NEq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Reproducibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a blog post about the paper To update or not to update? Neurons at equilibrium in deep models, published by A. Bgragagnolo et al. in 2022 and available [here]https://proceedings.neurips.cc/paper_files/paper/2022/file/8b2fc235787852ead92da2268cd9e90c-Paper-Conference.pdf).&lt;/p&gt;
&lt;h2 id=&#34;section-0&#34;&gt;Introduction&lt;/h2&gt;
&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;
&lt;p&gt;Recent advances in &lt;strong&gt;deep learning&lt;/strong&gt; have undeniably propelled the field to unprecedented heights, revolutionizing various domains from computer vision to natural language processing. However, these strides forward have not come without a significant toll on computational resources. As models grow increasingly complex, the demand for &lt;strong&gt;computational power&lt;/strong&gt; has surged exponentially. One of the most expensive tasks in deep learning is undoubtedly the training of models. This process entails iteratively adjusting millions or even billions of parameters to minimize a predefined loss function, requiring extensive computational power and time-intensive operations. This process poses challenges in terms of both &lt;strong&gt;affordability and environmental sustainability&lt;/strong&gt;, highlighting the need for innovative solutions to make deep learning more efficient and accessible in the face of escalating computational demands.&lt;/p&gt;
&lt;p&gt;This paper tries to focus on the overall behavior of neurons, leveraging the notion of &lt;strong&gt;neuronal equilibrium (NEq)&lt;/strong&gt;. When a neuron reaches a state of equilibrium, indicating that it has learned a particular input-output mapping, it ceases its updates. The result is that we can reduce the number of operations needed for the computation of the backpropagation and optimizer and thus reduce the number of resources necessary for the model.&lt;/p&gt;
&lt;h3 id=&#34;related-works&#34;&gt;Related works&lt;/h3&gt;
&lt;h4 id=&#34;pruning-strategies&#34;&gt;Pruning strategies&lt;/h4&gt;
&lt;p&gt;Pruning strategies consist in the systematic removal of redundant or less important parameters, connections or units within a model to &lt;strong&gt;improve efficiency and reduce computational complexity&lt;/strong&gt;. These strategies are inspired by the biological concept of pruning, where unnecessary connections in neural networks are eliminated to enhance neural efficiency. Pruning can take various forms, including magnitude-based pruning, where parameters with small weights are pruned, or structured pruning, which removes entire neurons, channels, or layers based on specific criteria. Pruning strategies effectively reduce the model size leading to a more frugal and compact model With the development of computational resources and the creation of more complex model, pruning strategies such as dropout are being exploited again.&lt;/p&gt;
&lt;p&gt;Despite its effectiveness in reducing model size and improving inference efficiency, pruning strategies typically &lt;strong&gt;do not alleviate the computational complexity associated with training neural networks&lt;/strong&gt;. While pruning removes parameters or connections during the inference phase, the training process still requires the full model to be trained initially, often resulting in high computational demands. In fact, pruning can even increase training complexity due to the need for additional iterations to fine-tune the remaining parameters and adapt the model to compensate for the pruned components. Consequently, while pruning offers significant benefits in terms of model deployment and inference efficiency, it does not directly address the computational burden of training models.&lt;/p&gt;
&lt;h4 id=&#34;lottery-ticket-hypothesis&#34;&gt;Lottery ticket hypothesis&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;lottery ticket hypothesis&lt;/strong&gt; is a concept in deep learning that suggests that within a dense neural network, there exist sparse subnetworks, or &amp;ldquo;winning tickets,&amp;rdquo; that are capable of achieving high accuracy when trained in isolation. These winning tickets are characterized by having a small subset of well-initialized weights, which when pruned to remove the remaining connections, can maintain or even &lt;strong&gt;surpass the performance of the original dense network&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The hypothesis was introduced by Jonathan Frankle and Michael Carbin in 2018. They conducted experiments demonstrating that randomly-initialized, dense neural networks contain subnetworks that can achieve high performance when trained properly. These subnetworks or winning tickets tend to emerge during the training process and possess a specific initialization that allows them to be effectively trained within the broader network.&lt;/p&gt;
&lt;p&gt;The significance of the lottery ticket hypothesis lies in its potential to improve the efficiency of training deep neural networks. By identifying these &lt;strong&gt;winning tickets&lt;/strong&gt; and training only the sparse subnetworks, researchers can reduce computational costs associated with training while maintaining or even improving model accuracy. This concept has led to the development of pruning techniques aimed at discovering these winning tickets and accelerating the training process.&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;NEq&lt;/h2&gt;
&lt;h3 id=&#34;neuronal-equilibrium&#34;&gt;Neuronal equilibrium&lt;/h3&gt;
&lt;p&gt;The concept of &lt;strong&gt;neuronal equilibrium&lt;/strong&gt; aims to detect when a neuron reaches a state of equilibrium, indicating that it has learned a particular input-output mapping. The idea is to understand when the neuron has reach a configuration in which he does not require further updates.&lt;/p&gt;
&lt;p&gt;To assess this we can evaluate cosine similarity between all the outputs of the $i$-th neuron at time $t$ and at time $t-1$ for the whole validation set $\Xi_{val}$ as follows:&lt;/p&gt;
&lt;img src=&#34;./images/images_Winter_Creusillet/neq_formula.png&#34; width=&#34;300&#34;/&gt;
&lt;p&gt;The neuron $i$-th reaches the equilibrium when $(\phi_{i})_t$ stops evolving. In this sense to know when the neuron has reached the equilibrium  we need to detect when :&lt;/p&gt;
&lt;p&gt;$$\lim_{t\rightarrow \infty} \phi_{i}^t = k,$$&lt;/p&gt;
&lt;p&gt;Since it is not trivial to assess this statment we prefer to work with variations of $(\phi_{i})_t$ that can be defined as :&lt;/p&gt;
&lt;p&gt;\begin{equation}
v_{\Delta \phi_i}^t = \Delta \phi_i^t - \mu_{eq} v_{\Delta \phi_i}^{t-1},
\end{equation}&lt;/p&gt;
&lt;p&gt;With $\mu_{eq}$ the momentum coefficient.&lt;/p&gt;
&lt;p&gt;This only lead to a reformulation of the problem as the equilibrium is reached when we have : $$\Delta \phi_i^t \rightarrow 0$$&lt;/p&gt;
&lt;p&gt;Since we want to track the evolution of $\Delta \phi_i^t$ over time we introduce the &lt;strong&gt;velocity of the variations&lt;/strong&gt;:
$$
v_{\Delta \phi_i}^t = \Delta \phi_i^t - \mu_{eq} v_{\Delta \phi_i}^{t-1},
$$&lt;/p&gt;
&lt;p&gt;With $\mu_{eq}$ the momentum coefficient.&lt;/p&gt;
&lt;p&gt;Rewrited:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/images_Winter_Creusillet/momentum_coef.png&#34;
  alt=&#34;creusilet/winter&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;We need to have $$\mu_{eq} \in [0; 0.5]$$ to prevent the velocity from exploding.&lt;/p&gt;
&lt;p&gt;Finally we can set the condition for the neuron to be at the equilibrium as:
\begin{equation}
\left| v_{\Delta \phi}^t \right | &amp;lt; \varepsilon,~~~~~\varepsilon \geq 0.
\end{equation}&lt;/p&gt;
&lt;p&gt;It is important to know that this relation might not hold for all $t$ since there could be an instant $t&amp;rsquo; &amp;lt; t$ where the relation does not hold anymore and the neuron is attracted to a new state and need to be updated again.&lt;/p&gt;
&lt;h3 id=&#34;training-scheme&#34;&gt;Training scheme&lt;/h3&gt;
&lt;p&gt;The training scheme can be presented according to this scheme:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/images_Winter_Creusillet/prunedbackprop-scheme_full-1.png&#34;
  alt=&#34;creusilet/winter&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;At the first epoch each neuron is considered to be at non-equilibrium. After the first epoch the training scheme can be described as followed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An epoch of training is made for all trainable neurons on the training set.&lt;/li&gt;
&lt;li&gt;The training either stops due to the end of training criterion being met or continues to the next step.&lt;/li&gt;
&lt;li&gt;The velocity of the similarities is evaluated for every neuron.&lt;/li&gt;
&lt;li&gt;The set of trainable neurons is determined for the next step according to the equilibrium criterion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comparing with regular training, we can see two more hyper-parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\epsilon$ which determines the threshold at which a neuron is considered to be at equilibrium according to the velocity of the similarities.&lt;/li&gt;
&lt;li&gt;$\mu_{eq}$ which intervenes into the calculation of the velocity of the similarities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-2&#34;&gt;Experiments&lt;/h2&gt;
&lt;h3 id=&#34;sgd-vs-adam&#34;&gt;SGD vs Adam&lt;/h3&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/images_Winter_Creusillet/sgd_vs_adam.png&#34;
  alt=&#34;adam/sgd&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;The authors conducted an experiment comparing two training methods for a ResNet-32 neural network on the CIFAR-10 dataset. The methods compared are SGD (Stochastic Gradient Descent) with momentum and Adam, which are both optimization algorithms used to update network weights iteratively.&lt;/p&gt;
&lt;p&gt;In the experiment, the authors observe the FLOPs required for a back-propagation step and the number of updated neurons during training. They note that at high learning rates, more neurons are trained and more FLOPs are required. This is attributed to the network not being at equilibrium—essentially, the network parameters are still very fluid and subject to change, thus requiring more computation.&lt;/p&gt;
&lt;p&gt;As training progresses and the learning rate is reduced, fewer neurons need updating, as the network moves towards its final, more stable configuration. The authors find that &lt;strong&gt;Adam brings the network towards this equilibrium faster than SGD&lt;/strong&gt;, but also note that in this specific task, &lt;strong&gt;SGD achieves a slightly higher final accuracy than Adam&lt;/strong&gt;. This may suggest that while Adam is efficient in reaching a state where few neuron weights are updated, SGD&amp;rsquo;s ability to explore the solution space more thoroughly leads to a better generalization on the test data.&lt;/p&gt;
&lt;p&gt;The experiment also highlights an interesting behavior at the first learning rate decay around epoch 100 for SGD. The number of updated neurons decreases and then increases, which is not observed with Adam. This difference illustrates the contrasting approaches of the two optimizers: SGD, by reducing the learning rate, encourages continued exploration, which temporarily stabilizes the network until it adjusts to the new learning rate and begins exploring again. Adam, with its adaptive learning rate for each parameter, does not exhibit this behavior because it consistently steers the network towards a stable state.&lt;/p&gt;
&lt;h3 id=&#34;distribution-of-phi--choice-of-µ_eq&#34;&gt;Distribution of $\phi$ &amp;amp; choice of $µ_{eq}$&lt;/h3&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/images_Winter_Creusillet/mu-line-1.png&#34;
  alt=&#34;creusilet/winter&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;The paper also discusses the distribution of $\phi$ and the choice of a parameter called $µ_{eq}$ during the training of neural networks.&lt;/p&gt;
&lt;p&gt;The parameter $\phi$ measures the &lt;strong&gt;cosine similarity between the outputs of a particular neuron at two consecutive training epochs&lt;/strong&gt;, over the validation set. It is used to determine if a neuron&amp;rsquo;s output has reached equilibrium, meaning its outputs do not significantly change over successive epochs. If $\phi$ equals 1, it indicates that the neuron&amp;rsquo;s output is stable across the epochs, signifying it has reached equilibrium.&lt;/p&gt;
&lt;p&gt;The paper further discusses the dynamics of neurons as they approach equilibrium. To quantify this, they introduce a metric called ∆φ, which is the difference in the $\phi$ values across epochs, and $v_{∆\phi}$, which measures the velocity of this change considering a &lt;strong&gt;momentum coefficient $µ_{eq}$&lt;/strong&gt;. This coefficient is important as it determines how much previous changes impact the current measurement of the equilibrium state.&lt;/p&gt;
&lt;p&gt;By examining different values for $µ_{eq}$, the paper finds that setting $µ_{eq}$ to 0.5 provides a good compromise, as it ensures a balance between memory of past variations and responsiveness to new changes. This finding is illustrated in the paper&amp;rsquo;s Figure 5, which shows the distribution of $\phi$, $∆\phi$, and $v_{∆\phi}$ for a ResNet-32 model trained on CIFAR-10.&lt;/p&gt;
&lt;p&gt;In summary, the authors find that a neuron is at equilibrium if the velocity of the similarity changes, considering the momentum, is below a certain threshold. They also observe that during training, even after reaching equilibrium, neurons may occasionally &amp;ldquo;unfreeze&amp;rdquo; and require updates if the learning dynamics change, for instance, if the learning rate is adjusted.&lt;/p&gt;
&lt;h3 id=&#34;impact-of-the-validation-set-size-and-ε&#34;&gt;Impact of the validation set size and ε&lt;/h3&gt;
&lt;p&gt;The authors found that the size of the validation set &lt;strong&gt;does not significantly impact the performance of the model&lt;/strong&gt;. Interestingly, even with a validation set as small as a single image, the method yields good results. This is attributed to the presence of convolutional layers in the network, which, even with a small number of images, generate high-dimensional outputs in each neuron. Additionally, the homogeneity of the dataset (CIFAR-10) likely contributes to the robustness of the performance against changes in the validation set size.&lt;/p&gt;
&lt;p&gt;When examining the impact of the parameter ε, which is used to determine when a neuron is at equilibrium and hence does not need to be updated, the authors observe a drop in model performance at very high values of ε. They suggest a value of 0.001 as a good compromise for classification tasks, &lt;strong&gt;striking a balance between model performance and computational efficiency&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;Results&lt;/h2&gt;
&lt;h2 id=&#34;section-4&#34;&gt;Reproducibility&lt;/h2&gt;
&lt;p&gt;Using the author&amp;rsquo;s implementation, we were able to replicate partially the results obtained using the ResNet32 model. Access to both the datasets and the code greatly facilitated the reproducibility process. However, our initial challenge stemmed from &lt;strong&gt;limited computational resources&lt;/strong&gt;. Nonetheless, the method was transparently elucidated alongside its implementation, thus enabling a straightforward reproduction of the results without encountering any significant obstacles. The authors provided a detailed explanation of the method, including the training scheme, the parameters involved, and the expected outcomes. This clarity and transparency were crucial in ensuring the reproducibility of the results.&lt;/p&gt;
&lt;h3 id=&#34;experiment&#34;&gt;Experiment&lt;/h3&gt;
&lt;p&gt;This experiment aims to replicate the section 4.1.1 &amp;ldquo;SGD vs Adam&amp;rdquo; described in the study. Implementing this part is straightforward after cloning the GitHub repository. We simply need to execute the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 train_classification.py --amp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --arch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;resnet32-cifar --batch-size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; --dataset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cifar10 --device&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cuda --epochs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt; --eps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.001 --lr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.1 --momentum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.9 --optim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sgd --val-size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.01 --velocity-mu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.5 --weight-decay&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0005
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code runs flawlessly, although we were significantly constrained by the lack of access to a powerful GPU, limiting our experiment. All the important parameters like the learning rate or the number of epochs are easily modifiable, making experimenting really easy. To obtain results for both SGD and Adam, we simply needed to change the optim parameter to the desired optimizer. The authors employ an application named &lt;strong&gt;Weights &amp;amp; Biases (wandb)&lt;/strong&gt; to monitor the training process. This application is useful as it not only allows for the saving of training results but also provides a lot of valuable information.&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/images_Winter_Creusillet/frozen_sgd_vs_adam1.png&#34;
  alt=&#34;creusilet/winter&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;


&lt;img
  src=&#34;./images/images_Winter_Creusillet/accuracy_sgd_vs_adam1.png&#34;
  alt=&#34;creusilet/winter&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;As expected, as training progresses and the learning rate is reduced, more neuron are frozen and the pattern found on the plot follow the one found by the authors with Adam freezing neuron faster than SGD. We also get the same accuracy level where Adam brings the network towards this equilibrium faster than SGD, but with SGD achieving a slightly higher final accuracy.&lt;/p&gt;
&lt;h2 id=&#34;section-5&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;From the initial problem of &lt;strong&gt;computational resources saving&lt;/strong&gt;, we have seen that NEq differs for others works that try to focus on finding optimal sub-graph for deep neural networks. By focusing on the entirety of the network and evaluating the behaviour of each neuron, &lt;strong&gt;NEq produces a new knowledge&lt;/strong&gt; that is easily transposable to other experiments or any neural network model. The method results seem promising as it produces new insight on the learning behaviour of deep neural networks and &lt;strong&gt;might lead to new training strategies&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One possible development could be one of the limitations of the paper cited by the authors. The paper only focuses on individual neurons and evaluating the behaviour of ensembles of neurons could lead to other interesting results as some neurons might be at equilibrium only as a group at some step of the training process. This possibility could be explored further.&lt;/p&gt;
&lt;h2 id=&#34;section-6&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Bragagnolo, A., Tartaglione, E., Grangetto, M.: To update or not to update? neurons at equilibrium in deep models. Advances in neural information processing systems, 2022.&lt;/li&gt;
&lt;li&gt;Dmitry Molchanov, Arsenii Ashukha, and Dmitry Vetrov. Variational dropout sparsifies deep neural networks. In International Conference on Machine Learning, pages 2498–2507. PMLR, 2017.&lt;/li&gt;
&lt;li&gt;J. Frankle and M. Carbin. The lottery ticket hypothesis: Finding sparse, trainable neural networks. 2019.&lt;/li&gt;
&lt;/ol&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/neq/</guid>
      <pubDate>Wed, 07 Feb 2024 15:55:14 +0100</pubDate>
    </item>
    
    <item>
      <title>Optimal Transport Based Adversarial Patch Attacks</title>
      <link>http://localhost:1313/posts/optimal_transport_based_adversarial_patch/</link>
      <description>&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;h1 id=&#34;authors&#34;&gt;Authors:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Mohammed Jawhar&lt;/li&gt;
&lt;li&gt;Aymane Rahmoune&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;paper--optimal-transport-based-adversarial-based-patch-to-leverage-large-scale-attack-transferabilityhttpsopenreviewnetforumidnzp10evtkv&#34;&gt;Paper : &lt;a href=&#34;https://openreview.net/forum?id=nZP10evtkV&#34;&gt;Optimal Transport Based Adversarial Based Patch To Leverage Large Scale Attack Transferability&lt;/a&gt;&lt;/h3&gt;
&lt;h1 id=&#34;table-of-contents-&#34;&gt;Table of contents :&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Understanding Adversarial Patch Attacks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-11&#34;&gt;Decision boundary based&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-12&#34;&gt;Feature point based&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-13&#34;&gt;Distribution based&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Transferability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Optimal Transport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;Experiments&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-41&#34;&gt;Experimental Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-42&#34;&gt;Results and Findings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-421&#34;&gt;Digital Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-422&#34;&gt;Hybrid Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subsection-423&#34;&gt;Physical Experiments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;Reproducibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-0&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Imagine you&amp;rsquo;re showing a picture to a friend, asking them to guess who&amp;rsquo;s in it, then sticking a tiny, almost invisible sticker on that photo. For some reason, this sticker makes your friend completely unable to recognize who&amp;rsquo;s in the picture. This might sound like magic, but something similar can happen with Computer Vision models designed to capture an image content, either through a classification, a segmentation or even a generation task. These AI programs can be vulnerable to such tricks, that we call technically, Adversarial Patch Attacks.&lt;/p&gt;
&lt;p&gt;As AI becomes increasingly integrated into various aspects of our lives, including critical applications like passport security systems, autonomous vehicles, traffic sign detection, and surgical assistance; the reliability, trustworthiness, and performance of these systems under all conditions became of prime importance. This has led to a growing interest in the area of Robust AI, which focuses on enhancing the safety and security of AI technologies by improving their resilience to adverse conditions and digital threats. Within this domain, the study of Attacks and Defense ways plays a pivotal role.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/road_scene.png&#34; alt=&#34;Road_scene&#34;&gt;
&lt;/p&gt;
&lt;p&gt;While these attacks might not seem like a big deal, nor dangerous in this context, the consequences can be severe in critical scenarios - take for example an autonomous vehicle failing to recognize a stop sign, hurting potentially a pedestrian. In this blog we will explore a new approach used for developping such adversarial patch attacks, based on Optimal Transport, as outlined in the paper &lt;em&gt;&lt;strong&gt;Optimal Transport Based Adversarial Patch To Leverage Large Scale Attack Transferability&lt;/strong&gt;&lt;/em&gt;. We will try to follow the same structure as in the paper to make the reading easier for you, but with much more simplicity.&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;Understanding Adversarial Attacks&lt;/h2&gt;
&lt;p&gt;First thing first, let us redefine some previously mentionned concepts, while making them into context.&lt;/p&gt;
&lt;p&gt;As deep neural networks keep getting better, developers are working hard to make sure they are trustworthy and reliable. This means constantly testing them to see how well they can handle different challenges, quantifying their robustness, and developping some robustification methods. In the context of image classification for instance, one way to do this is by designing adversarial attacks, which consists of a perturbation or noise, sometimes invisible patterns added to the input images in order to confuse the model and make it misclassify them, causing a huge drop in the accuracy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adversarial Patch Attacks&lt;/strong&gt; are a specific type that consists of altering only a small part(patch) of the input, either physically or digitally by inserting a crafted &amp;ldquo;sticker&amp;rdquo;. These attacks happen to be more threatful as they can be easily applied in real life, they do not require modification of the entire image, and they can fool multiple, vastly different models with the same crafted patch. This last property is called &lt;strong&gt;transferability&lt;/strong&gt; and aims to test these engineered adversarial patches on various target models, beyond the original one used for learning, even if the two models(source and target) have been trained on different data or use different architectures, to evaluate the attack&amp;rsquo;s efficacy, and measure the models robustness.&lt;/p&gt;
&lt;p&gt;Despite the fact that crafting adversarial patch attacks is mainly based around maximizing the classification error through a gradient ascent, we can differenciate between three distinct approaches:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/APA_strategies.png&#34; alt=&#34;APA_strategies&#34;&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decision boundaries based :&lt;/strong&gt; &lt;a name=&#34;subsection-11&#34;&gt;&lt;/a&gt; Which is the most applied approach in previous works and litterature. It focuses on pushing the image&amp;rsquo;s representation in the neural network&amp;rsquo;s &lt;strong&gt;decision&lt;/strong&gt; space, across the decision boundary, making the network perceive it as belonging to a different, probability maximized class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To simplify this approach, imagine a group of fans attempting to sneak into a VIP section at a concert by dressing in a fancy way, like known VIP guests(targeted class). The idea is to blend in so well that they are indistinguishable from actual VIPs to the security guards (the ML model). Despite the simplicity and goodness of this strategy, it has some drawbacks :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is highly dependant on the model on which the attack is based, which makes it not really transferable: The success of this method hinges on the security&amp;rsquo;s lack of detail. If they are controlled by another security gard who is very familiar with the actual VIPs, the disguises will fail.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The patch may push the corrupted image representations into unknown regions of the representation space: In their attempt to mimic the VIPs, there&amp;rsquo;s a risk that their disguises might be so overdone that they don&amp;rsquo;t resemble any actual VIPs, pushing them to have a weird unique look. Hence, they end up in a no-man&amp;rsquo;s-land, not fitting in with either the regular attendees or the VIPs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feature point based :&lt;/strong&gt; &lt;a name=&#34;subsection-12&#34;&gt;&lt;/a&gt;Instead of crossing a decision boundary, this strategy aims to modify the input so its representation in the &lt;strong&gt;feature space&lt;/strong&gt; matches the one of a target point belonging to a different class. This is like fine-tuning the attack to match a specific &amp;ldquo;signature&amp;rdquo; that the model associates to a specific point.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Revisiting our concert analogy, consider the fans now opting to mimic a specific celebrity known to be attending the concert, assuming that matching this one high-profile individual&amp;rsquo;s appearance will guarantee them entry. Although it seems more precise and effective than the first approach, this strategy has a significan drawback :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It depends heavily on the targeted point selection, this later may be not representative of all instances in the target class :  For instance, if the celebrity is known for a distinctive but uncommon style or if it&amp;rsquo;s unusual for such celebrities to attend such events, their attempt to copy him might not match what the security team usually expects from VIP guests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Distribution based :&lt;/strong&gt; &lt;a name=&#34;subsection-13&#34;&gt;&lt;/a&gt;This new approach implemented in the paper we are analyzing , is based on Optimal Transport theory, and aims to alter the overall feature distribution ofa set of input images belonging to a specific class, to resemble another class&amp;rsquo;s distribution, reducing the gap between them in the &lt;strong&gt;feature space&lt;/strong&gt;. It is more sophisticated than the previous ones as it exploits the fundamental way neural networks process and classify images based on learned distributions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This time, the group studies a wide variety of guests behaviors and appearances to craft a new, ambiguous look that doesn&amp;rsquo;t specifically mimic any single guest type, nor disguise blindly in a &amp;ldquo;VIP&amp;rdquo; style, but instead blends into the overall crowd, avoiding easy detection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main advantage of this approach is that it allows a better transferability between models, enhancing the performance in the blackbox configuration, as it is independant of the classifier&amp;rsquo;s decision boundary , and the choice of a specific target point. Furthermore it captures the useful characteristics (features) from an input in a more universal way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-2&#34;&gt;Why do we need transferability ?&lt;/h2&gt;
&lt;p&gt;You surely noticed that we mentionned the transferability term many times in the last section, showing that is an essential property for designing such attacks, but why do we focus so much to make our patch transferable through many models? Well, it is like discovering a master key for many locks : It enables bad actors to compromise and confuse an AI system using a crafted patch they made without knowing anything about that system(architecture, training,&amp;hellip;).&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/transferability_diagram.png&#34; alt=&#34;transferability_diagram&#34;&gt;
&lt;/p&gt;
&lt;p&gt;This ability to create a &amp;lsquo;one-size-fits-all&amp;rsquo; adversarial patch allows to challenge many models, making it more difficult to develop defense mechanisms, and fostering the development of more robust AI systems. Unfortunately, this important property, which confronts the real-world variability of target systems, whose specific architectures or training details are often unknown, was not achieved strongly by previously developped Adversarial attacks; it was studied only by some specialized Adversarial Patch Attacks models(GAP, LaVan, PS-GAN) and gave very modest rsults, being evaluated on dated, non state of the art models Other models (TTP, M3D, Inkawhich et al.) conducted some experiments to measure the transferability of ivisible adversarial attacks and gave promizing results, but they didn&amp;rsquo;t focus i their work on patch attacks transferability.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;Diving into Optimal Transport theory&lt;/h2&gt;
&lt;p&gt;The method introduced in this paper represents a remarkable success, as it bridges the gap between transferability studies of invisible adversarial examples and adversarial patch attacks, and provides a trade-off between an efficient non complex patch designing approach, and an exceptional transferability among many advanced state-of-the-art models. The key reason for this success lies in the inherent capabilities of &lt;strong&gt;optimal transport&lt;/strong&gt; to measure the distance between two distributions. Particularly, the loss optimized in this method is relevant, as it can be used when the distributions do not overlap, and the theory behind it is intuitive. It is based mainly on the &lt;strong&gt;Wasserstain distance&lt;/strong&gt; defined as :&lt;/p&gt;
&lt;p&gt;$$W_{p}^p(\mu,\nu) = \inf_{\pi \in \Pi(\mu,\nu)} \int_{\mathbb{R}^d \times \mathbb{R}^d} ||x - y||^p d\pi(x, y)$$&lt;/p&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;MathJax Visualization Example&lt;/title&gt;
    &lt;script type=&#34;text/x-mathjax-config&#34;&gt;
    MathJax.Hub.Config({
        tex2jax: {
            inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
            displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]],
            skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;]
        }
    });
    &lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;or its more computationnaly efficient Sliced version, which compares the two distributions by computing the expected Wasserstein distance between their one-dimensional linear projections :
$$SW_{p}^p(\mu,\nu) = \int_{S^{d-1}} W_{p}^p(\theta_{\#}^{*}\mu, \theta_{\#}^{*}\nu) d\sigma(\theta)$$&lt;/p&gt;
&lt;p&gt;
Where $\mu$ and $\nu$ are two propbability distributions on $\mathbb{R}^d$, $||.||$ the euclidean norm, $\pi$ is a transport plan between $\mu$ and $\nu$, and $ \theta_{\#}^{*} \mu $ and $ \theta_{\#}^{*} \nu $ the push-forward by $\theta^{*}(x)=&lt;\theta, x&gt;$ of $\mu$ and $\nu$ respectively.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/Sliced_wasserstain.png&#34; alt=&#34;Sliced Wasserstain&#34;&gt;
  &lt;br&gt;
  &lt;em&gt;This image is taken and adapted from the &lt;a href=&#34;https://theses.hal.science/tel-03533097/document&#34;&gt;Sliced-Wasserstein distance for large-scale machine learning: theory, methodology and extensions&lt;/a&gt; paper.&lt;/em&gt;
&lt;/p&gt;
&lt;!-- $$SW_{p}(\mu,\nu) = \int_{S^{d-1}} W_{p}(\theta_{\#}\mu, \theta_{\#}\nu) d\sigma(\theta)$$--&gt;
&lt;p&gt;To delve more into the mathematical details, let us explore how Optimal Transport, specifically the Wasserstein distance, is employed to craft effective adversarial examples:
In the context of image classification, we consider the standard notation where a set of image-label pairs $(x_i, y_i)$ is drawn from a joint distribution of random variables $X$ and $Y$. The images $X$ are typically multi-dimensional arrays representing the height, width, and color channels of an image (e.g., a colored $256 \times 256$ pixel image would have $h = 256$, $w = 256$, and $c = 3$). Meanwhile, $Y$ is a set of discrete labels that classify these images (e.g., &amp;lsquo;cat&amp;rsquo;, &amp;lsquo;dog&amp;rsquo;, etc.). Within a given encoder-decoder neural network $F$, designed to predict these labels, the encoder function $f$ compresses the raw image data $X$ throughout each pooling layer into a feature space $S^{(l)}$, capturing essential patterns.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/Optimal transport.png&#34; alt=&#34;Optimal Transport&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The Wasserstein distance $W_p$, calculated between the distributions of these feature spaces, reflects how much &amp;ldquo;effort&amp;rdquo; it would take to transform the distribution of features from one class into another. In the case of the proposed method, crafting the patch consits of minimizing the transformation cost (distance)of the features distribution from a corrupted &amp;ldquo;true&amp;rdquo; class into a &amp;ldquo;target&amp;rdquo; adversarial class across multiple layers. This can be formulated as follows:&lt;/p&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;MathJax Visualization Example&lt;/title&gt;
    &lt;script type=&#34;text/x-mathjax-config&#34;&gt;
    MathJax.Hub.Config({
        tex2jax: {
            inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
            displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]],
            skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;]
        }
    });
    &lt;/script&gt;
    &lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;
$$\delta^* = \arg \min_{\delta} \mathbb{E}_X \left[ \sum_{l \in \mathcal{L}} OT(\mu_{X_{\delta}}^{(l)}, \nu_y^{(l)}) \right]$$&lt;/p&gt;
&lt;p&gt;
Where $OT$ is the optimal transport distance (Wasserstein or Sliced Wasserstein), $\mu_{X_{\delta}}^{(l)}$ is the feature distribution of images with the patch and $\nu_y^{(l)}$ is the target feature distribution for the incorrect class.&lt;/p&gt;
&lt;p&gt;This can be further enhanced by adding a regularization term to ensure that the patches are effective under various conditions, and can be physically realisable. The problem becomes as follows :&lt;/p&gt;
&lt;p&gt;
$$\delta^* = \arg \min_{\delta} \mathbb{E}_{X, t\sim \tau, e\sim E} \left[ \sum_{l \in \mathcal{L}} OT(\mu_{A(\delta, X, e, t)}^{(l)}, \nu_y^{(l)}) + TV(\delta)\right]$$
where TV is the total variation loss discouraging high-frequency patterns.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;h2 id=&#34;section-4&#34;&gt;Experiments&lt;/h2&gt;
&lt;h3 id=&#34;experimental-setup-a-namesubsection-41a&#34;&gt;Experimental setup &lt;a name=&#34;subsection-41&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To confirm the theoretical results and assumptions, several experiments were conducted under different conditions and settings. For the sake of simplicity, we will not delve into the exhaustive details of the experimental setup, procedures, and results. In summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The experiments aimed to evaluate the impact and transferability of the proposed adversarial patch - referred to as $(W_2^2)^{(1)} / (SW_2^2)_{500}^{(1)}$ - across a range of models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$(W_2^2)^{(1)} / (SW_2^2)_{500}^{(1)}$ performance was benchmarked against other adversarial patch attack (APA) methods such as GAP, LaVAN, TNT, TTP, M3D, and others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The source and target models chosen for this analysis were regrouped into six categories based on their architecture: CNNs-V1, CNNs-V2, ENet, CNext(ConvNext), DeiT, and Swin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tested patches were randomly placed to the side of images, in order to avoid occluding the object of interest and replicate more closely the real world conditions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Targeted success rate (tSuc)&lt;/strong&gt; metric was used for evaluating transferability. It consists of the percentage of instances where the network, when presented with an image containing the adversarial patch, incorrectly classifies the image as the attacker&amp;rsquo;s intended target class, out of the total number of attempts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;results-and-findings--a-namesubsection-42a&#34;&gt;Results and Findings : &lt;a name=&#34;subsection-42&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The experiments are structured into three main categories:&lt;/p&gt;
&lt;h4 id=&#34;digital-experiments--a-namesubsection-421a&#34;&gt;Digital experiments : &lt;a name=&#34;subsection-421&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h5 id=&#34;simple-configuration-&#34;&gt;Simple configuration :&lt;/h5&gt;
&lt;p&gt;In this configuration, the patches efficacy was tested in a purely digital environment, using images from the ImageNet-1K dataset, which was used also for training. Patches were first designed to attack one of the source models, then tested on other target models to measure the attacking transferability. The table below summarizes for each APA method, the best transferring attack performance achieved :&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/Digital_transferability.png&#34; alt=&#34;Digital Transferability&#34;&gt;
&lt;/p&gt;
&lt;p&gt;As expected through the novelty of $(W_2^2)^{(1)} / (SW_2^2)_{500}^{(1)}$ approach, it shows the highest transferability capacity(mean, min and max) and outperforms all the other methods. Additionaly, we can make the following observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Networks trained with older training recipes (CNNs-v1) seem more vulnerable to attacks, unlike tansformers and models trained with new training recipes (scheduler, augmenting training data like RandAug and Mixup, &amp;hellip;) which appear to be more robust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For all APA methods, patches learned using Swin or CNext are more universal as they can transfer uniformly to multiple models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In general, baseline methods tend to overfit and fail to generate patches that effectively transfer to complex architectures like CNext and Swin models, even if these patches are developed using the same category of models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods based on feature space optimization, including L2 and the $(W_2^2)^{(1)} / (SW_2^2)_{500}^{(1)}$ approach, demonstrate improved transferability and are less likely to overfit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;robustified-configuration-&#34;&gt;Robustified configuration :&lt;/h5&gt;
&lt;p&gt;In the second configuration of the digital experiments, the same procedures were reapplied. However this time, the methods learn on Swin, and transfer to a robustified version, by Local Gradients Smoothing (LGS) - a defense mechanism smoothing salient regions in images before passing them to the network - , of the six model categories.&lt;/p&gt;
&lt;p&gt;Similarly, $(W_2^2)^{(1)} / (SW_2^2)_{500}^{(1)}$ outperforms significantly all other methods as we can see in the following table :&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/Digital_robustified.png&#34; alt=&#34;Digital robustified&#34;&gt;
&lt;/p&gt;
&lt;h4 id=&#34;hybrid-experiments-a-namesubsection-422a&#34;&gt;Hybrid experiments: &lt;a name=&#34;subsection-422&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In order to simulate real-world applications more closely, the hybrid experiments conducted within this section involved printing adversarial patches trained with Swin, placing them in physical environments, capturing the images, and then digitally analyzing the results, for simple, and robustified models.&lt;/p&gt;
&lt;p&gt;The table below shows the criticality of the $(W_2^2)^{(1)} / (SW_2^2)_{500}^{(1)}$ giving very large tSuc in comparison with the other methods, for all settings:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;./images/image_optimal_transport_patch/Digital_robustified.png&#34; alt=&#34;Digital robustified&#34;&gt;
&lt;/p&gt;
&lt;h4 id=&#34;physical-experiments-a-namesubsection-423a&#34;&gt;Physical experiments: &lt;a name=&#34;subsection-423&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In this last experiments category, we get closer to the real world situations, by recording a video of some ImageNet-1K objects (banana, cup , keyboard) while moving a designed patch in the set. This aims to quantify the severity of each attack, for realistic scenarios (as the example provided above about the autonomous vehicule not detecting the stop sign while driving due to an adversarial patch designed without knowing the AI system at all).&lt;/p&gt;
&lt;p&gt;All APA methods failed to transfer properly on all architectures except for L2 with a modest tSuc(9.3%) and $(W_2^2)^{(1)} / (SW_2^2)_{500}^{(1)}$ that gave much better results (23.4% and 29.3%)&lt;/p&gt;
&lt;h2 id=&#34;section-5&#34;&gt;Reproducibility&lt;/h2&gt;
&lt;p&gt;In this section, we wanted to reproduce some of the experiments conducted in the paper to validate the results and the findings. However, by exploring the code provided with the paper, and analyzing the python files, we found that it is not well documented, and the structure is not very clear, which makes it difficult to understand and reproduce the complex experiments involving transferability evaluation. Furthermore, given that the paper is based on the ImageNet dataset, which is very large and requires a lot of computational resources, we were not able to run the experiments on our local machines, as we do not have access to a powerful GPU cluster. Consequently, we opted for the CIFAR-10 dataset, which is smaller and more manageable. Despite this adjustment, we still faced some issues Specifically, the model is built from scratch without an available pre-trained, and there are missing components, notably the function required to extract feature vectors from each layer of the target models. To address these challenges and make the reproduction process easier, we decided to develop the missing feature extraction function as an enhancement, and save the obtained results into files(in the same way it was done in the code), to be able to apply the optimal transport method and craft the adversarial patches later as perspectives&lt;/p&gt;
&lt;p&gt;Here are the code that we developed :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torchvision.models&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;models&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torchvision.transforms&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;transforms&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch.utils.data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;DataLoader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torchvision.datasets&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;datasets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;get_loader&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;dataset&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;batch_size&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;DataLoader&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Return a DataLoader object for a given dataset and split.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;utils&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;DataLoader&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;get_dataset&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;dataset&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;batch_size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;batch_size&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;shuffle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;extract_features&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;data_loader&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;list_models&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;    Extracts features from each layer of the pre-trained models provided in the list_models
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;    by applying average pooling, and saves the extracted features into files.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;model_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;list_models&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;__dict__&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;model_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;pretrained&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;eval&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;layer_name&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;layer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;named_children&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;isinstance&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;layer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;nn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Sequential&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;layer_features&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;enumerate&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;data_loader&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#00a8c8&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;no_grad&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;layer&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;nn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;functional&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;adaptive_avg_pool2d&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;view&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#111&#34;&gt;layer_features&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;output&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;layer_features&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;cat&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;layer_features&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#111&#34;&gt;torch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;save&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;layer_features&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;./data/CIFAR/all_images_feature/&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;layer_name&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;model_name&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;.pt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Apply the function extract_features to some targeted models&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;list_models&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;resnet18&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;vgg19&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;convnext_tiny&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;swin_t&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;data_loader&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;get_loader&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;CIFAR10&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;train&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;batch_size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;extract_features&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;data_loader&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;list_models&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;section-6&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, our exploration of the paper &lt;em&gt;&lt;strong&gt;OPTIMAL TRANSPORT BASED ADVERSARIAL PATCH TO LEVERAGE LARGE SCALE ATTACK TRANSFERABILITY&lt;/strong&gt;&lt;/em&gt;, revealed an innovative and promizing technique that uses Optimal Transport to make adversarial patches more effectively fool different models. This method, focusing on altering image feature distributions to match a target distribution from another class, has proven to be both theoretically sound and practically successful. It significantly outperforms current state of the art methods in creating patches that can be highly transferable between models and potentially very harmful, showing great promise for both advancements in the field and potential challenges in security applications.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openreview.net/forum?id=nZP10evtkV&#34;&gt;OPTIMAL TRANSPORT BASED ADVERSARIAL PATCH TO LEVERAGE LARGE SCALE ATTACK TRANSFERABILITY&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://theses.hal.science/tel-03533097/document&#34;&gt;Sliced-Wasserstein distance for large-scale machine learning : theory, methodology and extensions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://arxiv.org/pdf/1803.00567.pdf&#34;&gt;Computational Optimal Transport&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openaccess.thecvf.com/content_CVPR_2019/papers/Inkawhich_Feature_Space_Perturbations_Yield_More_Transferable_Adversarial_Examples_CVPR_2019_paper.pdf&#34;&gt;Feature Space Perturbations Yield More Transferable Adversarial Examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/optimal_transport_based_adversarial_patch/</guid>
      <pubDate>Sat, 03 Feb 2024 22:22:36 +0100</pubDate>
    </item>
    
    <item>
      <title>Statistical Minimax Rates Under Privacy</title>
      <link>http://localhost:1313/posts/statistical_minimax_rates_under_privacy/</link>
      <description>&lt;h1 style=&#34;font-size: 36px;&#34;&gt;Estimating Privacy in Data Science: A Comprehensive Guide&lt;/h1&gt;
&lt;h1 style=&#34;font-size: 24px;&#34;&gt;Author: Antoine Klein &lt;a href=&#34;https://github.com/AntoineTSP&#34;&gt;Github Link&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-0&#34;&gt;Incentives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-1&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-2&#34;&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-3&#34;&gt;Theory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-4&#34;&gt;The case of multinomial estimation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-5&#34;&gt;The case of density estimation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-6&#34;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-7&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-8&#34;&gt;Quizz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;section-0&#34;&gt;Why do we care about privacy ?&lt;/h2&gt;
&lt;p&gt;Imagine, you&amp;rsquo;re quietly at home when the doorbell rings. You open the door and a government official appears: population census. Even though he shows you his official badge and you&amp;rsquo;d like to help him in the public interest, you find it hard to answer his questions as you go along. Indeed, the first questions about the date of your move are easy and public. On the other hand, when he asks about the number of children, marital status or your salary and what you do with it, you &lt;em&gt;struggle&lt;/em&gt;. Not because you don&amp;rsquo;t know the answer, but because you&amp;rsquo;re faced with an &lt;strong&gt;ethical dilemma&lt;/strong&gt;: transparency towards the state versus protection of personal data.&lt;br&gt;
$$\text{In short, transparency goes against your privacy. }$$&lt;/p&gt;
&lt;p&gt;This stress has major consequences: as you doubt what could happen to you with this data, but you still want to answer it, you &lt;strong&gt;underestimate&lt;/strong&gt; your answers. On a wider scale, this leads to a &lt;strong&gt;suffrage bias&lt;/strong&gt; and therefore a lack of knowledge of the real situation of your population. Warner [1], the first to tackle this problem from a statistical angle talks of an evasive bias and says:&lt;br&gt;
&lt;strong&gt;&amp;ldquo;for reasons of modesty, fear of being thought bigoted, or merely a reluctance to confide secrets to strangers, respondents to surveys might prefer to be able to answer certain questions non-truthfully, or at least without the interviewer knowing their true response&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This situation presented a trusted agent, in that he wasn&amp;rsquo;t trying to harm you directly. Now imagine that you agree to give him your personal data, but that on the way home, this agent of the state is mugged and someone steals his documents. Not only is this an attack on his person, it&amp;rsquo;s also an attack on yours: as the guarantor of your data, it&amp;rsquo;s now at the mercy of the attacker. The problem here is &lt;strong&gt;not to have protected yourself against a malicious agent&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Admittedly, these situations are rare, but with the densification of data, their analogies are omnipresent: cookies on the Internet, cyber-attacks, datacenter crashes&amp;hellip;One area for improvement is quite simply to better &lt;strong&gt;certify usage&lt;/strong&gt; by means of cyber protection labels and leads to such a norm to achieve trust:
&lt;img
  src=&#34;./images/Antoine_Klein/Umbrella.png&#34;
  alt=&#34;Data Privacy2&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;In this blog, we propose to tackle this problem from a completely different angle: &lt;strong&gt;how to both enable the agent to take global measures and prevent it and any subsequent malicious agents from being able to re-identify my personal data&lt;/strong&gt;. We&amp;rsquo;ll also use minimax bounds to answer the question: &lt;strong&gt;for a given privacy criterion, what&amp;rsquo;s the loss in terms of estimation?&lt;/strong&gt; (fundamental trade-offs between privacy and convergence rate)&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;Scientific introduction&lt;/h2&gt;
&lt;p&gt;Our blog will follow the same plan as the article that inspired it (John C. Duchi [2]),i.e. to show that &lt;strong&gt;response randomization achieves optimal convergence&lt;/strong&gt; in the case of multinomial estimation, and then that this process can be generalized to any &lt;em&gt;nonparametric distribution estimation&lt;/em&gt;. To this end, we will introduce the notion of &lt;strong&gt;local differential privacy&lt;/strong&gt; as well as the &lt;strong&gt;minimax theory&lt;/strong&gt; for obtaining optimal limits. All this will shed light on the &lt;strong&gt;trade-off between privacy and estimation rates&lt;/strong&gt;. We will also explain algorithms to implement these optimal strategies. Finally, we will propose some experimental results.&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;Some key definitions&lt;/h2&gt;
&lt;p&gt;Let assume that you want to make private $X_1 , &amp;hellip; , X_n \in X$ random variable and, as the statistician, you only observe $Z_1, . . . , Z_n ∈ Z$. The paper assumes that there exist a &lt;strong&gt;markov kernel&lt;/strong&gt; that links the true ramdom variables and the observed ones as follow: $Q_i(Z_i | X_i = x)$.&lt;/p&gt;
&lt;p&gt;The privacy mechanism is to be said &lt;strong&gt;non interactive&lt;/strong&gt; if each $Z_i$ is obtained only conditionnaly on $X_i$ (and not on the others). This represents the fact that the privacy mechanism is &lt;strong&gt;memory less&lt;/strong&gt;. If not, the mechnism is said to be interactive.&lt;/p&gt;
&lt;p&gt;In the following, we will work only with non-interactive privacy mechanism but in the conlusion we will claim that newer studies showed that it is not enough for some larger problems.&lt;/p&gt;
&lt;p&gt;$Z_i$ is said to be &lt;strong&gt;α-local-differentially private&lt;/strong&gt; for the original data $X_i$ if $$sup(\frac{Q(Z | X_i = x)}{Q(Z | X_i = x&amp;rsquo;)} | x, x&amp;rsquo; ∈ X) ≤ exp(α)$$.&lt;/p&gt;
&lt;p&gt;An intuitive way of understanding this definition is to see that the smaller α is (the more private it is), the more &lt;strong&gt;difficult it is to distinguish&lt;/strong&gt; the distribution of Z conditional on two different X data.&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;Theoretical results&lt;/h2&gt;
&lt;h3 id=&#34;section-4&#34;&gt;The case of multinomial estimation&lt;/h3&gt;
&lt;p&gt;In this section, we return back to the problem of the private survey. For the statistician view, estimating a survey is estimating the parameter θ from the Bernouilli distribution $B(θ)$.
This problem is a special case of multinomial estimation, where &lt;code&gt;θ&lt;/code&gt; is now a multidimensional parameter that is amenable to simplex probability. $∆&lt;em&gt;d := (θ ∈ ℝ&lt;/em&gt;+ |∑θ_j = 1)$.&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Recall&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem :&lt;/strong&gt; Given α-local-differentially private $Z_i$, there exists some arbitrary constants $C_1$, $C_2$ such that for all $\alpha\in [0,1]$:
$$C_1 min(1, \frac{1}{\sqrt{n\alpha^2}}, \frac{d}{n\alpha^2}) ≤ E[|θ_{hat} - θ|^2] ≤ C_2 min(1, \frac{d}{n\alpha^2})$$ and
$$C_1 min(1,\frac{1}{\sqrt{n\alpha^2}}) ≤ E[||θ_{hat} - θ||_1] ≤ C_2 min(1,\frac{d}{\sqrt{n\alpha^2}})$$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recall from standard statistics:&lt;/strong&gt; For non private independant $Z_i$ with finite variance, there exists some arbitrary constants $C_3$ such that:
$$E[|θ_{hat} - θ|^2] ≤ \frac{C_3}{n}$$&lt;/p&gt;
&lt;p&gt;In others term, providing α-local-differentially privacy &lt;strong&gt;causes a reduction&lt;/strong&gt; in the effective sample size of a factor $\frac{\alpha^2}{d}$ for best situations. It thus means that the &lt;strong&gt;asymptotically rate of convergences remains unchanged&lt;/strong&gt; which is a really good news !&lt;/p&gt;
&lt;h4 id=&#34;practical-strategies&#34;&gt;Practical strategies&lt;/h4&gt;
&lt;p&gt;The paper deals with one of the 2 standard methods to implement such a strategy that obtains the minimax rates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-10&#34;&gt;Randomized responses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-11&#34;&gt;Laplace Noise (beyond paper)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;section-10&#34;&gt;Randomized responses&lt;/h5&gt;
&lt;p&gt;The &lt;em&gt;intuition&lt;/em&gt; of this section is the following : &lt;strong&gt;to not allow the statistician to retrieve your personnal data&lt;/strong&gt; in case of Bernouilli distribution, you toss a coin. If it is heads, you say to him your reel answer, if it is tails, you say the opposite. In his point of view, as he doesn&amp;rsquo;t know what was the result of the coin, &lt;strong&gt;he can&amp;rsquo;t distinguish&lt;/strong&gt; if you tell the true or not but in a large scale, he knows that he will have half correct answer, half lies so that he can retrieve information.&lt;/p&gt;
&lt;p&gt;For the multinomial estimation now, you will generalize this procedure to the multidimensionnal setting. For each coordinate, you will tell to the statistician the reel answer with a certain probability and lies otherwise. More precisely, its leads to :&lt;/p&gt;
&lt;p&gt;$$[Z]_j = x_j \text{ with probability } \frac{e^\frac{\alpha}{2}} {1 + e^\frac{\alpha}{2}}$$
$$[Z]_j = 1 - x_j \text{ with probability } \frac{1}{1 + e^\frac{\alpha}{2}}$$&lt;/p&gt;
&lt;p&gt;Such a mechanism achieves &lt;em&gt;α-local-differentially privacy&lt;/em&gt; because one can show that :&lt;/p&gt;
&lt;p&gt;$$\frac{Q(Z = z | x)}{Q(Z = z | x&amp;rsquo;)} = e^\frac{\alpha}{2}(||z - x||_1 - ||z - x&amp;rsquo;||_1) \in [e^{-\alpha}, e^\alpha]$$ which is the criteria given above.&lt;/p&gt;
&lt;p&gt;With the notation as $1_d=[1, 1, 1, &amp;hellip;, 1]$ corresponds to a d-vector with each coordinate equals 1, we can also show that :&lt;/p&gt;
&lt;p&gt;$$E[Z | x] = \frac{e^\frac{\alpha}{2} - 1}{e^\frac{\alpha}{2} + 1} * x + \frac{1}{1 + e^\frac{\alpha}{2}}1_d$$&lt;/p&gt;
&lt;p&gt;This leads to the natural moment-estimator :&lt;/p&gt;
&lt;p&gt;$$θ_{hat} = \frac{1}{n} ∑_{i=1}^{n} \frac{Z_i - 1_d}{1 + e^\frac{\alpha}{2}} * \frac{e^\frac{\alpha}{2} + 1}{e^\frac{\alpha}{2} - 1}$$&lt;/p&gt;
&lt;p&gt;One can also show that it verifies :&lt;/p&gt;
&lt;p&gt;$$E[ ||θ_{hat}- θ||_2] ≤  \frac{d}{n} * \frac{(e^\frac{\alpha}{2} + 1)^2}{(e^\frac{\alpha}{2} - 1)^2} &amp;lt; \frac{C_3}{nα^2}$$ which is the announced result.&lt;/p&gt;
&lt;h5 id=&#34;section-11&#34;&gt;Laplace Noise (beyond paper)&lt;/h5&gt;
&lt;p&gt;Instead of saying the truth with some probability, one may think of &lt;strong&gt;adding noise&lt;/strong&gt; to the answer so that the statistician can&amp;rsquo;t retrieve his real answer. This is exactly the mechanism we propose to dive in and which is &lt;strong&gt;not covered in the paper&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; A noise is said to be a Laplace noise with parameters (μ, b) if it verifies:&lt;br&gt;
$$f(x|μ, b) = \frac{1}{2b} * exp(\frac{-|x - μ|}{b})$$&lt;/p&gt;
&lt;p&gt;A visualisation for differents parameters is given below. We can see that Laplace distribution is a &lt;strong&gt;shaper verson of the gaussian distribution&lt;/strong&gt; :
&lt;img
  src=&#34;./images/Antoine_Klein/Laplace.png&#34;
  alt=&#34;Laplace&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;The trick is to use such a noise. Let assume $X_i \in [-M,M]$ and construct the private mechanism as follow:&lt;br&gt;
$$Z_i = X_i + \sigma W_i$$ where $W_i$ is drawn from a Laplace noise (0,1).&lt;/p&gt;
&lt;p&gt;One can show that :&lt;/p&gt;
&lt;p&gt;$$\frac{Q(Z = z | x)}{Q(Z = z | x&amp;rsquo;)} \leq e^{\frac{1}{\sigma} * |x - x&amp;rsquo;|} \leq e^{\frac{2M}{\sigma}}$$&lt;/p&gt;
&lt;p&gt;Thus, with the choice of $\sigma = \frac{2M}{\alpha}$, &lt;strong&gt;it verifies α-local-differentially privacy&lt;/strong&gt;. The proposed estimator is the following :&lt;br&gt;
$$\hat{Z} = \bar{X} + \frac{2M}{\alpha} \bar{W}$$&lt;/p&gt;
&lt;p&gt;One can show that it is an unbiaised estimator that achieves the optimal rates:&lt;br&gt;
$$E[\hat{Z}] = E[X]$$&lt;br&gt;
$$V[\hat{Z}] = \frac{V(X)}{n} + \frac{4M^2}{n\alpha^2} V[\bar{W}] = \frac{V(X)}{n} + \frac{8M^2}{n\alpha^2}$$
$$E[ |\hat{Z}- X|^2] \leq \frac{C_3}{n\alpha^2}.$$&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;exactly the optimal rates&lt;/strong&gt;, quite outstanding !&lt;/p&gt;
&lt;h3 id=&#34;section-5&#34;&gt;The case of density estimation&lt;/h3&gt;
&lt;p&gt;One accurate question that can raise is : &lt;strong&gt;what about others distribution ?&lt;/strong&gt; Is privacy more costly in general cases ? What is the trade-off ?&lt;/p&gt;
&lt;p&gt;To answer this question, let&amp;rsquo;s precise the problem.&lt;/p&gt;
&lt;p&gt;We want to estimate in a non-parametric way a 1D-density function &lt;code&gt;f&lt;/code&gt; belonging to one of theses classes :&lt;br&gt;
-&lt;strong&gt;Hölder Class (β, L):&lt;/strong&gt; $\text{For all }x, y \in \mathbb{R} \text{ and } m \leq \beta, \quad \left| f^{(m)}(x) - f^{(m)}(y) \right| \leq L \left| x - y \right|^{\beta - m}$&lt;br&gt;
-&lt;strong&gt;Sobolev Class:&lt;/strong&gt; $F_{\beta}[C] := \left( f \in L^2([0, 1]) , \middle| , f = \sum_{j=1}^{\infty} \theta_j \phi_j \text{ such that } \sum_{j=1}^{\infty} j^{2\beta} \phi_j^2 \leq C^2 \right)$&lt;/p&gt;
&lt;p&gt;In a intuitition way, those two classes express that &lt;code&gt;f&lt;/code&gt; is &lt;strong&gt;smooth enough&lt;/strong&gt; to admits Lipschitz constant to its derivative so that it doesn&amp;rsquo;t &amp;ldquo;vary&amp;rdquo; locally too much.&lt;/p&gt;
&lt;h4 id=&#34;theorem&#34;&gt;Theorem&lt;/h4&gt;
&lt;h5 id=&#34;without-privacy&#34;&gt;Without privacy&lt;/h5&gt;
&lt;p&gt;One can show that without privacy, the minimax rate achievable for estimating a Hölder Class function is:&lt;br&gt;
$$\text{MSE}(\hat{f} - f) \leq C_1 \cdot n^{-\frac{2\beta}{1+2\beta}}$$ with the estimator&lt;br&gt;
$$\hat{f}(x) = \frac{1}{n} \sum_{i=1}^{n} \frac{1}{h} K\left(\frac{x - X_i}{h}\right) \text{with } h = C_2 \cdot n^{-\frac{1}{2\beta+1}}$$&lt;/p&gt;
&lt;p&gt;In the case of d-multidimensionnal density &lt;code&gt;f&lt;/code&gt;, the optimal rate is :&lt;br&gt;
$$\text{MSE}(\hat{f} - f) \leq C_4 \cdot n^{-\frac{2\beta}{d+ 2\beta}}$$ with the estimator&lt;br&gt;
$$\hat{f}(x) = \frac{1}{n} \sum_{i=1}^{n} \frac{1}{h^d} K^d\left(\frac{x-X_i}{h}\right) \quad \text{with} \quad h = C_5 \cdot n^{-\frac{1}{2\beta + d}}$$&lt;/p&gt;
&lt;p&gt;This illustrates once again the &lt;strong&gt;curse of dimensionnality&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id=&#34;with-privacy&#34;&gt;With privacy&lt;/h5&gt;
&lt;p&gt;Let assume that &lt;code&gt;f&lt;/code&gt; bellongs to one of the two classes with  &lt;code&gt;β&lt;/code&gt; as smoothness parameter.&lt;br&gt;
Then, the optimal α-local-differentially private optimal rate is :&lt;br&gt;
$$\text{MSE}(\hat{f} - f) \leq C_1 \cdot (n\alpha^2)^{-\frac{2\beta}{2\beta+2}}.$$&lt;/p&gt;
&lt;p&gt;One may observe &lt;strong&gt;two pessimistic news&lt;/strong&gt;:&lt;br&gt;
-The rate is &lt;strong&gt;affected by a factor&lt;/strong&gt; of $\alpha^2$ as for the multinomial estimation&lt;br&gt;
-More damageable: the &lt;strong&gt;rate is slower&lt;/strong&gt; in term of &lt;code&gt;n&lt;/code&gt; unlike the previous problem which make privacy in this case &lt;strong&gt;more costly&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id=&#34;practical-strategies-1&#34;&gt;Practical strategies&lt;/h5&gt;
&lt;p&gt;Eventhough this rate is pessimistic and proves that &lt;strong&gt;privacy comes at a cost&lt;/strong&gt;, it remains to illustrates how can we achieves this best but not great rate.
For this end, once again, two strategies are possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section-12&#34;&gt;Randomized responses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section-13&#34;&gt;Laplace Noise (beyond paper)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;section-12&#34;&gt;Randomized responses&lt;/h5&gt;
&lt;p&gt;This is the strategy illustrated in the paper and consists of sampling for each coordinate according the realisation of a Bernouilli variable with the correct probability as function of &lt;code&gt;α&lt;/code&gt;.
As it is not the most comprehensive and straightforward method, &lt;strong&gt;we prefer to dive in depth into the second one; uncovered in the paper&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id=&#34;section-13&#34;&gt;Laplace Noise (beyond paper)&lt;/h5&gt;
&lt;p&gt;Let assume that $X_i \in [0,M]$ almost surely. We note $G_j = [\frac{j-1}{K},\quad \frac{j}{K}]$ the bin of length $\frac{1}{K}$.&lt;/p&gt;
&lt;p&gt;We consider the histogramm estimator:
$$\hat{f}(x) = \frac{K}{n} \sum_{j=1}^{K} \sum_{i=1}^{n} 1_{X_i \in G_j} \cdot 1_{x \in G_j}.$$&lt;/p&gt;
&lt;p&gt;We now construct the private mechanism as follow:&lt;br&gt;
$$Z_i = \left[1_{X_i \in G_1} + \frac{2}{\alpha} W_1, \ldots, 1_{X_i \in G_K} + \frac{2}{\alpha} W_K\right]$$&lt;/p&gt;
&lt;p&gt;In an intuitive way, we add a Laplace noise realisation for each bin.&lt;/p&gt;
&lt;p&gt;This guarantees α-local-differentially privacy as :
$$\frac{Q(Z = z | x)}{Q(Z = z | x&amp;rsquo;)} \leq \exp\left(\frac{\alpha}{2} \sum_{j=1}^{K} |1_{x \in G_j} - 1_{x&amp;rsquo; \in G_j}| \right) \leq \exp\left(\frac{\alpha}{2} \cdot 2\right).$$&lt;/p&gt;
&lt;p&gt;This leads to the α-local-differentially private estimator :&lt;br&gt;
$$f_{\text{private_estimate}} = \hat{f} + \frac{2K}{n\alpha} \sum_{j=1}^{K} W_j$$&lt;/p&gt;
&lt;p&gt;The biais is the same as the unprivate case as :&lt;br&gt;
$$E[f_{\text{private_estimate}}] = E[\hat{f}] + 0 .$$&lt;/p&gt;
&lt;p&gt;One may prove that if f bellongs to the β-Hölder Class:&lt;br&gt;
$$Biais(f_{\text{private_estimate}}, f) \leq C_1 * K^{-\beta}$$&lt;/p&gt;
&lt;p&gt;Meanwhile, $$V[f_{\text{private_estimate}}] \leq \frac{C_2}{n} + \frac{4K^2}{\alpha^2} \frac{V[W]}{n}$$, such that in total  :&lt;br&gt;
$$\text{MSE}(f_{\text{private_estimate}} - f) \leq C_1 K^{-2\beta} + \frac{C_2}{n} + \frac{C_3 K^2}{n\alpha^2}.$$
Minimizing over K (hyperparameters) leads to :  $K = C_4 \cdot (n\alpha^2)^{-\frac{1}{2\beta+2}}$ and thus to:&lt;br&gt;
$$\text{MSE}(f_{\text{private_estimate}} - f) \leq C_5 \cdot (n\alpha^2)^{-\frac{2\beta}{2\beta + 2}}$$, which is the expected bound.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;section-6&#34;&gt;Experiment: Illustration of the Minimax privacy rate&lt;/h2&gt;
&lt;h3 id=&#34;section-111&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;The aim of this section is to &lt;strong&gt;provide illustrations of the theoretical results&lt;/strong&gt; set out above. Emphasis is placed on convergence results, with empirical confirmation of the latter.&lt;/p&gt;
&lt;p&gt;For the sake of &lt;strong&gt;reproducibility and transparency&lt;/strong&gt;, the source code can be found in the notebook at this: &lt;a href=&#34;https://github.com/AntoineTSP/responsible-ai-datascience-ipParis.github.io.git&#34;&gt;Github link&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;methodology&#34;&gt;Methodology&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Data Preparation&lt;/strong&gt;: Rather than working with real datasets, we decide to work with simulated data, as this allows us to maintain control over all aspects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More precisely, we give ourselves $n=1000$ samples of the normal distribution $N(100,1)$ on which we add a Laplace noise $L(0,\alpha).$&lt;br&gt;
As for the different alpha values, we iterate through them: $[0.2, 0.3, 0.5, 0.7]$&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Privacy Metric Calculation&lt;/strong&gt;: We will look at the use case of estimating the mean of a distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Evaluation&lt;/strong&gt;: The results will be compared in terms of Mean Square Error (MSE).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;p&gt;In terms of the observed distribution (private because subject to Laplace noise) relative to the true data, we obtain the following figure:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Antoine_Klein/Private_distribution.png&#34;
  alt=&#34;Data Privacy2&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;As expected, the greater the desired privacy (low $\alpha$), &lt;strong&gt;the more spread out&lt;/strong&gt; the distribution of observed data.&lt;/p&gt;
&lt;p&gt;When it comes to estimating the true average from private data, we obtain the following figure:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Antoine_Klein/Estimated_mean.png&#34;
  alt=&#34;Data Privacy2&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;This figure illustrates two major points:&lt;br&gt;
-The first is that whatever the level of privacy, we have an &lt;strong&gt;unbiased estimator&lt;/strong&gt; of the mean. It&amp;rsquo;s a beautiful property, empirically verified !&lt;br&gt;
-The second is that, unfortunately, the greater the privacy (low alpha), &lt;strong&gt;the greater the variance&lt;/strong&gt; of this estimator.&lt;/p&gt;
&lt;p&gt;We recall our main theorem demonstrated above &lt;a href=&#34;#Recall&#34; style=&#34;background-color: yellow; padding: 2px 5px; border-radius: 3px;&#34;&gt;Previous theorem&lt;/a&gt; :&lt;br&gt;
&lt;strong&gt;Theorem&lt;/strong&gt; : Given α-local-differentially private $Z_i$, there exists some arbitrary constants $C_1$, $C_2$ such that for all $\alpha\in [0,1]$:
$$C_1 min(1, \frac{1}{\sqrt{n\alpha^2}}, \frac{d}{n\alpha^2}) ≤ E[|θ_{hat} - θ|^2] ≤ C_2 min(1, \frac{d}{n\alpha^2})$$&lt;/p&gt;
&lt;p&gt;We now want to &lt;strong&gt;compare the theoretical optimal rate with empirical results&lt;/strong&gt;. To do this, we distinguish two situations:&lt;br&gt;
-The first is with &lt;strong&gt;fixed alpha&lt;/strong&gt;, and determines the MSE as a function of the number of samples n. This leads to these empirical results:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Antoine_Klein/Minimax_rate_n.png&#34;
  alt=&#34;Data Privacy2&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;The dotted line represents the regime of the theoretical bound of the form $n \rightarrow \frac{C1}{n}$ . This is the shape of the empirical curves!&lt;/p&gt;
&lt;p&gt;-The second has a &lt;strong&gt;fixed n&lt;/strong&gt; and determines the MSE as a function of alpha. This leads to these empirical results:&lt;/p&gt;
&lt;p&gt;&lt;img
  src=&#34;./images/Antoine_Klein/Minimax_rate_alpha.png&#34;
  alt=&#34;Data Privacy2&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&lt;/p&gt;
&lt;p&gt;The dotted line represents the regime of the theoretical bound of the form $\alpha \rightarrow \frac{C1}{\alpha^2}$ . This is once again the shape of the empirical curves quite surprisingly!&lt;/p&gt;
&lt;h3 id=&#34;section-7&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;From a problem rooted in an &lt;strong&gt;ethical dilemma&lt;/strong&gt; (privacy versus completeness and transparency), we have looked at the &lt;strong&gt;cost of guaranteeing&lt;/strong&gt; one at the expense of the other, to better sketch out desirable situations.&lt;br&gt;
This has enabled us to develop theoretical results in terms of &lt;strong&gt;minimax rates&lt;/strong&gt;. There is indeed a &lt;strong&gt;trade-off&lt;/strong&gt; between these criteria, which is even more costly in the case of non-parametric density estimation.&lt;br&gt;
Finally, we have compared these theoretical limits with empirical results, which &lt;strong&gt;confirm the conformity of the statements&lt;/strong&gt;.&lt;br&gt;
The aim of all this work is to disseminate this important yet under-exploited notion: privacy. To this end, we invite the reader to take the following &lt;strong&gt;quiz&lt;/strong&gt; to ensure his or her understanding.&lt;/p&gt;
&lt;h1 id=&#34;section-8&#34;&gt;Quizz&lt;/h1&gt;
&lt;p&gt;To test yourself abour privacy:&lt;/p&gt;
&lt;form id=&#34;quiz-form&#34; class=&#34;quiz-form&#34;&gt;
    &lt;div class=&#34;quiz-question&#34;&gt;
        &lt;p&gt;What is privacy?&lt;/p&gt;
        &lt;div class=&#34;quiz-options&#34;&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question1&#34; value=&#34;1&#34;&gt;
                Avoid asking questions that can raise private information
            &lt;/label&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question1&#34; value=&#34;2&#34;&gt;
                A mechanism that prevents other agent to retrieve personnal information in your answer
            &lt;/label&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question1&#34; value=&#34;3&#34;&gt;
                An ethical-washing trend
            &lt;/label&gt;
        &lt;/div&gt;
        &lt;p&gt;Which situation is α-local-differentially privacy?&lt;/p&gt;
        &lt;div class=&#34;quiz-options&#34;&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question2&#34; value=&#34;1&#34;&gt;
                sup {Q(Z | Xi = x)/Q(Z | Xi = x&#39;)} | x, x&#39; ∈ X} &gt;= exp(α)
            &lt;/label&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question2&#34; value=&#34;2&#34;&gt;
                You tell the truth half the time, you lie otherwise.
            &lt;/label&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question2&#34; value=&#34;3&#34;&gt;
                Z_i = X_i + (2M/α) W_i with W_i drawn from a Laplace Noise(0,1)
            &lt;/label&gt;
        &lt;/div&gt;
        &lt;p&gt;What is the privacy cost in term of optimal rate ?&lt;/p&gt;
        &lt;div class=&#34;quiz-options&#34;&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question3&#34; value=&#34;1&#34;&gt;
                Multinomial estimation: A factor α^2/d
            &lt;/label&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question3&#34; value=&#34;2&#34;&gt;
                Density estimation: from n^(-2β/2β+2) (without privacy) to (nα^2)^(-2β/(2β+2))
            &lt;/label&gt;
            &lt;label&gt;
                &lt;input type=&#34;radio&#34; name=&#34;question3&#34; value=&#34;3&#34;&gt;
                We loose nothing, that&#39;s the surprising finding of the paper
            &lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Add more quiz questions as needed --&gt;
    &lt;button type=&#34;submit&#34; class=&#34;quiz-submit&#34;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
&lt;div id=&#34;quiz-results&#34; class=&#34;quiz-results&#34;&gt;&lt;/div&gt;
&lt;script&gt;
    // Define quiz questions and correct answers
    const quizQuestions = [
        {
            question: &#34;What is privacy?&#34;,
            answer: &#34;2&#34;
        },
        //Add more quiz questions as needed
        {
            question: &#34;Which situation is α-local-differentially privacy?&#34;,
            answer: &#34;3&#34;
        },
        //Add more quiz questions as needed
        {
            question: &#34;What is the privacy cost in term of optimal rate ?&#34;,
            answer: &#34;1&#34;
        }
    ];

    // Handle form submission
    document.getElementById(&#39;quiz-form&#39;).addEventListener(&#39;submit&#39;, function(event) {
        event.preventDefault();

        // Calculate quiz score
        let score = 0;
        quizQuestions.forEach(question =&gt; {
            const selectedAnswer = document.querySelector(`input[name=&#34;question${quizQuestions.indexOf(question) + 1}&#34;]:checked`);
            if (selectedAnswer) {
                if (selectedAnswer.value.toLowerCase() === question.answer) {
                    score++;
                    selectedAnswer.parentElement.classList.add(&#39;correct&#39;);
                } else {
                    selectedAnswer.parentElement.classList.add(&#39;incorrect&#39;);
                }
            }
        });

        // Display quiz results
        const quizResults = document.getElementById(&#39;quiz-results&#39;);
        quizResults.innerHTML = `&lt;p&gt;You scored ${score} out of ${quizQuestions.length}.&lt;/p&gt;`;
    });
&lt;/script&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;annexes&#34;&gt;Annexes&lt;/h2&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Warner SL. Randomized response: a survey technique for eliminating evasive answer bias. J Am Stat Assoc. 1965 Mar;60(309):63-6. PMID: 12261830.&lt;/li&gt;
&lt;li&gt;John C. Duchi, Michael I. Jordan, and Martin Wainwright. Local Privacy and Minimax Bounds: Sharp Rates for Probability Estimation. Advances in Neural Information Processing Systems (2013)&lt;/li&gt;
&lt;li&gt;Dwork, C., &amp;amp; Roth, A. (2014). The algorithmic foundations of differential privacy. Foundations and Trends® in Theoretical Computer Science, 9(3-4), 211-407.&lt;/li&gt;
&lt;li&gt;Narayanan, A., &amp;amp; Shmatikov, V. (2008). Robust de-anonymization of large sparse datasets. In Security and Privacy, 2008. SP 2008. IEEE Symposium on (pp. 111-125). IEEE.&lt;/li&gt;
&lt;/ol&gt;
&lt;script&gt;
function highlight(text) {
  var inputText = document.getElementById(&#34;markdown-content&#34;);
  var innerHTML = inputText.innerHTML;
  var index = innerHTML.indexOf(text);
  if (index &gt;= 0) {
    innerHTML = innerHTML.substring(0,index) + &#34;&lt;span class=&#39;highlight&#39;&gt;&#34; + innerHTML.substring(index,index+text.length) + &#34;&lt;/span&gt;&#34; + innerHTML.substring(index + text.length);
    inputText.innerHTML = innerHTML;
  }
}
highlight(&#34;Estimating Privacy in Data Science&#34;);

&lt;/script&gt;
&lt;hr&gt;
&lt;script&gt;
    function displayInput() {
        var inputValue = document.getElementById(&#34;inputField&#34;).value;
        document.getElementById(&#34;output&#34;).innerText = &#34;You typed: &#34; + inputValue;
    }
&lt;/script&gt;
&lt;style&gt;
.highlight {
  background-color: red;
}
.highlight-on-hover:hover {
        background-color: yellow;
    }
/* Quiz form styles */
.quiz-form {
        max-width: 500px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
}

.quiz-question {
        margin-bottom: 20px;
}

.quiz-options label {
        display: block;
        margin-bottom: 10px;
}

.quiz-submit {
        background-color: #4caf50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
}

.quiz-submit:hover {
        background-color: #45a049;
}

/* Quiz results styles */
.quiz-results {
        margin-top: 20px;
        font-weight: bold;
}
.quiz-options label {
        display: block;
        margin-bottom: 10px;
    }
.quiz-options label.correct {
        color: green;
}
.quiz-options label.incorrect {
        color: red;
}
a[name]:hover {
        background-color: yellow; /* Change to the same color as normal state to maintain yellow highlight */
        text-decoration: none; /* Optionally remove underline on hover */
}
&lt;/style&gt;
&lt;style TYPE=&#34;text/css&#34;&gt;
code.has-jax {font: inherit; font-size: 100%; background: inherit; border: inherit;}
&lt;/style&gt;
&lt;script type=&#34;text/x-mathjax-config&#34;&gt;
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry
    }
});
MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/statistical_minimax_rates_under_privacy/</guid>
      <pubDate>Wed, 31 Jan 2024 17:22:02 +0100</pubDate>
    </item>
    
    <item>
      <title>Measuring the Transferability of Pre-trained Models: a link with Neural Collapse Distances on Target Datasets</title>
      <link>http://localhost:1313/posts/transferability/</link>
      <description>&lt;script
type=&#34;text/x-mathjax-config&#34;&gt;

MathJax.Hub.Config({

    tex2jax: {

        inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],

        skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;] // removed &#39;code&#39; entry

    }

});

MathJax.Hub.Queue(function() {

    var all = MathJax.Hub.getAllJax(), i;

    for(i = 0; i &lt; all.length; i += 1) {

        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;

    }

});

&lt;/script&gt;
&lt;script
type=&#34;text/javascript&#34;
src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-AMS_HTML-full&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;Authors&lt;/strong&gt; : Marion Chadal and Julie Massé&lt;/p&gt;
&lt;p&gt;This blog post discusses the paper &amp;ldquo;How Far Pre-trained Models Are from Neural Collapse on the Target Dataset Informs their Transferability&amp;rdquo; &lt;a href=&#34;#ref1&#34;&gt;[1]&lt;/a&gt;. It provides an explanation of it so that you can understand the usefulness of measuring transferability, and a reproduction of the authors&amp;rsquo; experiment so that you can better visualize their methodology.&lt;/p&gt;
&lt;h1 id=&#34;pre-trained-models-and-fine-tuning&#34;&gt;Pre-trained models and fine-tuning&lt;/h1&gt;
&lt;p&gt;Pre-trained models are currently one of the most active fields in Machine Learning. They can be found in a wide range of applications, from image recognition and natural language processing to autonomous driving and medical diagnosis. These models are &amp;ldquo;pre-trained&amp;rdquo; on massive datasets, most of the time encompassing millions of examples across diverse domains. The training process leverages Deep Learning algorithms and can take weeks or even months, utilizing powerful computing resources to iteratively adjust the model&amp;rsquo;s parameters until it achieves high accuracy on the training data.&lt;/p&gt;
&lt;p&gt;The first purpose of pre-training is to enable the model to learn a broad understanding of the world, capturing intricate patterns, relationships, and features that are not easily discernible. This extensive learning phase allows the model to develop a deep amount of knowledge, which it can then apply to more specific tasks through a process known as fine-tuning.&lt;/p&gt;
&lt;p&gt;What is &lt;strong&gt;fine-tuning&lt;/strong&gt;? It consists in adapting a general-purpose model to perform well on a specific task. This adaptation allows the model to fine-tune its learned features to better align with the nuances of the new task, enhancing its accuracy and performance. Whether it&amp;rsquo;s identifying specific types of objects in images, understanding the subtleties of natural language in a particular context, or diagnosing medical conditions from scans, fine-tuning enables pre-trained models to become specialized tools capable of tackling a wide range of applications.&lt;/p&gt;
&lt;p&gt;Fine-tuning begins with a pre-trained model—a model that has already learned a vast array of features and patterns from a comprehensive dataset, often spanning millions of examples. This model, equipped with a deep understanding of various data representations, serves as a robust starting point. The fine-tuning process then adapts this model to a specific task by continuing the training process on a smaller, task-specific dataset. This additional training phase is typically shorter and requires significantly fewer data and computational resources than training a model from scratch, as the model already possesses a foundational knowledge base.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;./images/ChadalMasse/schema.png&#34; width=&#34;600&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;One of the key aspects of fine-tuning is its efficiency in data utilization. Since the model has already learned general features and patterns, the fine-tuning process can achieve high performance with relatively small datasets. This characteristic is particularly valuable in domains where collecting large amounts of labeled data is challenging or expensive.&lt;/p&gt;
&lt;p&gt;Training from scratch is the complete opposite of fine-tuned pre-trained models, as it involves starting with randomly initialized parameters and requires a substantial dataset specific to the task at hand, along with considerable computational resources and time to achieve comparable performance to a fine-tuned pre-trained model. While training from scratch can be beneficial in certain scenarios where highly specialized knowledge is required or when a suitable pre-trained model is not available, the efficiency and effectiveness of leveraging pre-trained models are nowadays undeniable.&lt;/p&gt;
&lt;h1 id=&#34;transferability&#34;&gt;Transferability&lt;/h1&gt;
&lt;p&gt;Transferability caracterizes the &lt;em&gt;ability of pre-trained models to run on downstream tasks without performing fine-tuning, but achieving comparable results&lt;/em&gt;. Models that exhibit &lt;strong&gt;high transferability&lt;/strong&gt; are those that have learned &lt;strong&gt;generalizable features&lt;/strong&gt; during pre-training—features that are not overly specific to the training data but that capture universal patterns or structures present across different datasets and domains.&lt;/p&gt;
&lt;p&gt;Beside, transferability arises as an attempt of improvement in &lt;strong&gt;scalable AI&lt;/strong&gt;, as it enables researchers and practitioners to build upon existing knowledge without reinventing the wheel for every new task. This characteristic is especially crucial in our current case where data is abundant, but labeled data is scarce or expensive to obtain. Transferable models can leverage unlabeled data from similar domains, or even entirely different domains, to achieve impressive results with minimal effort.&lt;/p&gt;
&lt;p&gt;Moreover, the pursuit of enhancing transferability has led to innovations in model architecture, training strategies, and domain adaptation techniques. &lt;strong&gt;Few-shot learning&lt;/strong&gt; for instance, where models learn from a very small amount of labeled data, and zero-shot learning, where models apply their knowledge to tasks they have not explicitly been trained on.&lt;/p&gt;
&lt;p&gt;The concept of transferability also intersects with &lt;strong&gt;ethical AI&lt;/strong&gt; development, as it encourages the use of more generalizable models that can perform equitably across diverse datasets and demographics, reducing the risk of biased or unfair outcomes.&lt;/p&gt;
&lt;h1 id=&#34;why-measuring-transferability&#34;&gt;Why measuring transferability?&lt;/h1&gt;
&lt;p&gt;Fine-tuning pre-trained models works as follows. First, you &lt;strong&gt;pick a downstream task&lt;/strong&gt;, for which you have at your disposal several pre-trained models candidates. You want to compare their performances to pick the best one on test set, with the &lt;strong&gt;optimal fine-tuning configuration&lt;/strong&gt;. Then, you have to fine-tune each of them. Even if the dataset to train on is smaller, thanks to fine-tuning, you have to repeat it for all your models candidates, and one does not want that, as it can quickly become &lt;strong&gt;computationnally expensive&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Transferability estimation arises as a solution to anticipate and avoid unnecessary fine-tuning, by &lt;strong&gt;ranking the performances of pre-trained models&lt;/strong&gt; on a downstream task without any fine-tuning. Having a &lt;strong&gt;benchmark on the pre-trained models&amp;rsquo; transferability&lt;/strong&gt; would allow you to pick the relevant ones for your own downstream task.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;./images/ChadalMasse/machine-learning-life-cycle.png&#34; width=&#34;250&#34; height=&#34;250&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;This measure is also in line with &lt;strong&gt;frugality in AI&lt;/strong&gt;, which means using limited resources at every step of the Machine Learning lifecycle, while maintaining an acceptable accuracy. This frugality is especially relevant for small and medium-sized enterprises (SMEs) or startups, which may not have the vast computational resources that larger corporations possess. Transferable models democratize access to advanced AI capabilities, enabling these smaller entities to innovate and compete effectively. Frugality in AI also speaks to the broader goal of creating models that are not only powerful but also lean and efficient. Models with high transferability can achieve excellent performance across multiple tasks using significantly less data and fewer computational resources. This efficiency reduces the carbon footprint of training models and makes AI more accessible to a wider range of users and applications.&lt;/p&gt;
&lt;h1 id=&#34;neural-collapse&#34;&gt;Neural Collapse&lt;/h1&gt;
&lt;p&gt;Neural Collapse happens when training beyond 0 training error, i.e training error is at 0 while pushing training loss approaching 0 even further down. Imagine training a deep neural network on a dataset for a classification task. As the training process nears its end—particularly when the model is trained to a point of perfect or near-perfect classification accuracy on the training data. Intuitively, one would expect a highly overfitted and noisy model. Instead, a remarkable simplification occurs in the way the model represents the data, as it was shown in &lt;a href=&#34;#ref2&#34;&gt;[2]&lt;/a&gt;. This training approach offers better &lt;strong&gt;generalization&lt;/strong&gt; performance, better &lt;strong&gt;robustness&lt;/strong&gt;, and better &lt;strong&gt;interpretability&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Neural Collapse is characterized by three distinct proxies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Within-Class Variability Collapse:&lt;/strong&gt; for any given class, the feature vectors of all samples converge to a singular point or a tightly compact cluster in the high-dimensional feature space. This collapsing effect reduces the within-class variance to near zero,  meaning that all samples of a class are represented almost identically from the model&amp;rsquo;s perspective ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simplex Encoded Label Interpolation (SELI) geometry:&lt;/strong&gt; measures the gap between the features extracted by the pre-trained model and SELI geometry with the rank of the feature matrix. The higher the rank, the smaller the difference, the closer to Neural Collapse ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nearest Center Classifier:&lt;/strong&gt; ensures that the means of the collapsed points for different classes are maximally separated in the feature space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s look at this visual example of neural collapse :&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;./images/ChadalMasse/neural_collapse.gif&#34; width=&#34;250&#34; height=&#34;250&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;Where :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Green Balls&lt;/strong&gt;  represent the coordinates of a simplex equiangular tight frame (ETF).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Red Lines&lt;/strong&gt; represent the Final Layer Classifier. The direction of the sticks indicates the orientation of its decision boundaries, while the ball-end represents the centroid in the feature space used for classification.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Blue Lines&lt;/strong&gt; represent the class means of the activations in the last hidden layer. The sticks show the variance around these means.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Small Blue Balls&lt;/strong&gt; represent the last hidden layer activations. It shows how data points from each class are distributed around the class means, forming tight clusters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Initially these elements are all scattered, but as training progresses and neuronal collapse occurs, at each epoch, they move and converged gradually as shown in the GIF.&lt;/p&gt;
&lt;h1 id=&#34;why-choosing-neural-collapse-proxies&#34;&gt;Why choosing Neural Collapse proxies?&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s go back to imagining you have to perform a downstream task, and to do so you have to measure transferability between pre-trained models candidates. The three Neural Collapse proxies were previously defined, but we did not mention yet the three model&amp;rsquo;s aspects that are crucial to evaluate when choosing one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Generalization:&lt;/strong&gt; through Within-Class Variability Collapse, we gain insight into a model&amp;rsquo;s ability to generalize ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpretability:&lt;/strong&gt; the convergence toward SELI geometry not only enhances the model&amp;rsquo;s interpretability but also its alignment with optimal data representation structures. This alignment signifies a model&amp;rsquo;s capacity to distill and encode information in a way that mirrors the inherent structure of the data itself ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robustness:&lt;/strong&gt; the Nearest Center Classifier proxy underscores a model&amp;rsquo;s robustness. By ensuring that class means are well-separated, the model demonstrates resilience against noise and variability in data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Authors in &lt;a href=&#34;#ref3&#34;&gt;[3]&lt;/a&gt; demonstrate &lt;strong&gt;both theoretically and empirically&lt;/strong&gt; that Neural Collapse not only generalizes to new samples from the same classes seen during training but also, and more crucially, to entirely new classes. Also, a more recent research &lt;a href=&#34;#ref4&#34;&gt;[4]&lt;/a&gt; proposes a fine-tuning method based on Neural Collapse that achieves even better performance while reducing fine-tuning parameters by at least &lt;strong&gt;70%&lt;/strong&gt; !&lt;/p&gt;
&lt;h1 id=&#34;the-ncti&#34;&gt;The NCTI&lt;/h1&gt;
&lt;p&gt;Given these promising results, the authors developed a transferability estimation metric : the Neural Collapse Transferability Index (NCTI). This metric measures the proximity between the current state of a pre-trained model and its final fine-tuning stage on target, using the three neural collapse proxies defined above : Within-Class Variability Collapse, SELI geometry and Nearest Center Classifier. For each of them, a score is established :  $S^m_{vc}$, $S^m_{seli}$ and $S^{m}_{ncc}$. These three scores are then grouped together using normalization to prevent one score from dominating due to different scales. The final transferability estimation metric is obtained by adding the normalized scores:&lt;/p&gt;
&lt;p&gt;$$ S^m_{total} = S^m_{vc}(H^m) + S^m_{seli}(H^m) + S^{m}_{ncc}(H^m) $$&lt;/p&gt;
&lt;p&gt;Where $H_m$ is the feature extracted by the $m$-th pre-trained model (after ranking a set of $M$ pre-trained models).&lt;/p&gt;
&lt;p&gt;The higher the score $S^m_{total}$, the better the transferability of the model for target dataset.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s detail the scores $S^m_{vc}$, $S^m_{seli}$ and $S^{m}_{ncc}$:&lt;/p&gt;
&lt;h3 id=&#34;within-class-variability-collapse&#34;&gt;Within-Class Variability Collapse&lt;/h3&gt;
&lt;p&gt;The authors noticed that larger singular values indicate higher within-class variability because the features within the class exhibit significant variation from the mean, which is desirable for effective feature representation. But since singular value decomposition (SVD) is computationally expensive for large matrices, the nuclear norm which calculates the sum of singular values in a less expensive way was used. Additionally, as feature spaces are high dimensionnal, noise may appear and affect the calculation of variability. Therefore, instead of using the feature matrix $H^m_c$ directly, the classwise logits $Z^m_c$ are substituted to calculate the feature variability.&lt;/p&gt;
&lt;p&gt;Thus, the score $S_{vc}$ is calculated as follow :&lt;/p&gt;
&lt;p&gt;$$ S^m_{vc}(H^m) = - \sum_{c=1}^{C} ||Z^m_c||_* $$&lt;/p&gt;
&lt;p&gt;Where $Z^m_c$ denotes the logits of the $c$-th class extracted by the $m$-th model.&lt;/p&gt;
&lt;p&gt;The higher the score $S_{vc}$, the higher the within-class variability, which means that the pre-trained model is closer to the final fine-tuning stage.&lt;/p&gt;
&lt;h3 id=&#34;seli-geometry&#34;&gt;SELI geometry&lt;/h3&gt;
&lt;p&gt;SELI geometry is a concept proposed in &lt;a href=&#34;#ref6&#34;&gt;[6]&lt;/a&gt; as a generalized geometric structure version of the simplex equiangular tight frame (ETF). ETF is defined in the context of the phenomenon of neuronal collapse, but it is limited to balanced datasets. In contrast, SELI extends this concept to both balanced and unbalanced datasets. Difference between the two geometries is shown in the figure below :&lt;/p&gt;
&lt;div style=&#34;display: flex; justify-content: center; align-items: center;&#34;&gt;
    &lt;img src=&#34;./images/ChadalMasse/geometry.png&#34; alt=&#34;Image 1&#34; style=&#34;width: 49%; max-width: 100%; height: auto;&#34;&gt;
    &lt;img src=&#34;./images/ChadalMasse/neural_network.png&#34; alt=&#34;Image 2&#34; style=&#34;width: 49%; max-width: 100%; height: auto;&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Embeddings $H$ (in blue) and classifiers $W$ (in red) follow the SELI geometry if :&lt;/p&gt;
&lt;p&gt;$$ W^T W \alpha V \Lambda V^T,  H^T H \alpha U \Lambda U^T \text{and} W^T H \alpha \hat{Z} $$&lt;/p&gt;
&lt;p&gt;Where $\hat{Z} = V \Lambda U^T$ is the SEL matrix &lt;a href=&#34;#ref6&#34;&gt;[6]&lt;/a&gt;. $U$ and $V$ denote the left and right singular vector matrix of $\hat{Z}$. $\Lambda$ represents the diagonal singular value matrix.&lt;/p&gt;
&lt;p&gt;A method to assess the SELI geometry structure involves computing the difference between the logits $Z^m$ extracted from the pre-trained model and the optimal logits $\hat{Z}$. However, obtaining $Z^m$ directly without fine-tuning on the target dataset is time-consuming. Therefore, features $H^m$ of the model are extracted and their difference is measured to form the SELI structure. The complexity of achieving the optimal logits $\hat{Z}$ through features $H_m$ is approximated via the nuclear norm.&lt;/p&gt;
&lt;p&gt;Thus, the score $S^m_{seli}$ is calculated as :&lt;/p&gt;
&lt;p&gt;$$S^m_{seli}(H^m) = ||H^m||_*$$&lt;/p&gt;
&lt;p&gt;The higher the score $S^m_{seli}$ the higher the rank of the feature matrix $H_m$, making $Z$ closer to a full rank matrix.&lt;/p&gt;
&lt;h3 id=&#34;nearest-center-classifier&#34;&gt;Nearest Center Classifier&lt;/h3&gt;
&lt;p&gt;First, the posterior probability $P(y = c|h)$ for each class $c$ is calculated using Bayes&amp;rsquo; Rule:&lt;/p&gt;
&lt;p&gt;$$ \log P(y = c|h) = \frac{1}{2}(h_i - \mu_c)^T \Sigma (h_j - \mu_c) + \log P(y = c) $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\mu_c$ is the mean vector for class $c$.&lt;/li&gt;
&lt;li&gt;$\Sigma$ is the covariance matrix.&lt;/li&gt;
&lt;li&gt;$P(y = c)$ is the prior probability of class $c$.&lt;/li&gt;
&lt;li&gt;$h$ is the feature vector extracted by the pre-trained model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, the softmax function is applied to obtain the normalized posterior probability $z^m_{i,c}$ for each class $c$ of the $i$-th sample:&lt;/p&gt;
&lt;p&gt;$$ z^m_{i,c} = \frac{\exp(\log P(y = c|h^m_i))}{\Sigma ^C_{k=1} \exp(\log P(y = k|h^m_i))} $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$C$ is the number of classes.&lt;/li&gt;
&lt;li&gt;$h^m_i$ is the feature vector of the $i$-th sample extracted by the m-th pre-trained model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the score $S^m_{ncc}$ is computed as the average of the dot product of the normalized posterior probabilities $z^m_i$ and the ground truth labels $y_i$ for all samples:&lt;/p&gt;
&lt;p&gt;$$ S^m_{ncc}(H^m) = \frac{1}{N} \Sigma ^N_{i=1} z^m_i \cdot y_i $$&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$N$ is the number of samples.&lt;/li&gt;
&lt;li&gt;$y_i$ is the ground truth label of the $i$-th sample (in one-hot encoding).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The higher the score $S^{m}_{ncc}(H^m)$, the smaller the deviation to the nearest optimal centroid classifier and therefore the greater the transferability to the target dataset.&lt;/p&gt;
&lt;h1 id=&#34;numerical-experiment&#34;&gt;Numerical Experiment&lt;/h1&gt;
&lt;p&gt;To reproduce their experiment, the authors&amp;rsquo; code available on a &lt;a href=&#34;https://github.com/BUserName/NCTI/tree/main&#34;&gt;Github&lt;/a&gt; repository was used. A first encountered issue was the required &lt;code&gt;torch&lt;/code&gt; and &lt;code&gt;torchvision&lt;/code&gt; versions, which are quite old, and thus not always available to install, which was the case here. Fortunately, the  most recent versions were compatible with the code. A &lt;code&gt;requirements.txt&lt;/code&gt; file would have been welcome.&lt;/p&gt;
&lt;p&gt;A second issue is that there are remaining personal paths in some scripts, which should be replaced by downloading paths to PyTorch source models. As a consequence, the loading method from &lt;code&gt;torch&lt;/code&gt; should also be replaced.&lt;/p&gt;
&lt;p&gt;Other issues considering the datasets loading remained unsolved.&lt;/p&gt;
&lt;p&gt;After these modifications, it is possible to run the authors&amp;rsquo; experiments on the CIFAR10 dataset for the group of supervised pre-trained models. Consisting of 60 000 32x32 colour images in 10 classes, this dataset is broadly used in benchmarks for image classification. 12 pre-trained models were ran on CIFAR10 to establish a ranking based on their performances in terms of NCTI available below.&lt;/p&gt;
&lt;table style=&#34;width:100%; border-collapse: collapse;&#34; border=&#34;1&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&#34;text-align:left; padding: 8px;&#34;&gt;Model&lt;/th&gt;
      &lt;th style=&#34;text-align:left; padding: 8px;&#34;&gt;NCTI Score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;ResNet152&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;ResNet101&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;1.799&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;DenseNet201&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;1.434&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;DenseNet169&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;1.146&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;ResNet34&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;0.757&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;ResNet50&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;0.709&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;DenseNet121&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;0.655&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;MnasNet1_0&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;0.031&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;GoogleNet&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;-0.251&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;MobileNetV2&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;-0.444&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;InceptionV3&lt;/td&gt;
      &lt;td style=&#34;padding: 8px;&#34;&gt;-0.732&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Results show that the deepest architectures offer the best NCTI scores.  The depth of a network is closely related to its ability to learn and represent complex features and patterns from the training data, which contributes to a model&amp;rsquo;s superior transferability. The different performances between ResNet and DenseNet could be attributed to the way DenseNet connects each layer to every other layer in a feed-forward fashion, which, while efficient in parameter use and reducing overfitting, may not capture as complex a feature hierarchy as ResNet. Models like MnasNet, MobileNetV2, and InceptionV3, designed for efficiency and speed with a compromise on depth, understandably score lower in transferability, as reflected by their NCTI scores.&lt;/p&gt;
&lt;p&gt;Then, we evaluated the transferability of the supervised pre-trained models, in terms of weighted Kendall&amp;rsquo; τ, and obtained the exact same result as the one presented in the paper: &lt;strong&gt;0.843&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It was not possible for us to run the experiment on the group of self-supervised pre-trained models as the authors&amp;rsquo; code included personal paths, and we were not able to find them online.&lt;/p&gt;
&lt;p&gt;A Github repository with all the necessary modifications from the original code is at your disposal &lt;a href=&#34;https://github.com/marionchadal/NCTI&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;what-about-source-features&#34;&gt;What about source features?&lt;/h1&gt;
&lt;p&gt;Through extensive testing, authors have identified that two specific attributes related to neural collapse, observed in the source features, consistently predicted the model&amp;rsquo;s performance on new tasks. These attributes were the diversity within data categories and the compactness of category representations. Remarkably, models showing higher within-category diversity and more compact category representations in their source features tended to adapt better to new tasks. On the other hand, SELI did not consistently correlate with transferability.&lt;/p&gt;
&lt;h1 id=&#34;challenges&#34;&gt;Challenges&lt;/h1&gt;
&lt;p&gt;Authors did experiments on the effectiveness of each individual component in NCTI. They used the three terms individually and removed them one at a time from the full system, and it turned out that for supervised learning, the NCTI without NCC achieved the best weighted Kendall&amp;rsquo; τ. Instead of having normalized the three NCTI components equally, it could have been interesting to tune hyperparameters.
Moreover, the current implementation and validation of NCTI are confined to image classification tasks, suggesting its applicability may be limited to similar types of problems. Future work could extend the method&amp;rsquo;s applicability to a broader range of tasks beyond classification, such as detection or segmentation​​. Pre-trained language models could also be considered to measure their transferability based on Neural Collapse. For example, the Fair Collapse (FaCe) method &lt;a href=&#34;#ref7&#34;&gt;[7]&lt;/a&gt; considers both Computer Vision and Natural Language Processing tasks, using different proxies of Neural Collapse than NCTI, and producing a slightly less good τ on the CIFAR-10 dataset (0.81).&lt;/p&gt;
&lt;h1 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h1&gt;
&lt;p&gt;Key points to remember are :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Calculating model transferability and choosing the optimal pre-trained model is important for reasons of computational cost, environmental impact, and overall performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The authors have developed a new metric, the &lt;strong&gt;Neural Collapse informed Transferability Index (NCTI)&lt;/strong&gt;, which is based on the concept of &lt;strong&gt;neural collapse&lt;/strong&gt; and measures &lt;em&gt;the gap between the current feature geometry and the geometry at the terminal stage after hypothetical fine-tuning on the downstream task.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The NCTI metric integrates three aspects equally: &lt;strong&gt;SELI geometry&lt;/strong&gt;, &lt;strong&gt;within-class variability&lt;/strong&gt;, and &lt;strong&gt;nearest center classifier&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This method is &lt;em&gt;light to compute&lt;/em&gt;, enabling rapid evaluation of model transferability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empirical results demonstrate that &lt;em&gt;the ranking of model transferability has a very strong correlation with the ground truth ranking&lt;/em&gt; and &lt;strong&gt;compares with state-of-the-art methods&lt;/strong&gt;, highlighting its effectiveness in selecting pre-trained models for specific tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, the development of metrics such as NCTI is crucial for optimizing the use of pre-trained models, considering both performance and associated costs in real-world applications.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;p&gt;&lt;a id=&#34;ref1&#34;&gt;&lt;/a&gt;1. Z. Wang Y.Luo, L.Zheng, Z.Huang, M.Baktashmotlagh (2023), How far pre-trained models are from neural collapse on the target dataset informs their transferabilityWang, ICCV.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;ref2&#34;&gt;&lt;/a&gt;2. V. Papyan,1 , X. Y. Hanb,1 , and D.L. Donoho (2020), Prevalence of neural collapse during the terminal phase of deep learning training, National Academy of Sciences.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;ref3&#34;&gt;&lt;/a&gt;3. Galanti, T., György, A., &amp;amp; Hutter, M. (2021). On the role of neural collapse in transfer learning. arXiv preprint arXiv:2112.15121.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;ref4&#34;&gt;&lt;/a&gt;4. Li, X., Liu, S., Zhou, J., Lu, X., Fernandez-Granda, C., Zhu, Z., &amp;amp; Qu, Q. (2022). Principled and efficient transfer learning of deep models via neural collapse. arXiv preprint arXiv:2212.12206.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;ref5&#34;&gt;&lt;/a&gt;5. Vignesh Kothapalli, (2023). Neural Collapse: A Review on Modelling Principles and Generalization. arXiv preprint arXiv:2206.04041.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;ref6&#34;&gt;&lt;/a&gt;6. Christos Thrampoulidis, Ganesh R Kini, Vala Vakilian, and Tina Behnia. (2022). Imbalance trouble: Revisiting neural-collapse
geometry. arXiv preprint arXiv:2208.05512.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;ref7&#34;&gt;&lt;/a&gt;7. Yuhe Ding, Bo Jiang, Lijun Sheng, Aihua Zheng, Jian Liang. (2023). Unleashing the power of neural collapse for transferability estimation. arXiv preprint arXiv:2310.05754v1.&lt;/p&gt;
&lt;hr&gt;&lt;/hr&gt;
&lt;p&gt;Start writing here !&lt;/p&gt;
</description>
      <author>Students from M2 Data Science IP Paris</author>
      <guid>http://localhost:1313/posts/transferability/</guid>
      <pubDate>Mon, 08 Jan 2024 11:26:03 +0100</pubDate>
    </item>
    
  </channel>
</rss>
